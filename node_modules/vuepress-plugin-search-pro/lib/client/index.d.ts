import { App } from 'vue';
import { SearchOptions as SearchOptions$1 } from 'slimsearch';

type Word = [tag: string, content: string] | string;
interface TitleMatchedItem {
    type: "title";
    key: string;
    display: Word[][];
}
interface HeadingMatchedItem {
    type: "heading";
    key: string;
    anchor: string;
    display: Word[][];
}
interface ContentMatchedItem {
    type: "text";
    key: string;
    header?: string;
    anchor?: string;
    display: Word[][];
}
interface CustomMatchedItem {
    type: "customField";
    key: string;
    index: string;
    display: Word[][];
}
type MatchedItem = TitleMatchedItem | HeadingMatchedItem | ContentMatchedItem | CustomMatchedItem;
interface SearchResult {
    title: string;
    contents: MatchedItem[];
}
interface QueryResult {
    suggestions: string[];
    results: SearchResult[];
}

type SearchOptions = Omit<SearchOptions$1, "fields">;
interface MessageData {
    /**
     * @default "all"
     */
    type?: "search" | "suggest" | "all";
    query: string;
    locale: string;
    options?: SearchOptions;
}

declare const defineSearchConfig: (options: SearchOptions) => void;
declare const useSearchOptions: () => SearchOptions;
declare const injectSearchConfig: (app: App) => void;

interface SearchWorker {
    search: <T extends MessageData>(options: T) => Promise<T["type"] extends "search" ? SearchResult[] : T["type"] extends "suggest" ? string[] : QueryResult>;
    terminate: () => void;
}
declare const createSearchWorker: () => SearchWorker;

export { SearchWorker, createSearchWorker, defineSearchConfig, injectSearchConfig, useSearchOptions };
