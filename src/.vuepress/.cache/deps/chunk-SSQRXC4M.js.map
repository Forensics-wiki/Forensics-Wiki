{
  "version": 3,
  "sources": ["../../../../node_modules/dagre-d3-es/src/graphlib/graph.js", "../../../../node_modules/dagre-d3-es/src/dagre/util.js", "../../../../node_modules/dagre-d3-es/src/dagre/add-border-segments.js", "../../../../node_modules/dagre-d3-es/src/dagre/coordinate-system.js", "../../../../node_modules/dagre-d3-es/src/dagre/data/list.js", "../../../../node_modules/dagre-d3-es/src/dagre/greedy-fas.js", "../../../../node_modules/dagre-d3-es/src/dagre/acyclic.js", "../../../../node_modules/dagre-d3-es/src/dagre/normalize.js", "../../../../node_modules/dagre-d3-es/src/dagre/rank/util.js", "../../../../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js", "../../../../node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js", "../../../../node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js", "../../../../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js", "../../../../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js", "../../../../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js", "../../../../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js", "../../../../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js", "../../../../node_modules/dagre-d3-es/src/dagre/rank/index.js", "../../../../node_modules/dagre-d3-es/src/dagre/nesting-graph.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/cross-count.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/init-order.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/barycenter.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/sort.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js", "../../../../node_modules/dagre-d3-es/src/dagre/order/index.js", "../../../../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js", "../../../../node_modules/dagre-d3-es/src/dagre/position/bk.js", "../../../../node_modules/dagre-d3-es/src/dagre/position/index.js", "../../../../node_modules/dagre-d3-es/src/dagre/layout.js"],
  "sourcesContent": ["import * as _ from 'lodash-es';\r\n\r\nvar DEFAULT_EDGE_NAME = '\\x00';\r\nvar GRAPH_NODE = '\\x00';\r\nvar EDGE_KEY_DELIM = '\\x01';\r\n\r\n// Implementation notes:\r\n//\r\n//  * Node id query functions should return string ids for the nodes\r\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\r\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\r\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\r\n//    reference edges. This is because we need a performant way to look these\r\n//    edges up and, object properties, which have string keys, are the closest\r\n//    we're going to get to a performant hashtable in JavaScript.\r\n\r\n// Implementation notes:\r\n//\r\n//  * Node id query functions should return string ids for the nodes\r\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\r\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\r\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\r\n//    reference edges. This is because we need a performant way to look these\r\n//    edges up and, object properties, which have string keys, are the closest\r\n//    we're going to get to a performant hashtable in JavaScript.\r\nexport class Graph {\r\n  constructor(opts = {}) {\r\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\r\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\r\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\r\n\r\n    // Label for the graph itself\r\n    this._label = undefined;\r\n\r\n    // Defaults to be set when creating a new node\r\n    this._defaultNodeLabelFn = _.constant(undefined);\r\n\r\n    // Defaults to be set when creating a new edge\r\n    this._defaultEdgeLabelFn = _.constant(undefined);\r\n\r\n    // v -> label\r\n    this._nodes = {};\r\n\r\n    if (this._isCompound) {\r\n      // v -> parent\r\n      this._parent = {};\r\n\r\n      // v -> children\r\n      this._children = {};\r\n      this._children[GRAPH_NODE] = {};\r\n    }\r\n\r\n    // v -> edgeObj\r\n    this._in = {};\r\n\r\n    // u -> v -> Number\r\n    this._preds = {};\r\n\r\n    // v -> edgeObj\r\n    this._out = {};\r\n\r\n    // v -> w -> Number\r\n    this._sucs = {};\r\n\r\n    // e -> edgeObj\r\n    this._edgeObjs = {};\r\n\r\n    // e -> label\r\n    this._edgeLabels = {};\r\n  }\r\n  /* === Graph functions ========= */\r\n  isDirected() {\r\n    return this._isDirected;\r\n  }\r\n  isMultigraph() {\r\n    return this._isMultigraph;\r\n  }\r\n  isCompound() {\r\n    return this._isCompound;\r\n  }\r\n  setGraph(label) {\r\n    this._label = label;\r\n    return this;\r\n  }\r\n  graph() {\r\n    return this._label;\r\n  }\r\n  /* === Node functions ========== */\r\n  setDefaultNodeLabel(newDefault) {\r\n    if (!_.isFunction(newDefault)) {\r\n      newDefault = _.constant(newDefault);\r\n    }\r\n    this._defaultNodeLabelFn = newDefault;\r\n    return this;\r\n  }\r\n  nodeCount() {\r\n    return this._nodeCount;\r\n  }\r\n  nodes() {\r\n    return _.keys(this._nodes);\r\n  }\r\n  sources() {\r\n    var self = this;\r\n    return _.filter(this.nodes(), function (v) {\r\n      return _.isEmpty(self._in[v]);\r\n    });\r\n  }\r\n  sinks() {\r\n    var self = this;\r\n    return _.filter(this.nodes(), function (v) {\r\n      return _.isEmpty(self._out[v]);\r\n    });\r\n  }\r\n  setNodes(vs, value) {\r\n    var args = arguments;\r\n    var self = this;\r\n    _.each(vs, function (v) {\r\n      if (args.length > 1) {\r\n        self.setNode(v, value);\r\n      } else {\r\n        self.setNode(v);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n  setNode(v, value) {\r\n    if (_.has(this._nodes, v)) {\r\n      if (arguments.length > 1) {\r\n        this._nodes[v] = value;\r\n      }\r\n      return this;\r\n    }\r\n\r\n    // @ts-expect-error\r\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\r\n    if (this._isCompound) {\r\n      this._parent[v] = GRAPH_NODE;\r\n      this._children[v] = {};\r\n      this._children[GRAPH_NODE][v] = true;\r\n    }\r\n    this._in[v] = {};\r\n    this._preds[v] = {};\r\n    this._out[v] = {};\r\n    this._sucs[v] = {};\r\n    ++this._nodeCount;\r\n    return this;\r\n  }\r\n  node(v) {\r\n    return this._nodes[v];\r\n  }\r\n  hasNode(v) {\r\n    return _.has(this._nodes, v);\r\n  }\r\n  removeNode(v) {\r\n    var self = this;\r\n    if (_.has(this._nodes, v)) {\r\n      var removeEdge = function (e) {\r\n        self.removeEdge(self._edgeObjs[e]);\r\n      };\r\n      delete this._nodes[v];\r\n      if (this._isCompound) {\r\n        this._removeFromParentsChildList(v);\r\n        delete this._parent[v];\r\n        _.each(this.children(v), function (child) {\r\n          self.setParent(child);\r\n        });\r\n        delete this._children[v];\r\n      }\r\n      _.each(_.keys(this._in[v]), removeEdge);\r\n      delete this._in[v];\r\n      delete this._preds[v];\r\n      _.each(_.keys(this._out[v]), removeEdge);\r\n      delete this._out[v];\r\n      delete this._sucs[v];\r\n      --this._nodeCount;\r\n    }\r\n    return this;\r\n  }\r\n  setParent(v, parent) {\r\n    if (!this._isCompound) {\r\n      throw new Error('Cannot set parent in a non-compound graph');\r\n    }\r\n\r\n    if (_.isUndefined(parent)) {\r\n      parent = GRAPH_NODE;\r\n    } else {\r\n      // Coerce parent to string\r\n      parent += '';\r\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\r\n        if (ancestor === v) {\r\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\r\n        }\r\n      }\r\n\r\n      this.setNode(parent);\r\n    }\r\n\r\n    this.setNode(v);\r\n    this._removeFromParentsChildList(v);\r\n    this._parent[v] = parent;\r\n    this._children[parent][v] = true;\r\n    return this;\r\n  }\r\n  _removeFromParentsChildList(v) {\r\n    delete this._children[this._parent[v]][v];\r\n  }\r\n  parent(v) {\r\n    if (this._isCompound) {\r\n      var parent = this._parent[v];\r\n      if (parent !== GRAPH_NODE) {\r\n        return parent;\r\n      }\r\n    }\r\n  }\r\n  children(v) {\r\n    if (_.isUndefined(v)) {\r\n      v = GRAPH_NODE;\r\n    }\r\n\r\n    if (this._isCompound) {\r\n      var children = this._children[v];\r\n      if (children) {\r\n        return _.keys(children);\r\n      }\r\n    } else if (v === GRAPH_NODE) {\r\n      return this.nodes();\r\n    } else if (this.hasNode(v)) {\r\n      return [];\r\n    }\r\n  }\r\n  predecessors(v) {\r\n    var predsV = this._preds[v];\r\n    if (predsV) {\r\n      return _.keys(predsV);\r\n    }\r\n  }\r\n  successors(v) {\r\n    var sucsV = this._sucs[v];\r\n    if (sucsV) {\r\n      return _.keys(sucsV);\r\n    }\r\n  }\r\n  neighbors(v) {\r\n    var preds = this.predecessors(v);\r\n    if (preds) {\r\n      return _.union(preds, this.successors(v));\r\n    }\r\n  }\r\n  isLeaf(v) {\r\n    var neighbors;\r\n    if (this.isDirected()) {\r\n      neighbors = this.successors(v);\r\n    } else {\r\n      neighbors = this.neighbors(v);\r\n    }\r\n    return neighbors.length === 0;\r\n  }\r\n  filterNodes(filter) {\r\n    // @ts-expect-error\r\n    var copy = new this.constructor({\r\n      directed: this._isDirected,\r\n      multigraph: this._isMultigraph,\r\n      compound: this._isCompound,\r\n    });\r\n\r\n    copy.setGraph(this.graph());\r\n\r\n    var self = this;\r\n    _.each(this._nodes, function (value, v) {\r\n      if (filter(v)) {\r\n        copy.setNode(v, value);\r\n      }\r\n    });\r\n\r\n    _.each(this._edgeObjs, function (e) {\r\n      // @ts-expect-error\r\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\r\n        copy.setEdge(e, self.edge(e));\r\n      }\r\n    });\r\n\r\n    var parents = {};\r\n    function findParent(v) {\r\n      var parent = self.parent(v);\r\n      if (parent === undefined || copy.hasNode(parent)) {\r\n        parents[v] = parent;\r\n        return parent;\r\n      } else if (parent in parents) {\r\n        return parents[parent];\r\n      } else {\r\n        return findParent(parent);\r\n      }\r\n    }\r\n\r\n    if (this._isCompound) {\r\n      _.each(copy.nodes(), function (v) {\r\n        copy.setParent(v, findParent(v));\r\n      });\r\n    }\r\n\r\n    return copy;\r\n  }\r\n  /* === Edge functions ========== */\r\n  setDefaultEdgeLabel(newDefault) {\r\n    if (!_.isFunction(newDefault)) {\r\n      newDefault = _.constant(newDefault);\r\n    }\r\n    this._defaultEdgeLabelFn = newDefault;\r\n    return this;\r\n  }\r\n  edgeCount() {\r\n    return this._edgeCount;\r\n  }\r\n  edges() {\r\n    return _.values(this._edgeObjs);\r\n  }\r\n  setPath(vs, value) {\r\n    var self = this;\r\n    var args = arguments;\r\n    _.reduce(vs, function (v, w) {\r\n      if (args.length > 1) {\r\n        self.setEdge(v, w, value);\r\n      } else {\r\n        self.setEdge(v, w);\r\n      }\r\n      return w;\r\n    });\r\n    return this;\r\n  }\r\n  /*\r\n   * setEdge(v, w, [value, [name]])\r\n   * setEdge({ v, w, [name] }, [value])\r\n   */\r\n  setEdge() {\r\n    var v, w, name, value;\r\n    var valueSpecified = false;\r\n    var arg0 = arguments[0];\r\n\r\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\r\n      v = arg0.v;\r\n      w = arg0.w;\r\n      name = arg0.name;\r\n      if (arguments.length === 2) {\r\n        value = arguments[1];\r\n        valueSpecified = true;\r\n      }\r\n    } else {\r\n      v = arg0;\r\n      w = arguments[1];\r\n      name = arguments[3];\r\n      if (arguments.length > 2) {\r\n        value = arguments[2];\r\n        valueSpecified = true;\r\n      }\r\n    }\r\n\r\n    v = '' + v;\r\n    w = '' + w;\r\n    if (!_.isUndefined(name)) {\r\n      name = '' + name;\r\n    }\r\n\r\n    var e = edgeArgsToId(this._isDirected, v, w, name);\r\n    if (_.has(this._edgeLabels, e)) {\r\n      if (valueSpecified) {\r\n        this._edgeLabels[e] = value;\r\n      }\r\n      return this;\r\n    }\r\n\r\n    if (!_.isUndefined(name) && !this._isMultigraph) {\r\n      throw new Error('Cannot set a named edge when isMultigraph = false');\r\n    }\r\n\r\n    // It didn't exist, so we need to create it.\r\n    // First ensure the nodes exist.\r\n    this.setNode(v);\r\n    this.setNode(w);\r\n\r\n    // @ts-expect-error\r\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\r\n\r\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\r\n    // Ensure we add undirected edges in a consistent way.\r\n    v = edgeObj.v;\r\n    w = edgeObj.w;\r\n\r\n    Object.freeze(edgeObj);\r\n    this._edgeObjs[e] = edgeObj;\r\n    incrementOrInitEntry(this._preds[w], v);\r\n    incrementOrInitEntry(this._sucs[v], w);\r\n    this._in[w][e] = edgeObj;\r\n    this._out[v][e] = edgeObj;\r\n    this._edgeCount++;\r\n    return this;\r\n  }\r\n  edge(v, w, name) {\r\n    var e =\r\n      arguments.length === 1\r\n        ? edgeObjToId(this._isDirected, arguments[0])\r\n        : edgeArgsToId(this._isDirected, v, w, name);\r\n    return this._edgeLabels[e];\r\n  }\r\n  hasEdge(v, w, name) {\r\n    var e =\r\n      arguments.length === 1\r\n        ? edgeObjToId(this._isDirected, arguments[0])\r\n        : edgeArgsToId(this._isDirected, v, w, name);\r\n    return _.has(this._edgeLabels, e);\r\n  }\r\n  removeEdge(v, w, name) {\r\n    var e =\r\n      arguments.length === 1\r\n        ? edgeObjToId(this._isDirected, arguments[0])\r\n        : edgeArgsToId(this._isDirected, v, w, name);\r\n    var edge = this._edgeObjs[e];\r\n    if (edge) {\r\n      v = edge.v;\r\n      w = edge.w;\r\n      delete this._edgeLabels[e];\r\n      delete this._edgeObjs[e];\r\n      decrementOrRemoveEntry(this._preds[w], v);\r\n      decrementOrRemoveEntry(this._sucs[v], w);\r\n      delete this._in[w][e];\r\n      delete this._out[v][e];\r\n      this._edgeCount--;\r\n    }\r\n    return this;\r\n  }\r\n  inEdges(v, u) {\r\n    var inV = this._in[v];\r\n    if (inV) {\r\n      var edges = _.values(inV);\r\n      if (!u) {\r\n        return edges;\r\n      }\r\n      return _.filter(edges, function (edge) {\r\n        return edge.v === u;\r\n      });\r\n    }\r\n  }\r\n  outEdges(v, w) {\r\n    var outV = this._out[v];\r\n    if (outV) {\r\n      var edges = _.values(outV);\r\n      if (!w) {\r\n        return edges;\r\n      }\r\n      return _.filter(edges, function (edge) {\r\n        return edge.w === w;\r\n      });\r\n    }\r\n  }\r\n  nodeEdges(v, w) {\r\n    var inEdges = this.inEdges(v, w);\r\n    if (inEdges) {\r\n      return inEdges.concat(this.outEdges(v, w));\r\n    }\r\n  }\r\n}\r\n\r\n/* Number of nodes in the graph. Should only be changed by the implementation. */\r\nGraph.prototype._nodeCount = 0;\r\n\r\n/* Number of edges in the graph. Should only be changed by the implementation. */\r\nGraph.prototype._edgeCount = 0;\r\n\r\nfunction incrementOrInitEntry(map, k) {\r\n  if (map[k]) {\r\n    map[k]++;\r\n  } else {\r\n    map[k] = 1;\r\n  }\r\n}\r\n\r\nfunction decrementOrRemoveEntry(map, k) {\r\n  if (!--map[k]) {\r\n    delete map[k];\r\n  }\r\n}\r\n\r\nfunction edgeArgsToId(isDirected, v_, w_, name) {\r\n  var v = '' + v_;\r\n  var w = '' + w_;\r\n  if (!isDirected && v > w) {\r\n    var tmp = v;\r\n    v = w;\r\n    w = tmp;\r\n  }\r\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\r\n}\r\n\r\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\r\n  var v = '' + v_;\r\n  var w = '' + w_;\r\n  if (!isDirected && v > w) {\r\n    var tmp = v;\r\n    v = w;\r\n    w = tmp;\r\n  }\r\n  var edgeObj = { v: v, w: w };\r\n  if (name) {\r\n    edgeObj.name = name;\r\n  }\r\n  return edgeObj;\r\n}\r\n\r\nfunction edgeObjToId(isDirected, edgeObj) {\r\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { Graph } from '../graphlib/index.js';\r\n\r\nexport {\r\n  addDummyNode,\r\n  simplify,\r\n  asNonCompoundGraph,\r\n  successorWeights,\r\n  predecessorWeights,\r\n  intersectRect,\r\n  buildLayerMatrix,\r\n  normalizeRanks,\r\n  removeEmptyRanks,\r\n  addBorderNode,\r\n  maxRank,\r\n  partition,\r\n  time,\r\n  notime,\r\n};\r\n\r\n/*\r\n * Adds a dummy node to the graph and return v.\r\n */\r\nfunction addDummyNode(g, type, attrs, name) {\r\n  var v;\r\n  do {\r\n    v = _.uniqueId(name);\r\n  } while (g.hasNode(v));\r\n\r\n  attrs.dummy = type;\r\n  g.setNode(v, attrs);\r\n  return v;\r\n}\r\n\r\n/*\r\n * Returns a new graph with only simple edges. Handles aggregation of data\r\n * associated with multi-edges.\r\n */\r\nfunction simplify(g) {\r\n  var simplified = new Graph().setGraph(g.graph());\r\n  _.forEach(g.nodes(), function (v) {\r\n    simplified.setNode(v, g.node(v));\r\n  });\r\n  _.forEach(g.edges(), function (e) {\r\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\r\n    var label = g.edge(e);\r\n    simplified.setEdge(e.v, e.w, {\r\n      weight: simpleLabel.weight + label.weight,\r\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\r\n    });\r\n  });\r\n  return simplified;\r\n}\r\n\r\nfunction asNonCompoundGraph(g) {\r\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\r\n  _.forEach(g.nodes(), function (v) {\r\n    if (!g.children(v).length) {\r\n      simplified.setNode(v, g.node(v));\r\n    }\r\n  });\r\n  _.forEach(g.edges(), function (e) {\r\n    simplified.setEdge(e, g.edge(e));\r\n  });\r\n  return simplified;\r\n}\r\n\r\nfunction successorWeights(g) {\r\n  var weightMap = _.map(g.nodes(), function (v) {\r\n    var sucs = {};\r\n    _.forEach(g.outEdges(v), function (e) {\r\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\r\n    });\r\n    return sucs;\r\n  });\r\n  return _.zipObject(g.nodes(), weightMap);\r\n}\r\n\r\nfunction predecessorWeights(g) {\r\n  var weightMap = _.map(g.nodes(), function (v) {\r\n    var preds = {};\r\n    _.forEach(g.inEdges(v), function (e) {\r\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\r\n    });\r\n    return preds;\r\n  });\r\n  return _.zipObject(g.nodes(), weightMap);\r\n}\r\n\r\n/*\r\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\r\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\r\n */\r\nfunction intersectRect(rect, point) {\r\n  var x = rect.x;\r\n  var y = rect.y;\r\n\r\n  // Rectangle intersection algorithm from:\r\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\r\n  var dx = point.x - x;\r\n  var dy = point.y - y;\r\n  var w = rect.width / 2;\r\n  var h = rect.height / 2;\r\n\r\n  if (!dx && !dy) {\r\n    throw new Error('Not possible to find intersection inside of the rectangle');\r\n  }\r\n\r\n  var sx, sy;\r\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\r\n    // Intersection is top or bottom of rect.\r\n    if (dy < 0) {\r\n      h = -h;\r\n    }\r\n    sx = (h * dx) / dy;\r\n    sy = h;\r\n  } else {\r\n    // Intersection is left or right of rect.\r\n    if (dx < 0) {\r\n      w = -w;\r\n    }\r\n    sx = w;\r\n    sy = (w * dy) / dx;\r\n  }\r\n\r\n  return { x: x + sx, y: y + sy };\r\n}\r\n\r\n/*\r\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\r\n * function will produce a matrix with the ids of each node.\r\n */\r\nfunction buildLayerMatrix(g) {\r\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\r\n    return [];\r\n  });\r\n  _.forEach(g.nodes(), function (v) {\r\n    var node = g.node(v);\r\n    var rank = node.rank;\r\n    if (!_.isUndefined(rank)) {\r\n      layering[rank][node.order] = v;\r\n    }\r\n  });\r\n  return layering;\r\n}\r\n\r\n/*\r\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\r\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\r\n */\r\nfunction normalizeRanks(g) {\r\n  var min = _.min(\r\n    _.map(g.nodes(), function (v) {\r\n      return g.node(v).rank;\r\n    })\r\n  );\r\n  _.forEach(g.nodes(), function (v) {\r\n    var node = g.node(v);\r\n    if (_.has(node, 'rank')) {\r\n      node.rank -= min;\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeEmptyRanks(g) {\r\n  // Ranks may not start at 0, so we need to offset them\r\n  var offset = _.min(\r\n    _.map(g.nodes(), function (v) {\r\n      return g.node(v).rank;\r\n    })\r\n  );\r\n\r\n  var layers = [];\r\n  _.forEach(g.nodes(), function (v) {\r\n    var rank = g.node(v).rank - offset;\r\n    if (!layers[rank]) {\r\n      layers[rank] = [];\r\n    }\r\n    layers[rank].push(v);\r\n  });\r\n\r\n  var delta = 0;\r\n  var nodeRankFactor = g.graph().nodeRankFactor;\r\n  _.forEach(layers, function (vs, i) {\r\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\r\n      --delta;\r\n    } else if (delta) {\r\n      _.forEach(vs, function (v) {\r\n        g.node(v).rank += delta;\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction addBorderNode(g, prefix, rank, order) {\r\n  var node = {\r\n    width: 0,\r\n    height: 0,\r\n  };\r\n  if (arguments.length >= 4) {\r\n    node.rank = rank;\r\n    node.order = order;\r\n  }\r\n  return addDummyNode(g, 'border', node, prefix);\r\n}\r\n\r\nfunction maxRank(g) {\r\n  return _.max(\r\n    _.map(g.nodes(), function (v) {\r\n      var rank = g.node(v).rank;\r\n      if (!_.isUndefined(rank)) {\r\n        return rank;\r\n      }\r\n    })\r\n  );\r\n}\r\n\r\n/*\r\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\r\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\r\n * into `rhs.\r\n */\r\nfunction partition(collection, fn) {\r\n  var result = { lhs: [], rhs: [] };\r\n  _.forEach(collection, function (value) {\r\n    if (fn(value)) {\r\n      result.lhs.push(value);\r\n    } else {\r\n      result.rhs.push(value);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/*\r\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\r\n * time it takes to execute the function.\r\n */\r\nfunction time(name, fn) {\r\n  var start = _.now();\r\n  try {\r\n    return fn();\r\n  } finally {\r\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\r\n  }\r\n}\r\n\r\nfunction notime(name, fn) {\r\n  return fn();\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport * as util from './util.js';\r\n\r\nexport { addBorderSegments };\r\n\r\nfunction addBorderSegments(g) {\r\n  function dfs(v) {\r\n    var children = g.children(v);\r\n    var node = g.node(v);\r\n    if (children.length) {\r\n      _.forEach(children, dfs);\r\n    }\r\n\r\n    if (_.has(node, 'minRank')) {\r\n      node.borderLeft = [];\r\n      node.borderRight = [];\r\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\r\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\r\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\r\n      }\r\n    }\r\n  }\r\n\r\n  _.forEach(g.children(), dfs);\r\n}\r\n\r\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\r\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\r\n  var prev = sgNode[prop][rank - 1];\r\n  var curr = util.addDummyNode(g, 'border', label, prefix);\r\n  sgNode[prop][rank] = curr;\r\n  g.setParent(curr, sg);\r\n  if (prev) {\r\n    g.setEdge(prev, curr, { weight: 1 });\r\n  }\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { adjust, undo };\r\n\r\nfunction adjust(g) {\r\n  var rankDir = g.graph().rankdir.toLowerCase();\r\n  if (rankDir === 'lr' || rankDir === 'rl') {\r\n    swapWidthHeight(g);\r\n  }\r\n}\r\n\r\nfunction undo(g) {\r\n  var rankDir = g.graph().rankdir.toLowerCase();\r\n  if (rankDir === 'bt' || rankDir === 'rl') {\r\n    reverseY(g);\r\n  }\r\n\r\n  if (rankDir === 'lr' || rankDir === 'rl') {\r\n    swapXY(g);\r\n    swapWidthHeight(g);\r\n  }\r\n}\r\n\r\nfunction swapWidthHeight(g) {\r\n  _.forEach(g.nodes(), function (v) {\r\n    swapWidthHeightOne(g.node(v));\r\n  });\r\n  _.forEach(g.edges(), function (e) {\r\n    swapWidthHeightOne(g.edge(e));\r\n  });\r\n}\r\n\r\nfunction swapWidthHeightOne(attrs) {\r\n  var w = attrs.width;\r\n  attrs.width = attrs.height;\r\n  attrs.height = w;\r\n}\r\n\r\nfunction reverseY(g) {\r\n  _.forEach(g.nodes(), function (v) {\r\n    reverseYOne(g.node(v));\r\n  });\r\n\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    _.forEach(edge.points, reverseYOne);\r\n    if (_.has(edge, 'y')) {\r\n      reverseYOne(edge);\r\n    }\r\n  });\r\n}\r\n\r\nfunction reverseYOne(attrs) {\r\n  attrs.y = -attrs.y;\r\n}\r\n\r\nfunction swapXY(g) {\r\n  _.forEach(g.nodes(), function (v) {\r\n    swapXYOne(g.node(v));\r\n  });\r\n\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    _.forEach(edge.points, swapXYOne);\r\n    if (_.has(edge, 'x')) {\r\n      swapXYOne(edge);\r\n    }\r\n  });\r\n}\r\n\r\nfunction swapXYOne(attrs) {\r\n  var x = attrs.x;\r\n  attrs.x = attrs.y;\r\n  attrs.y = x;\r\n}\r\n", "/*\r\n * Simple doubly linked list implementation derived from Cormen, et al.,\r\n * \"Introduction to Algorithms\".\r\n */\r\n\r\nexport { List };\r\n\r\nclass List {\r\n  constructor() {\r\n    var sentinel = {};\r\n    sentinel._next = sentinel._prev = sentinel;\r\n    this._sentinel = sentinel;\r\n  }\r\n  dequeue() {\r\n    var sentinel = this._sentinel;\r\n    var entry = sentinel._prev;\r\n    if (entry !== sentinel) {\r\n      unlink(entry);\r\n      return entry;\r\n    }\r\n  }\r\n  enqueue(entry) {\r\n    var sentinel = this._sentinel;\r\n    if (entry._prev && entry._next) {\r\n      unlink(entry);\r\n    }\r\n    entry._next = sentinel._next;\r\n    sentinel._next._prev = entry;\r\n    sentinel._next = entry;\r\n    entry._prev = sentinel;\r\n  }\r\n  toString() {\r\n    var strs = [];\r\n    var sentinel = this._sentinel;\r\n    var curr = sentinel._prev;\r\n    while (curr !== sentinel) {\r\n      strs.push(JSON.stringify(curr, filterOutLinks));\r\n      curr = curr._prev;\r\n    }\r\n    return '[' + strs.join(', ') + ']';\r\n  }\r\n}\r\n\r\nfunction unlink(entry) {\r\n  entry._prev._next = entry._next;\r\n  entry._next._prev = entry._prev;\r\n  delete entry._next;\r\n  delete entry._prev;\r\n}\r\n\r\nfunction filterOutLinks(k, v) {\r\n  if (k !== '_next' && k !== '_prev') {\r\n    return v;\r\n  }\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { Graph } from '../graphlib/index.js';\r\nimport { List } from './data/list.js';\r\n\r\n/*\r\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\r\n * arc set is a set of edges that can be removed to make a graph acyclic.\r\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\r\n * effective heuristic for the feedback arc set problem.\" This implementation\r\n * adjusts that from the paper to allow for weighted edges.\r\n */\r\nexport { greedyFAS };\r\n\r\nvar DEFAULT_WEIGHT_FN = _.constant(1);\r\n\r\nfunction greedyFAS(g, weightFn) {\r\n  if (g.nodeCount() <= 1) {\r\n    return [];\r\n  }\r\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\r\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\r\n\r\n  // Expand multi-edges\r\n  return _.flatten(\r\n    _.map(results, function (e) {\r\n      return g.outEdges(e.v, e.w);\r\n    })\r\n  );\r\n}\r\n\r\nfunction doGreedyFAS(g, buckets, zeroIdx) {\r\n  var results = [];\r\n  var sources = buckets[buckets.length - 1];\r\n  var sinks = buckets[0];\r\n\r\n  var entry;\r\n  while (g.nodeCount()) {\r\n    while ((entry = sinks.dequeue())) {\r\n      removeNode(g, buckets, zeroIdx, entry);\r\n    }\r\n    while ((entry = sources.dequeue())) {\r\n      removeNode(g, buckets, zeroIdx, entry);\r\n    }\r\n    if (g.nodeCount()) {\r\n      for (var i = buckets.length - 2; i > 0; --i) {\r\n        entry = buckets[i].dequeue();\r\n        if (entry) {\r\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\r\n  var results = collectPredecessors ? [] : undefined;\r\n\r\n  _.forEach(g.inEdges(entry.v), function (edge) {\r\n    var weight = g.edge(edge);\r\n    var uEntry = g.node(edge.v);\r\n\r\n    if (collectPredecessors) {\r\n      results.push({ v: edge.v, w: edge.w });\r\n    }\r\n\r\n    uEntry.out -= weight;\r\n    assignBucket(buckets, zeroIdx, uEntry);\r\n  });\r\n\r\n  _.forEach(g.outEdges(entry.v), function (edge) {\r\n    var weight = g.edge(edge);\r\n    var w = edge.w;\r\n    var wEntry = g.node(w);\r\n    wEntry['in'] -= weight;\r\n    assignBucket(buckets, zeroIdx, wEntry);\r\n  });\r\n\r\n  g.removeNode(entry.v);\r\n\r\n  return results;\r\n}\r\n\r\nfunction buildState(g, weightFn) {\r\n  var fasGraph = new Graph();\r\n  var maxIn = 0;\r\n  var maxOut = 0;\r\n\r\n  _.forEach(g.nodes(), function (v) {\r\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\r\n  });\r\n\r\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\r\n  // into a single edge for the fasGraph.\r\n  _.forEach(g.edges(), function (e) {\r\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\r\n    var weight = weightFn(e);\r\n    var edgeWeight = prevWeight + weight;\r\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\r\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\r\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\r\n  });\r\n\r\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\r\n    return new List();\r\n  });\r\n  var zeroIdx = maxIn + 1;\r\n\r\n  _.forEach(fasGraph.nodes(), function (v) {\r\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\r\n  });\r\n\r\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\r\n}\r\n\r\nfunction assignBucket(buckets, zeroIdx, entry) {\r\n  if (!entry.out) {\r\n    buckets[0].enqueue(entry);\r\n  } else if (!entry['in']) {\r\n    buckets[buckets.length - 1].enqueue(entry);\r\n  } else {\r\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\r\n  }\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { greedyFAS } from './greedy-fas.js';\r\n\r\nexport { run, undo };\r\n\r\nfunction run(g) {\r\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\r\n  _.forEach(fas, function (e) {\r\n    var label = g.edge(e);\r\n    g.removeEdge(e);\r\n    label.forwardName = e.name;\r\n    label.reversed = true;\r\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\r\n  });\r\n\r\n  function weightFn(g) {\r\n    return function (e) {\r\n      return g.edge(e).weight;\r\n    };\r\n  }\r\n}\r\n\r\nfunction dfsFAS(g) {\r\n  var fas = [];\r\n  var stack = {};\r\n  var visited = {};\r\n\r\n  function dfs(v) {\r\n    if (_.has(visited, v)) {\r\n      return;\r\n    }\r\n    visited[v] = true;\r\n    stack[v] = true;\r\n    _.forEach(g.outEdges(v), function (e) {\r\n      if (_.has(stack, e.w)) {\r\n        fas.push(e);\r\n      } else {\r\n        dfs(e.w);\r\n      }\r\n    });\r\n    delete stack[v];\r\n  }\r\n\r\n  _.forEach(g.nodes(), dfs);\r\n  return fas;\r\n}\r\n\r\nfunction undo(g) {\r\n  _.forEach(g.edges(), function (e) {\r\n    var label = g.edge(e);\r\n    if (label.reversed) {\r\n      g.removeEdge(e);\r\n\r\n      var forwardName = label.forwardName;\r\n      delete label.reversed;\r\n      delete label.forwardName;\r\n      g.setEdge(e.w, e.v, label, forwardName);\r\n    }\r\n  });\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport * as util from './util.js';\r\n\r\nexport { run, undo };\r\n\r\n/*\r\n * Breaks any long edges in the graph into short segments that span 1 layer\r\n * each. This operation is undoable with the denormalize function.\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. The input graph is a DAG.\r\n *    2. Each node in the graph has a \"rank\" property.\r\n *\r\n * Post-condition:\r\n *\r\n *    1. All edges in the graph have a length of 1.\r\n *    2. Dummy nodes are added where edges have been split into segments.\r\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\r\n *       the first dummy in each chain of dummy nodes produced.\r\n */\r\nfunction run(g) {\r\n  g.graph().dummyChains = [];\r\n  _.forEach(g.edges(), function (edge) {\r\n    normalizeEdge(g, edge);\r\n  });\r\n}\r\n\r\nfunction normalizeEdge(g, e) {\r\n  var v = e.v;\r\n  var vRank = g.node(v).rank;\r\n  var w = e.w;\r\n  var wRank = g.node(w).rank;\r\n  var name = e.name;\r\n  var edgeLabel = g.edge(e);\r\n  var labelRank = edgeLabel.labelRank;\r\n\r\n  if (wRank === vRank + 1) return;\r\n\r\n  g.removeEdge(e);\r\n\r\n  var dummy, attrs, i;\r\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\r\n    edgeLabel.points = [];\r\n    attrs = {\r\n      width: 0,\r\n      height: 0,\r\n      edgeLabel: edgeLabel,\r\n      edgeObj: e,\r\n      rank: vRank,\r\n    };\r\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\r\n    if (vRank === labelRank) {\r\n      attrs.width = edgeLabel.width;\r\n      attrs.height = edgeLabel.height;\r\n      // @ts-expect-error\r\n      attrs.dummy = 'edge-label';\r\n      // @ts-expect-error\r\n      attrs.labelpos = edgeLabel.labelpos;\r\n    }\r\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\r\n    if (i === 0) {\r\n      g.graph().dummyChains.push(dummy);\r\n    }\r\n    v = dummy;\r\n  }\r\n\r\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\r\n}\r\n\r\nfunction undo(g) {\r\n  _.forEach(g.graph().dummyChains, function (v) {\r\n    var node = g.node(v);\r\n    var origLabel = node.edgeLabel;\r\n    var w;\r\n    g.setEdge(node.edgeObj, origLabel);\r\n    while (node.dummy) {\r\n      w = g.successors(v)[0];\r\n      g.removeNode(v);\r\n      origLabel.points.push({ x: node.x, y: node.y });\r\n      if (node.dummy === 'edge-label') {\r\n        origLabel.x = node.x;\r\n        origLabel.y = node.y;\r\n        origLabel.width = node.width;\r\n        origLabel.height = node.height;\r\n      }\r\n      v = w;\r\n      node = g.node(v);\r\n    }\r\n  });\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { longestPath, slack };\r\n\r\n/*\r\n * Initializes ranks for the input graph using the longest path algorithm. This\r\n * algorithm scales well and is fast in practice, it yields rather poor\r\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\r\n * ranks wide and leaving edges longer than necessary. However, due to its\r\n * speed, this algorithm is good for getting an initial ranking that can be fed\r\n * into other algorithms.\r\n *\r\n * This algorithm does not normalize layers because it will be used by other\r\n * algorithms in most cases. If using this algorithm directly, be sure to\r\n * run normalize at the end.\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Input graph is a DAG.\r\n *    2. Input graph node labels can be assigned properties.\r\n *\r\n * Post-conditions:\r\n *\r\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\r\n */\r\nfunction longestPath(g) {\r\n  var visited = {};\r\n\r\n  function dfs(v) {\r\n    var label = g.node(v);\r\n    if (_.has(visited, v)) {\r\n      return label.rank;\r\n    }\r\n    visited[v] = true;\r\n\r\n    var rank = _.min(\r\n      _.map(g.outEdges(v), function (e) {\r\n        return dfs(e.w) - g.edge(e).minlen;\r\n      })\r\n    );\r\n\r\n    if (\r\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\r\n      rank === undefined || // return value of _.map([]) for Lodash 4\r\n      rank === null\r\n    ) {\r\n      // return value of _.map([null])\r\n      rank = 0;\r\n    }\r\n\r\n    return (label.rank = rank);\r\n  }\r\n\r\n  _.forEach(g.sources(), dfs);\r\n}\r\n\r\n/*\r\n * Returns the amount of slack for the given edge. The slack is defined as the\r\n * difference between the length of the edge and its minimum length.\r\n */\r\nfunction slack(g, e) {\r\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { Graph } from '../../graphlib/index.js';\r\nimport { slack } from './util.js';\r\n\r\nexport { feasibleTree };\r\n\r\n/*\r\n * Constructs a spanning tree with tight edges and adjusted the input node's\r\n * ranks to achieve this. A tight edge is one that is has a length that matches\r\n * its \"minlen\" attribute.\r\n *\r\n * The basic structure for this function is derived from Gansner, et al., \"A\r\n * Technique for Drawing Directed Graphs.\"\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Graph must be a DAG.\r\n *    2. Graph must be connected.\r\n *    3. Graph must have at least one node.\r\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\r\n *       respects the \"minlen\" property of incident edges.\r\n *    6. Graph edges must have a \"minlen\" property.\r\n *\r\n * Post-conditions:\r\n *\r\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\r\n *      tight.\r\n *\r\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\r\n * edges.\r\n */\r\nfunction feasibleTree(g) {\r\n  var t = new Graph({ directed: false });\r\n\r\n  // Choose arbitrary node from which to start our tree\r\n  var start = g.nodes()[0];\r\n  var size = g.nodeCount();\r\n  t.setNode(start, {});\r\n\r\n  var edge, delta;\r\n  while (tightTree(t, g) < size) {\r\n    edge = findMinSlackEdge(t, g);\r\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\r\n    shiftRanks(t, g, delta);\r\n  }\r\n\r\n  return t;\r\n}\r\n\r\n/*\r\n * Finds a maximal tree of tight edges and returns the number of nodes in the\r\n * tree.\r\n */\r\nfunction tightTree(t, g) {\r\n  function dfs(v) {\r\n    _.forEach(g.nodeEdges(v), function (e) {\r\n      var edgeV = e.v,\r\n        w = v === edgeV ? e.w : edgeV;\r\n      if (!t.hasNode(w) && !slack(g, e)) {\r\n        t.setNode(w, {});\r\n        t.setEdge(v, w, {});\r\n        dfs(w);\r\n      }\r\n    });\r\n  }\r\n\r\n  _.forEach(t.nodes(), dfs);\r\n  return t.nodeCount();\r\n}\r\n\r\n/*\r\n * Finds the edge with the smallest slack that is incident on tree and returns\r\n * it.\r\n */\r\nfunction findMinSlackEdge(t, g) {\r\n  return _.minBy(g.edges(), function (e) {\r\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\r\n      return slack(g, e);\r\n    }\r\n  });\r\n}\r\n\r\nfunction shiftRanks(t, g, delta) {\r\n  _.forEach(t.nodes(), function (v) {\r\n    g.node(v).rank += delta;\r\n  });\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { PriorityQueue } from '../data/priority-queue.js';\r\n\r\nexport { dijkstra };\r\n\r\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\r\n\r\nfunction dijkstra(g, source, weightFn, edgeFn) {\r\n  return runDijkstra(\r\n    g,\r\n    String(source),\r\n    weightFn || DEFAULT_WEIGHT_FUNC,\r\n    edgeFn ||\r\n      function (v) {\r\n        return g.outEdges(v);\r\n      }\r\n  );\r\n}\r\n\r\nfunction runDijkstra(g, source, weightFn, edgeFn) {\r\n  var results = {};\r\n  var pq = new PriorityQueue();\r\n  var v, vEntry;\r\n\r\n  var updateNeighbors = function (edge) {\r\n    var w = edge.v !== v ? edge.v : edge.w;\r\n    var wEntry = results[w];\r\n    var weight = weightFn(edge);\r\n    var distance = vEntry.distance + weight;\r\n\r\n    if (weight < 0) {\r\n      throw new Error(\r\n        'dijkstra does not allow negative edge weights. ' +\r\n          'Bad edge: ' +\r\n          edge +\r\n          ' Weight: ' +\r\n          weight\r\n      );\r\n    }\r\n\r\n    if (distance < wEntry.distance) {\r\n      wEntry.distance = distance;\r\n      wEntry.predecessor = v;\r\n      pq.decrease(w, distance);\r\n    }\r\n  };\r\n\r\n  g.nodes().forEach(function (v) {\r\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\r\n    results[v] = { distance: distance };\r\n    pq.add(v, distance);\r\n  });\r\n\r\n  while (pq.size() > 0) {\r\n    v = pq.removeMin();\r\n    vEntry = results[v];\r\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\r\n      break;\r\n    }\r\n\r\n    edgeFn(v).forEach(updateNeighbors);\r\n  }\r\n\r\n  return results;\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { floydWarshall };\r\n\r\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\r\n\r\nfunction floydWarshall(g, weightFn, edgeFn) {\r\n  return runFloydWarshall(\r\n    g,\r\n    weightFn || DEFAULT_WEIGHT_FUNC,\r\n    edgeFn ||\r\n      function (v) {\r\n        return g.outEdges(v);\r\n      }\r\n  );\r\n}\r\n\r\nfunction runFloydWarshall(g, weightFn, edgeFn) {\r\n  var results = {};\r\n  var nodes = g.nodes();\r\n\r\n  nodes.forEach(function (v) {\r\n    results[v] = {};\r\n    results[v][v] = { distance: 0 };\r\n    nodes.forEach(function (w) {\r\n      if (v !== w) {\r\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\r\n      }\r\n    });\r\n    edgeFn(v).forEach(function (edge) {\r\n      var w = edge.v === v ? edge.w : edge.v;\r\n      var d = weightFn(edge);\r\n      results[v][w] = { distance: d, predecessor: v };\r\n    });\r\n  });\r\n\r\n  nodes.forEach(function (k) {\r\n    var rowK = results[k];\r\n    nodes.forEach(function (i) {\r\n      var rowI = results[i];\r\n      nodes.forEach(function (j) {\r\n        var ik = rowI[k];\r\n        var kj = rowK[j];\r\n        var ij = rowI[j];\r\n        var altDistance = ik.distance + kj.distance;\r\n        if (altDistance < ij.distance) {\r\n          ij.distance = altDistance;\r\n          ij.predecessor = kj.predecessor;\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  return results;\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { topsort, CycleException };\r\n\r\ntopsort.CycleException = CycleException;\r\n\r\nfunction topsort(g) {\r\n  var visited = {};\r\n  var stack = {};\r\n  var results = [];\r\n\r\n  function visit(node) {\r\n    if (_.has(stack, node)) {\r\n      throw new CycleException();\r\n    }\r\n\r\n    if (!_.has(visited, node)) {\r\n      stack[node] = true;\r\n      visited[node] = true;\r\n      _.each(g.predecessors(node), visit);\r\n      delete stack[node];\r\n      results.push(node);\r\n    }\r\n  }\r\n\r\n  _.each(g.sinks(), visit);\r\n\r\n  if (_.size(visited) !== g.nodeCount()) {\r\n    throw new CycleException();\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nfunction CycleException() {}\r\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { dfs };\r\n\r\n/*\r\n * A helper that preforms a pre- or post-order traversal on the input graph\r\n * and returns the nodes in the order they were visited. If the graph is\r\n * undirected then this algorithm will navigate using neighbors. If the graph\r\n * is directed then this algorithm will navigate using successors.\r\n *\r\n * Order must be one of \"pre\" or \"post\".\r\n */\r\nfunction dfs(g, vs, order) {\r\n  if (!_.isArray(vs)) {\r\n    vs = [vs];\r\n  }\r\n\r\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\r\n\r\n  var acc = [];\r\n  var visited = {};\r\n  _.each(vs, function (v) {\r\n    if (!g.hasNode(v)) {\r\n      throw new Error('Graph does not have node: ' + v);\r\n    }\r\n\r\n    doDfs(g, v, order === 'post', visited, navigation, acc);\r\n  });\r\n  return acc;\r\n}\r\n\r\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\r\n  if (!_.has(visited, v)) {\r\n    visited[v] = true;\r\n\r\n    if (!postorder) {\r\n      acc.push(v);\r\n    }\r\n    _.each(navigation(v), function (w) {\r\n      doDfs(g, w, postorder, visited, navigation, acc);\r\n    });\r\n    if (postorder) {\r\n      acc.push(v);\r\n    }\r\n  }\r\n}\r\n", "import { dfs } from './dfs.js';\r\n\r\nexport { postorder };\r\n\r\nfunction postorder(g, vs) {\r\n  return dfs(g, vs, 'post');\r\n}\r\n", "import { dfs } from './dfs.js';\r\n\r\nexport { preorder };\r\n\r\nfunction preorder(g, vs) {\r\n  return dfs(g, vs, 'pre');\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport * as alg from '../../graphlib/alg/index.js';\r\nimport { simplify } from '../util.js';\r\nimport { feasibleTree } from './feasible-tree.js';\r\nimport { longestPath, slack } from './util.js';\r\n\r\nexport { networkSimplex };\r\n\r\n// Expose some internals for testing purposes\r\nnetworkSimplex.initLowLimValues = initLowLimValues;\r\nnetworkSimplex.initCutValues = initCutValues;\r\nnetworkSimplex.calcCutValue = calcCutValue;\r\nnetworkSimplex.leaveEdge = leaveEdge;\r\nnetworkSimplex.enterEdge = enterEdge;\r\nnetworkSimplex.exchangeEdges = exchangeEdges;\r\n\r\n/*\r\n * The network simplex algorithm assigns ranks to each node in the input graph\r\n * and iteratively improves the ranking to reduce the length of edges.\r\n *\r\n * Preconditions:\r\n *\r\n *    1. The input graph must be a DAG.\r\n *    2. All nodes in the graph must have an object value.\r\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\r\n *\r\n * Postconditions:\r\n *\r\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\r\n *       been optimized by the network simplex algorithm. Ranks start at 0.\r\n *\r\n *\r\n * A rough sketch of the algorithm is as follows:\r\n *\r\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\r\n *       which assigns ranks to the lowest position possible. In general this\r\n *       leads to very wide bottom ranks and unnecessarily long edges.\r\n *    2. Construct a feasible tight tree. A tight tree is one such that all\r\n *       edges in the tree have no slack (difference between length of edge\r\n *       and minlen for the edge). This by itself greatly improves the assigned\r\n *       rankings by shorting edges.\r\n *    3. Iteratively find edges that have negative cut values. Generally a\r\n *       negative cut value indicates that the edge could be removed and a new\r\n *       tree edge could be added to produce a more compact graph.\r\n *\r\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\r\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\r\n * structure of the overall algorithm.\r\n */\r\nfunction networkSimplex(g) {\r\n  g = simplify(g);\r\n  longestPath(g);\r\n  var t = feasibleTree(g);\r\n  initLowLimValues(t);\r\n  initCutValues(t, g);\r\n\r\n  var e, f;\r\n  while ((e = leaveEdge(t))) {\r\n    f = enterEdge(t, g, e);\r\n    exchangeEdges(t, g, e, f);\r\n  }\r\n}\r\n\r\n/*\r\n * Initializes cut values for all edges in the tree.\r\n */\r\nfunction initCutValues(t, g) {\r\n  var vs = alg.postorder(t, t.nodes());\r\n  vs = vs.slice(0, vs.length - 1);\r\n  _.forEach(vs, function (v) {\r\n    assignCutValue(t, g, v);\r\n  });\r\n}\r\n\r\nfunction assignCutValue(t, g, child) {\r\n  var childLab = t.node(child);\r\n  var parent = childLab.parent;\r\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\r\n}\r\n\r\n/*\r\n * Given the tight tree, its graph, and a child in the graph calculate and\r\n * return the cut value for the edge between the child and its parent.\r\n */\r\nfunction calcCutValue(t, g, child) {\r\n  var childLab = t.node(child);\r\n  var parent = childLab.parent;\r\n  // True if the child is on the tail end of the edge in the directed graph\r\n  var childIsTail = true;\r\n  // The graph's view of the tree edge we're inspecting\r\n  var graphEdge = g.edge(child, parent);\r\n  // The accumulated cut value for the edge between this node and its parent\r\n  var cutValue = 0;\r\n\r\n  if (!graphEdge) {\r\n    childIsTail = false;\r\n    graphEdge = g.edge(parent, child);\r\n  }\r\n\r\n  cutValue = graphEdge.weight;\r\n\r\n  _.forEach(g.nodeEdges(child), function (e) {\r\n    var isOutEdge = e.v === child,\r\n      other = isOutEdge ? e.w : e.v;\r\n\r\n    if (other !== parent) {\r\n      var pointsToHead = isOutEdge === childIsTail,\r\n        otherWeight = g.edge(e).weight;\r\n\r\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\r\n      if (isTreeEdge(t, child, other)) {\r\n        var otherCutValue = t.edge(child, other).cutvalue;\r\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return cutValue;\r\n}\r\n\r\nfunction initLowLimValues(tree, root) {\r\n  if (arguments.length < 2) {\r\n    root = tree.nodes()[0];\r\n  }\r\n  dfsAssignLowLim(tree, {}, 1, root);\r\n}\r\n\r\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\r\n  var low = nextLim;\r\n  var label = tree.node(v);\r\n\r\n  visited[v] = true;\r\n  _.forEach(tree.neighbors(v), function (w) {\r\n    if (!_.has(visited, w)) {\r\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\r\n    }\r\n  });\r\n\r\n  label.low = low;\r\n  label.lim = nextLim++;\r\n  if (parent) {\r\n    label.parent = parent;\r\n  } else {\r\n    // TODO should be able to remove this when we incrementally update low lim\r\n    delete label.parent;\r\n  }\r\n\r\n  return nextLim;\r\n}\r\n\r\nfunction leaveEdge(tree) {\r\n  return _.find(tree.edges(), function (e) {\r\n    return tree.edge(e).cutvalue < 0;\r\n  });\r\n}\r\n\r\nfunction enterEdge(t, g, edge) {\r\n  var v = edge.v;\r\n  var w = edge.w;\r\n\r\n  // For the rest of this function we assume that v is the tail and w is the\r\n  // head, so if we don't have this edge in the graph we should flip it to\r\n  // match the correct orientation.\r\n  if (!g.hasEdge(v, w)) {\r\n    v = edge.w;\r\n    w = edge.v;\r\n  }\r\n\r\n  var vLabel = t.node(v);\r\n  var wLabel = t.node(w);\r\n  var tailLabel = vLabel;\r\n  var flip = false;\r\n\r\n  // If the root is in the tail of the edge then we need to flip the logic that\r\n  // checks for the head and tail nodes in the candidates function below.\r\n  if (vLabel.lim > wLabel.lim) {\r\n    tailLabel = wLabel;\r\n    flip = true;\r\n  }\r\n\r\n  var candidates = _.filter(g.edges(), function (edge) {\r\n    return (\r\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\r\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\r\n    );\r\n  });\r\n\r\n  return _.minBy(candidates, function (edge) {\r\n    return slack(g, edge);\r\n  });\r\n}\r\n\r\nfunction exchangeEdges(t, g, e, f) {\r\n  var v = e.v;\r\n  var w = e.w;\r\n  t.removeEdge(v, w);\r\n  t.setEdge(f.v, f.w, {});\r\n  initLowLimValues(t);\r\n  initCutValues(t, g);\r\n  updateRanks(t, g);\r\n}\r\n\r\nfunction updateRanks(t, g) {\r\n  var root = _.find(t.nodes(), function (v) {\r\n    return !g.node(v).parent;\r\n  });\r\n  var vs = alg.preorder(t, root);\r\n  vs = vs.slice(1);\r\n  _.forEach(vs, function (v) {\r\n    var parent = t.node(v).parent,\r\n      edge = g.edge(v, parent),\r\n      flipped = false;\r\n\r\n    if (!edge) {\r\n      edge = g.edge(parent, v);\r\n      flipped = true;\r\n    }\r\n\r\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\r\n  });\r\n}\r\n\r\n/*\r\n * Returns true if the edge is in the tree.\r\n */\r\nfunction isTreeEdge(tree, u, v) {\r\n  return tree.hasEdge(u, v);\r\n}\r\n\r\n/*\r\n * Returns true if the specified node is descendant of the root node per the\r\n * assigned low and lim attributes in the tree.\r\n */\r\nfunction isDescendant(tree, vLabel, rootLabel) {\r\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\r\n}\r\n", "import { feasibleTree } from './feasible-tree.js';\r\nimport { networkSimplex } from './network-simplex.js';\r\nimport { longestPath } from './util.js';\r\n\r\nexport { rank };\r\n\r\n/*\r\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\r\n * constraint specified on edges between nodes.\r\n *\r\n * This basic structure is derived from Gansner, et al., \"A Technique for\r\n * Drawing Directed Graphs.\"\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Graph must be a connected DAG\r\n *    2. Graph nodes must be objects\r\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\r\n *\r\n * Post-conditions:\r\n *\r\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\r\n *       algorithm. Ranks can start at any index (including negative), we'll\r\n *       fix them up later.\r\n */\r\nfunction rank(g) {\r\n  switch (g.graph().ranker) {\r\n    case 'network-simplex':\r\n      networkSimplexRanker(g);\r\n      break;\r\n    case 'tight-tree':\r\n      tightTreeRanker(g);\r\n      break;\r\n    case 'longest-path':\r\n      longestPathRanker(g);\r\n      break;\r\n    default:\r\n      networkSimplexRanker(g);\r\n  }\r\n}\r\n\r\n// A fast and simple ranker, but results are far from optimal.\r\nvar longestPathRanker = longestPath;\r\n\r\nfunction tightTreeRanker(g) {\r\n  longestPath(g);\r\n  feasibleTree(g);\r\n}\r\n\r\nfunction networkSimplexRanker(g) {\r\n  networkSimplex(g);\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport * as util from './util.js';\r\n\r\nexport { run, cleanup };\r\n\r\n/*\r\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\r\n * adds appropriate edges to ensure that all cluster nodes are placed between\r\n * these boundries, and ensures that the graph is connected.\r\n *\r\n * In addition we ensure, through the use of the minlen property, that nodes\r\n * and subgraph border nodes to not end up on the same rank.\r\n *\r\n * Preconditions:\r\n *\r\n *    1. Input graph is a DAG\r\n *    2. Nodes in the input graph has a minlen attribute\r\n *\r\n * Postconditions:\r\n *\r\n *    1. Input graph is connected.\r\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\r\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\r\n *       get placed on the same rank as subgraph border nodes.\r\n *\r\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\r\n * Graphs.\"\r\n */\r\nfunction run(g) {\r\n  var root = util.addDummyNode(g, 'root', {}, '_root');\r\n  var depths = treeDepths(g);\r\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\r\n  var nodeSep = 2 * height + 1;\r\n\r\n  g.graph().nestingRoot = root;\r\n\r\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\r\n  _.forEach(g.edges(), function (e) {\r\n    g.edge(e).minlen *= nodeSep;\r\n  });\r\n\r\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\r\n  var weight = sumWeights(g) + 1;\r\n\r\n  // Create border nodes and link them up\r\n  _.forEach(g.children(), function (child) {\r\n    dfs(g, root, nodeSep, weight, height, depths, child);\r\n  });\r\n\r\n  // Save the multiplier for node layers for later removal of empty border\r\n  // layers.\r\n  g.graph().nodeRankFactor = nodeSep;\r\n}\r\n\r\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\r\n  var children = g.children(v);\r\n  if (!children.length) {\r\n    if (v !== root) {\r\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\r\n    }\r\n    return;\r\n  }\r\n\r\n  var top = util.addBorderNode(g, '_bt');\r\n  var bottom = util.addBorderNode(g, '_bb');\r\n  var label = g.node(v);\r\n\r\n  g.setParent(top, v);\r\n  label.borderTop = top;\r\n  g.setParent(bottom, v);\r\n  label.borderBottom = bottom;\r\n\r\n  _.forEach(children, function (child) {\r\n    dfs(g, root, nodeSep, weight, height, depths, child);\r\n\r\n    var childNode = g.node(child);\r\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\r\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\r\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\r\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\r\n\r\n    g.setEdge(top, childTop, {\r\n      weight: thisWeight,\r\n      minlen: minlen,\r\n      nestingEdge: true,\r\n    });\r\n\r\n    g.setEdge(childBottom, bottom, {\r\n      weight: thisWeight,\r\n      minlen: minlen,\r\n      nestingEdge: true,\r\n    });\r\n  });\r\n\r\n  if (!g.parent(v)) {\r\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\r\n  }\r\n}\r\n\r\nfunction treeDepths(g) {\r\n  var depths = {};\r\n  function dfs(v, depth) {\r\n    var children = g.children(v);\r\n    if (children && children.length) {\r\n      _.forEach(children, function (child) {\r\n        dfs(child, depth + 1);\r\n      });\r\n    }\r\n    depths[v] = depth;\r\n  }\r\n  _.forEach(g.children(), function (v) {\r\n    dfs(v, 1);\r\n  });\r\n  return depths;\r\n}\r\n\r\nfunction sumWeights(g) {\r\n  return _.reduce(\r\n    g.edges(),\r\n    function (acc, e) {\r\n      return acc + g.edge(e).weight;\r\n    },\r\n    0\r\n  );\r\n}\r\n\r\nfunction cleanup(g) {\r\n  var graphLabel = g.graph();\r\n  g.removeNode(graphLabel.nestingRoot);\r\n  delete graphLabel.nestingRoot;\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    if (edge.nestingEdge) {\r\n      g.removeEdge(e);\r\n    }\r\n  });\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { addSubgraphConstraints };\r\n\r\nfunction addSubgraphConstraints(g, cg, vs) {\r\n  var prev = {},\r\n    rootPrev;\r\n\r\n  _.forEach(vs, function (v) {\r\n    var child = g.parent(v),\r\n      parent,\r\n      prevChild;\r\n    while (child) {\r\n      parent = g.parent(child);\r\n      if (parent) {\r\n        prevChild = prev[parent];\r\n        prev[parent] = child;\r\n      } else {\r\n        prevChild = rootPrev;\r\n        rootPrev = child;\r\n      }\r\n      if (prevChild && prevChild !== child) {\r\n        cg.setEdge(prevChild, child);\r\n        return;\r\n      }\r\n      child = parent;\r\n    }\r\n  });\r\n\r\n  /*\r\n  function dfs(v) {\r\n    var children = v ? g.children(v) : g.children();\r\n    if (children.length) {\r\n      var min = Number.POSITIVE_INFINITY,\r\n          subgraphs = [];\r\n      _.each(children, function(child) {\r\n        var childMin = dfs(child);\r\n        if (g.children(child).length) {\r\n          subgraphs.push({ v: child, order: childMin });\r\n        }\r\n        min = Math.min(min, childMin);\r\n      });\r\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\r\n        cg.setEdge(prev.v, curr.v);\r\n        return curr;\r\n      });\r\n      return min;\r\n    }\r\n    return g.node(v).order;\r\n  }\r\n  dfs(undefined);\r\n  */\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { Graph } from '../../graphlib/index.js';\r\n\r\nexport { buildLayerGraph };\r\n\r\n/*\r\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\r\n * contain all base and subgraph nodes from the request layer in their original\r\n * hierarchy and any edges that are incident on these nodes and are of the type\r\n * requested by the \"relationship\" parameter.\r\n *\r\n * Nodes from the requested rank that do not have parents are assigned a root\r\n * node in the output graph, which is set in the root graph attribute. This\r\n * makes it easy to walk the hierarchy of movable nodes during ordering.\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Input graph is a DAG\r\n *    2. Base nodes in the input graph have a rank attribute\r\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\r\n *    4. Edges have an assigned weight\r\n *\r\n * Post-conditions:\r\n *\r\n *    1. Output graph has all nodes in the movable rank with preserved\r\n *       hierarchy.\r\n *    2. Root nodes in the movable layer are made children of the node\r\n *       indicated by the root attribute of the graph.\r\n *    3. Non-movable nodes incident on movable nodes, selected by the\r\n *       relationship parameter, are included in the graph (without hierarchy).\r\n *    4. Edges incident on movable nodes, selected by the relationship\r\n *       parameter, are added to the output graph.\r\n *    5. The weights for copied edges are aggregated as need, since the output\r\n *       graph is not a multi-graph.\r\n */\r\nfunction buildLayerGraph(g, rank, relationship) {\r\n  var root = createRootNode(g),\r\n    result = new Graph({ compound: true })\r\n      .setGraph({ root: root })\r\n      .setDefaultNodeLabel(function (v) {\r\n        return g.node(v);\r\n      });\r\n\r\n  _.forEach(g.nodes(), function (v) {\r\n    var node = g.node(v),\r\n      parent = g.parent(v);\r\n\r\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\r\n      result.setNode(v);\r\n      result.setParent(v, parent || root);\r\n\r\n      // This assumes we have only short edges!\r\n      _.forEach(g[relationship](v), function (e) {\r\n        var u = e.v === v ? e.w : e.v,\r\n          edge = result.edge(u, v),\r\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\r\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\r\n      });\r\n\r\n      if (_.has(node, 'minRank')) {\r\n        result.setNode(v, {\r\n          borderLeft: node.borderLeft[rank],\r\n          borderRight: node.borderRight[rank],\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction createRootNode(g) {\r\n  var v;\r\n  while (g.hasNode((v = _.uniqueId('_root'))));\r\n  return v;\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { crossCount };\r\n\r\n/*\r\n * A function that takes a layering (an array of layers, each with an array of\r\n * ordererd nodes) and a graph and returns a weighted crossing count.\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Input graph must be simple (not a multigraph), directed, and include\r\n *       only simple edges.\r\n *    2. Edges in the input graph must have assigned weights.\r\n *\r\n * Post-conditions:\r\n *\r\n *    1. The graph and layering matrix are left unchanged.\r\n *\r\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\r\n */\r\nfunction crossCount(g, layering) {\r\n  var cc = 0;\r\n  for (var i = 1; i < layering.length; ++i) {\r\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\r\n  }\r\n  return cc;\r\n}\r\n\r\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\r\n  // Sort all of the edges between the north and south layers by their position\r\n  // in the north layer and then the south. Map these edges to the position of\r\n  // their head in the south layer.\r\n  var southPos = _.zipObject(\r\n    southLayer,\r\n    _.map(southLayer, function (v, i) {\r\n      return i;\r\n    })\r\n  );\r\n  var southEntries = _.flatten(\r\n    _.map(northLayer, function (v) {\r\n      return _.sortBy(\r\n        _.map(g.outEdges(v), function (e) {\r\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\r\n        }),\r\n        'pos'\r\n      );\r\n    })\r\n  );\r\n\r\n  // Build the accumulator tree\r\n  var firstIndex = 1;\r\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\r\n  var treeSize = 2 * firstIndex - 1;\r\n  firstIndex -= 1;\r\n  var tree = _.map(new Array(treeSize), function () {\r\n    return 0;\r\n  });\r\n\r\n  // Calculate the weighted crossings\r\n  var cc = 0;\r\n  _.forEach(\r\n    // @ts-expect-error\r\n    southEntries.forEach(function (entry) {\r\n      var index = entry.pos + firstIndex;\r\n      tree[index] += entry.weight;\r\n      var weightSum = 0;\r\n      // @ts-expect-error\r\n      while (index > 0) {\r\n        // @ts-expect-error\r\n        if (index % 2) {\r\n          weightSum += tree[index + 1];\r\n        }\r\n        // @ts-expect-error\r\n        index = (index - 1) >> 1;\r\n        tree[index] += entry.weight;\r\n      }\r\n      cc += entry.weight * weightSum;\r\n    })\r\n  );\r\n\r\n  return cc;\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { initOrder };\r\n\r\n/*\r\n * Assigns an initial order value for each node by performing a DFS search\r\n * starting from nodes in the first rank. Nodes are assigned an order in their\r\n * rank as they are first visited.\r\n *\r\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\r\n * Graphs.\"\r\n *\r\n * Returns a layering matrix with an array per layer and each layer sorted by\r\n * the order of its nodes.\r\n */\r\nfunction initOrder(g) {\r\n  var visited = {};\r\n  var simpleNodes = _.filter(g.nodes(), function (v) {\r\n    return !g.children(v).length;\r\n  });\r\n  var maxRank = _.max(\r\n    _.map(simpleNodes, function (v) {\r\n      return g.node(v).rank;\r\n    })\r\n  );\r\n  var layers = _.map(_.range(maxRank + 1), function () {\r\n    return [];\r\n  });\r\n\r\n  function dfs(v) {\r\n    if (_.has(visited, v)) return;\r\n    visited[v] = true;\r\n    var node = g.node(v);\r\n    layers[node.rank].push(v);\r\n    _.forEach(g.successors(v), dfs);\r\n  }\r\n\r\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\r\n    return g.node(v).rank;\r\n  });\r\n  _.forEach(orderedVs, dfs);\r\n\r\n  return layers;\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { barycenter };\r\n\r\nfunction barycenter(g, movable) {\r\n  return _.map(movable, function (v) {\r\n    var inV = g.inEdges(v);\r\n    if (!inV.length) {\r\n      return { v: v };\r\n    } else {\r\n      var result = _.reduce(\r\n        inV,\r\n        function (acc, e) {\r\n          var edge = g.edge(e),\r\n            nodeU = g.node(e.v);\r\n          return {\r\n            sum: acc.sum + edge.weight * nodeU.order,\r\n            weight: acc.weight + edge.weight,\r\n          };\r\n        },\r\n        { sum: 0, weight: 0 }\r\n      );\r\n\r\n      return {\r\n        v: v,\r\n        barycenter: result.sum / result.weight,\r\n        weight: result.weight,\r\n      };\r\n    }\r\n  });\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { resolveConflicts };\r\n\r\n/*\r\n * Given a list of entries of the form {v, barycenter, weight} and a\r\n * constraint graph this function will resolve any conflicts between the\r\n * constraint graph and the barycenters for the entries. If the barycenters for\r\n * an entry would violate a constraint in the constraint graph then we coalesce\r\n * the nodes in the conflict into a new node that respects the contraint and\r\n * aggregates barycenter and weight information.\r\n *\r\n * This implementation is based on the description in Forster, \"A Fast and\r\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\r\n * differs in some specific details.\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\r\n *       no barycenter, then {v}.\r\n *\r\n * Returns:\r\n *\r\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\r\n *    `vs` may either be a singleton or it may be an aggregation of nodes\r\n *    ordered such that they do not violate constraints from the constraint\r\n *    graph. The property `i` is the lowest original index of any of the\r\n *    elements in `vs`.\r\n */\r\nfunction resolveConflicts(entries, cg) {\r\n  var mappedEntries = {};\r\n  _.forEach(entries, function (entry, i) {\r\n    var tmp = (mappedEntries[entry.v] = {\r\n      indegree: 0,\r\n      in: [],\r\n      out: [],\r\n      vs: [entry.v],\r\n      i: i,\r\n    });\r\n    if (!_.isUndefined(entry.barycenter)) {\r\n      // @ts-expect-error\r\n      tmp.barycenter = entry.barycenter;\r\n      // @ts-expect-error\r\n      tmp.weight = entry.weight;\r\n    }\r\n  });\r\n\r\n  _.forEach(cg.edges(), function (e) {\r\n    var entryV = mappedEntries[e.v];\r\n    var entryW = mappedEntries[e.w];\r\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\r\n      entryW.indegree++;\r\n      entryV.out.push(mappedEntries[e.w]);\r\n    }\r\n  });\r\n\r\n  var sourceSet = _.filter(mappedEntries, function (entry) {\r\n    // @ts-expect-error\r\n    return !entry.indegree;\r\n  });\r\n\r\n  return doResolveConflicts(sourceSet);\r\n}\r\n\r\nfunction doResolveConflicts(sourceSet) {\r\n  var entries = [];\r\n\r\n  function handleIn(vEntry) {\r\n    return function (uEntry) {\r\n      if (uEntry.merged) {\r\n        return;\r\n      }\r\n      if (\r\n        _.isUndefined(uEntry.barycenter) ||\r\n        _.isUndefined(vEntry.barycenter) ||\r\n        uEntry.barycenter >= vEntry.barycenter\r\n      ) {\r\n        mergeEntries(vEntry, uEntry);\r\n      }\r\n    };\r\n  }\r\n\r\n  function handleOut(vEntry) {\r\n    return function (wEntry) {\r\n      wEntry['in'].push(vEntry);\r\n      if (--wEntry.indegree === 0) {\r\n        sourceSet.push(wEntry);\r\n      }\r\n    };\r\n  }\r\n\r\n  while (sourceSet.length) {\r\n    var entry = sourceSet.pop();\r\n    entries.push(entry);\r\n    _.forEach(entry['in'].reverse(), handleIn(entry));\r\n    _.forEach(entry.out, handleOut(entry));\r\n  }\r\n\r\n  return _.map(\r\n    _.filter(entries, function (entry) {\r\n      return !entry.merged;\r\n    }),\r\n    function (entry) {\r\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\r\n    }\r\n  );\r\n}\r\n\r\nfunction mergeEntries(target, source) {\r\n  var sum = 0;\r\n  var weight = 0;\r\n\r\n  if (target.weight) {\r\n    sum += target.barycenter * target.weight;\r\n    weight += target.weight;\r\n  }\r\n\r\n  if (source.weight) {\r\n    sum += source.barycenter * source.weight;\r\n    weight += source.weight;\r\n  }\r\n\r\n  target.vs = source.vs.concat(target.vs);\r\n  target.barycenter = sum / weight;\r\n  target.weight = weight;\r\n  target.i = Math.min(source.i, target.i);\r\n  source.merged = true;\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport * as util from '../util.js';\r\n\r\nexport { sort };\r\n\r\nfunction sort(entries, biasRight) {\r\n  var parts = util.partition(entries, function (entry) {\r\n    return _.has(entry, 'barycenter');\r\n  });\r\n  var sortable = parts.lhs,\r\n    unsortable = _.sortBy(parts.rhs, function (entry) {\r\n      return -entry.i;\r\n    }),\r\n    vs = [],\r\n    sum = 0,\r\n    weight = 0,\r\n    vsIndex = 0;\r\n\r\n  sortable.sort(compareWithBias(!!biasRight));\r\n\r\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\r\n\r\n  _.forEach(sortable, function (entry) {\r\n    vsIndex += entry.vs.length;\r\n    vs.push(entry.vs);\r\n    sum += entry.barycenter * entry.weight;\r\n    weight += entry.weight;\r\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\r\n  });\r\n\r\n  var result = { vs: _.flatten(vs) };\r\n  if (weight) {\r\n    result.barycenter = sum / weight;\r\n    result.weight = weight;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction consumeUnsortable(vs, unsortable, index) {\r\n  var last;\r\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\r\n    unsortable.pop();\r\n    vs.push(last.vs);\r\n    index++;\r\n  }\r\n  return index;\r\n}\r\n\r\nfunction compareWithBias(bias) {\r\n  return function (entryV, entryW) {\r\n    if (entryV.barycenter < entryW.barycenter) {\r\n      return -1;\r\n    } else if (entryV.barycenter > entryW.barycenter) {\r\n      return 1;\r\n    }\r\n\r\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\r\n  };\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { barycenter } from './barycenter.js';\r\nimport { resolveConflicts } from './resolve-conflicts.js';\r\nimport { sort } from './sort.js';\r\n\r\nexport { sortSubgraph };\r\n\r\nfunction sortSubgraph(g, v, cg, biasRight) {\r\n  var movable = g.children(v);\r\n  var node = g.node(v);\r\n  var bl = node ? node.borderLeft : undefined;\r\n  var br = node ? node.borderRight : undefined;\r\n  var subgraphs = {};\r\n\r\n  if (bl) {\r\n    movable = _.filter(movable, function (w) {\r\n      return w !== bl && w !== br;\r\n    });\r\n  }\r\n\r\n  var barycenters = barycenter(g, movable);\r\n  _.forEach(barycenters, function (entry) {\r\n    if (g.children(entry.v).length) {\r\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\r\n      subgraphs[entry.v] = subgraphResult;\r\n      if (_.has(subgraphResult, 'barycenter')) {\r\n        mergeBarycenters(entry, subgraphResult);\r\n      }\r\n    }\r\n  });\r\n\r\n  var entries = resolveConflicts(barycenters, cg);\r\n  expandSubgraphs(entries, subgraphs);\r\n\r\n  var result = sort(entries, biasRight);\r\n\r\n  if (bl) {\r\n    result.vs = _.flatten([bl, result.vs, br]);\r\n    if (g.predecessors(bl).length) {\r\n      var blPred = g.node(g.predecessors(bl)[0]),\r\n        brPred = g.node(g.predecessors(br)[0]);\r\n      if (!_.has(result, 'barycenter')) {\r\n        result.barycenter = 0;\r\n        result.weight = 0;\r\n      }\r\n      result.barycenter =\r\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\r\n      result.weight += 2;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction expandSubgraphs(entries, subgraphs) {\r\n  _.forEach(entries, function (entry) {\r\n    entry.vs = _.flatten(\r\n      entry.vs.map(function (v) {\r\n        if (subgraphs[v]) {\r\n          return subgraphs[v].vs;\r\n        }\r\n        return v;\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nfunction mergeBarycenters(target, other) {\r\n  if (!_.isUndefined(target.barycenter)) {\r\n    target.barycenter =\r\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\r\n      (target.weight + other.weight);\r\n    target.weight += other.weight;\r\n  } else {\r\n    target.barycenter = other.barycenter;\r\n    target.weight = other.weight;\r\n  }\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { Graph } from '../../graphlib/index.js';\r\nimport * as util from '../util.js';\r\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\r\nimport { buildLayerGraph } from './build-layer-graph.js';\r\nimport { crossCount } from './cross-count.js';\r\nimport { initOrder } from './init-order.js';\r\nimport { sortSubgraph } from './sort-subgraph.js';\r\n\r\nexport { order };\r\n\r\n/*\r\n * Applies heuristics to minimize edge crossings in the graph and sets the best\r\n * order solution as an order attribute on each node.\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Graph must be DAG\r\n *    2. Graph nodes must be objects with a \"rank\" attribute\r\n *    3. Graph edges must have the \"weight\" attribute\r\n *\r\n * Post-conditions:\r\n *\r\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\r\n *       algorithm.\r\n */\r\nfunction order(g) {\r\n  var maxRank = util.maxRank(g),\r\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\r\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\r\n\r\n  var layering = initOrder(g);\r\n  assignOrder(g, layering);\r\n\r\n  var bestCC = Number.POSITIVE_INFINITY,\r\n    best;\r\n\r\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\r\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\r\n\r\n    layering = util.buildLayerMatrix(g);\r\n    var cc = crossCount(g, layering);\r\n    if (cc < bestCC) {\r\n      lastBest = 0;\r\n      best = _.cloneDeep(layering);\r\n      bestCC = cc;\r\n    }\r\n  }\r\n\r\n  assignOrder(g, best);\r\n}\r\n\r\nfunction buildLayerGraphs(g, ranks, relationship) {\r\n  return _.map(ranks, function (rank) {\r\n    return buildLayerGraph(g, rank, relationship);\r\n  });\r\n}\r\n\r\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\r\n  var cg = new Graph();\r\n  _.forEach(layerGraphs, function (lg) {\r\n    var root = lg.graph().root;\r\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\r\n    _.forEach(sorted.vs, function (v, i) {\r\n      lg.node(v).order = i;\r\n    });\r\n    addSubgraphConstraints(lg, cg, sorted.vs);\r\n  });\r\n}\r\n\r\nfunction assignOrder(g, layering) {\r\n  _.forEach(layering, function (layer) {\r\n    _.forEach(layer, function (v, i) {\r\n      g.node(v).order = i;\r\n    });\r\n  });\r\n}\r\n", "import * as _ from 'lodash-es';\r\n\r\nexport { parentDummyChains };\r\n\r\nfunction parentDummyChains(g) {\r\n  var postorderNums = postorder(g);\r\n\r\n  _.forEach(g.graph().dummyChains, function (v) {\r\n    var node = g.node(v);\r\n    var edgeObj = node.edgeObj;\r\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\r\n    var path = pathData.path;\r\n    var lca = pathData.lca;\r\n    var pathIdx = 0;\r\n    var pathV = path[pathIdx];\r\n    var ascending = true;\r\n\r\n    while (v !== edgeObj.w) {\r\n      node = g.node(v);\r\n\r\n      if (ascending) {\r\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\r\n          pathIdx++;\r\n        }\r\n\r\n        if (pathV === lca) {\r\n          ascending = false;\r\n        }\r\n      }\r\n\r\n      if (!ascending) {\r\n        while (\r\n          pathIdx < path.length - 1 &&\r\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\r\n        ) {\r\n          pathIdx++;\r\n        }\r\n        pathV = path[pathIdx];\r\n      }\r\n\r\n      g.setParent(v, pathV);\r\n      v = g.successors(v)[0];\r\n    }\r\n  });\r\n}\r\n\r\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\r\n// full path and the LCA.\r\nfunction findPath(g, postorderNums, v, w) {\r\n  var vPath = [];\r\n  var wPath = [];\r\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\r\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\r\n  var parent;\r\n  var lca;\r\n\r\n  // Traverse up from v to find the LCA\r\n  parent = v;\r\n  do {\r\n    parent = g.parent(parent);\r\n    vPath.push(parent);\r\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\r\n  lca = parent;\r\n\r\n  // Traverse from w to LCA\r\n  parent = w;\r\n  while ((parent = g.parent(parent)) !== lca) {\r\n    wPath.push(parent);\r\n  }\r\n\r\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\r\n}\r\n\r\nfunction postorder(g) {\r\n  var result = {};\r\n  var lim = 0;\r\n\r\n  function dfs(v) {\r\n    var low = lim;\r\n    _.forEach(g.children(v), dfs);\r\n    result[v] = { low: low, lim: lim++ };\r\n  }\r\n  _.forEach(g.children(), dfs);\r\n\r\n  return result;\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { Graph } from '../../graphlib/index.js';\r\nimport * as util from '../util.js';\r\n\r\n/*\r\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\r\n * and Simple Horizontal Coordinate Assignment.\"\r\n */\r\n\r\nexport {\r\n  positionX,\r\n  findType1Conflicts,\r\n  findType2Conflicts,\r\n  addConflict,\r\n  hasConflict,\r\n  verticalAlignment,\r\n  horizontalCompaction,\r\n  alignCoordinates,\r\n  findSmallestWidthAlignment,\r\n  balance,\r\n};\r\n\r\n/*\r\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\r\n * property. A type-1 conflict is one where a non-inner segment crosses an\r\n * inner segment. An inner segment is an edge with both incident nodes marked\r\n * with the \"dummy\" property.\r\n *\r\n * This algorithm scans layer by layer, starting with the second, for type-1\r\n * conflicts between the current layer and the previous layer. For each layer\r\n * it scans the nodes from left to right until it reaches one that is incident\r\n * on an inner segment. It then scans predecessors to determine if they have\r\n * edges that cross that inner segment. At the end a final scan is done for all\r\n * nodes on the current rank to see if they cross the last visited inner\r\n * segment.\r\n *\r\n * This algorithm (safely) assumes that a dummy node will only be incident on a\r\n * single node in the layers being scanned.\r\n */\r\nfunction findType1Conflicts(g, layering) {\r\n  var conflicts = {};\r\n\r\n  function visitLayer(prevLayer, layer) {\r\n    var // last visited node in the previous layer that is incident on an inner\r\n      // segment.\r\n      k0 = 0,\r\n      // Tracks the last node in this layer scanned for crossings with a type-1\r\n      // segment.\r\n      scanPos = 0,\r\n      prevLayerLength = prevLayer.length,\r\n      lastNode = _.last(layer);\r\n\r\n    _.forEach(layer, function (v, i) {\r\n      var w = findOtherInnerSegmentNode(g, v),\r\n        k1 = w ? g.node(w).order : prevLayerLength;\r\n\r\n      if (w || v === lastNode) {\r\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\r\n          _.forEach(g.predecessors(scanNode), function (u) {\r\n            var uLabel = g.node(u),\r\n              uPos = uLabel.order;\r\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\r\n              addConflict(conflicts, u, scanNode);\r\n            }\r\n          });\r\n        });\r\n        // @ts-expect-error\r\n        scanPos = i + 1;\r\n        k0 = k1;\r\n      }\r\n    });\r\n\r\n    return layer;\r\n  }\r\n\r\n  _.reduce(layering, visitLayer);\r\n  return conflicts;\r\n}\r\n\r\nfunction findType2Conflicts(g, layering) {\r\n  var conflicts = {};\r\n\r\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\r\n    var v;\r\n    _.forEach(_.range(southPos, southEnd), function (i) {\r\n      v = south[i];\r\n      if (g.node(v).dummy) {\r\n        _.forEach(g.predecessors(v), function (u) {\r\n          var uNode = g.node(u);\r\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\r\n            addConflict(conflicts, u, v);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  function visitLayer(north, south) {\r\n    var prevNorthPos = -1,\r\n      nextNorthPos,\r\n      southPos = 0;\r\n\r\n    _.forEach(south, function (v, southLookahead) {\r\n      if (g.node(v).dummy === 'border') {\r\n        var predecessors = g.predecessors(v);\r\n        if (predecessors.length) {\r\n          nextNorthPos = g.node(predecessors[0]).order;\r\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\r\n          // @ts-expect-error\r\n          southPos = southLookahead;\r\n          prevNorthPos = nextNorthPos;\r\n        }\r\n      }\r\n      scan(south, southPos, south.length, nextNorthPos, north.length);\r\n    });\r\n\r\n    return south;\r\n  }\r\n\r\n  _.reduce(layering, visitLayer);\r\n  return conflicts;\r\n}\r\n\r\nfunction findOtherInnerSegmentNode(g, v) {\r\n  if (g.node(v).dummy) {\r\n    return _.find(g.predecessors(v), function (u) {\r\n      return g.node(u).dummy;\r\n    });\r\n  }\r\n}\r\n\r\nfunction addConflict(conflicts, v, w) {\r\n  if (v > w) {\r\n    var tmp = v;\r\n    v = w;\r\n    w = tmp;\r\n  }\r\n\r\n  var conflictsV = conflicts[v];\r\n  if (!conflictsV) {\r\n    conflicts[v] = conflictsV = {};\r\n  }\r\n  conflictsV[w] = true;\r\n}\r\n\r\nfunction hasConflict(conflicts, v, w) {\r\n  if (v > w) {\r\n    var tmp = v;\r\n    v = w;\r\n    w = tmp;\r\n  }\r\n  return _.has(conflicts[v], w);\r\n}\r\n\r\n/*\r\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\r\n * attempts to align a node with one of its median neighbors. If the edge\r\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\r\n * If a previous node has already formed a block with a node after the node\r\n * we're trying to form a block with, we also ignore that possibility - our\r\n * blocks would be split in that scenario.\r\n */\r\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\r\n  var root = {},\r\n    align = {},\r\n    pos = {};\r\n\r\n  // We cache the position here based on the layering because the graph and\r\n  // layering may be out of sync. The layering matrix is manipulated to\r\n  // generate different extreme alignments.\r\n  _.forEach(layering, function (layer) {\r\n    _.forEach(layer, function (v, order) {\r\n      root[v] = v;\r\n      align[v] = v;\r\n      pos[v] = order;\r\n    });\r\n  });\r\n\r\n  _.forEach(layering, function (layer) {\r\n    var prevIdx = -1;\r\n    _.forEach(layer, function (v) {\r\n      var ws = neighborFn(v);\r\n      if (ws.length) {\r\n        ws = _.sortBy(ws, function (w) {\r\n          return pos[w];\r\n        });\r\n        var mp = (ws.length - 1) / 2;\r\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\r\n          var w = ws[i];\r\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\r\n            align[w] = v;\r\n            align[v] = root[v] = root[w];\r\n            prevIdx = pos[w];\r\n          }\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return { root: root, align: align };\r\n}\r\n\r\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\r\n  // This portion of the algorithm differs from BK due to a number of problems.\r\n  // Instead of their algorithm we construct a new block graph and do two\r\n  // sweeps. The first sweep places blocks with the smallest possible\r\n  // coordinates. The second sweep removes unused space by moving blocks to the\r\n  // greatest coordinates without violating separation.\r\n  var xs = {},\r\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\r\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\r\n\r\n  function iterate(setXsFunc, nextNodesFunc) {\r\n    var stack = blockG.nodes();\r\n    var elem = stack.pop();\r\n    var visited = {};\r\n    while (elem) {\r\n      if (visited[elem]) {\r\n        setXsFunc(elem);\r\n      } else {\r\n        visited[elem] = true;\r\n        stack.push(elem);\r\n        stack = stack.concat(nextNodesFunc(elem));\r\n      }\r\n\r\n      elem = stack.pop();\r\n    }\r\n  }\r\n\r\n  // First pass, assign smallest coordinates\r\n  function pass1(elem) {\r\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\r\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\r\n    }, 0);\r\n  }\r\n\r\n  // Second pass, assign greatest coordinates\r\n  function pass2(elem) {\r\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\r\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\r\n    }, Number.POSITIVE_INFINITY);\r\n\r\n    var node = g.node(elem);\r\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\r\n      xs[elem] = Math.max(xs[elem], min);\r\n    }\r\n  }\r\n\r\n  iterate(pass1, blockG.predecessors.bind(blockG));\r\n  iterate(pass2, blockG.successors.bind(blockG));\r\n\r\n  // Assign x coordinates to all nodes\r\n  _.forEach(align, function (v) {\r\n    xs[v] = xs[root[v]];\r\n  });\r\n\r\n  return xs;\r\n}\r\n\r\nfunction buildBlockGraph(g, layering, root, reverseSep) {\r\n  var blockGraph = new Graph(),\r\n    graphLabel = g.graph(),\r\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\r\n\r\n  _.forEach(layering, function (layer) {\r\n    var u;\r\n    _.forEach(layer, function (v) {\r\n      var vRoot = root[v];\r\n      blockGraph.setNode(vRoot);\r\n      if (u) {\r\n        var uRoot = root[u],\r\n          prevMax = blockGraph.edge(uRoot, vRoot);\r\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\r\n      }\r\n      u = v;\r\n    });\r\n  });\r\n\r\n  return blockGraph;\r\n}\r\n\r\n/*\r\n * Returns the alignment that has the smallest width of the given alignments.\r\n */\r\nfunction findSmallestWidthAlignment(g, xss) {\r\n  return _.minBy(_.values(xss), function (xs) {\r\n    var max = Number.NEGATIVE_INFINITY;\r\n    var min = Number.POSITIVE_INFINITY;\r\n\r\n    _.forIn(xs, function (x, v) {\r\n      var halfWidth = width(g, v) / 2;\r\n\r\n      max = Math.max(x + halfWidth, max);\r\n      min = Math.min(x - halfWidth, min);\r\n    });\r\n\r\n    return max - min;\r\n  });\r\n}\r\n\r\n/*\r\n * Align the coordinates of each of the layout alignments such that\r\n * left-biased alignments have their minimum coordinate at the same point as\r\n * the minimum coordinate of the smallest width alignment and right-biased\r\n * alignments have their maximum coordinate at the same point as the maximum\r\n * coordinate of the smallest width alignment.\r\n */\r\nfunction alignCoordinates(xss, alignTo) {\r\n  var alignToVals = _.values(alignTo),\r\n    alignToMin = _.min(alignToVals),\r\n    alignToMax = _.max(alignToVals);\r\n\r\n  _.forEach(['u', 'd'], function (vert) {\r\n    _.forEach(['l', 'r'], function (horiz) {\r\n      var alignment = vert + horiz,\r\n        xs = xss[alignment],\r\n        delta;\r\n      if (xs === alignTo) return;\r\n\r\n      var xsVals = _.values(xs);\r\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\r\n\r\n      if (delta) {\r\n        xss[alignment] = _.mapValues(xs, function (x) {\r\n          return x + delta;\r\n        });\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction balance(xss, align) {\r\n  return _.mapValues(xss.ul, function (ignore, v) {\r\n    if (align) {\r\n      return xss[align.toLowerCase()][v];\r\n    } else {\r\n      var xs = _.sortBy(_.map(xss, v));\r\n      return (xs[1] + xs[2]) / 2;\r\n    }\r\n  });\r\n}\r\n\r\nfunction positionX(g) {\r\n  var layering = util.buildLayerMatrix(g);\r\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\r\n\r\n  var xss = {};\r\n  var adjustedLayering;\r\n  _.forEach(['u', 'd'], function (vert) {\r\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\r\n    _.forEach(['l', 'r'], function (horiz) {\r\n      if (horiz === 'r') {\r\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\r\n          return _.values(inner).reverse();\r\n        });\r\n      }\r\n\r\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\r\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\r\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\r\n      if (horiz === 'r') {\r\n        xs = _.mapValues(xs, function (x) {\r\n          return -x;\r\n        });\r\n      }\r\n      xss[vert + horiz] = xs;\r\n    });\r\n  });\r\n\r\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\r\n  alignCoordinates(xss, smallestWidth);\r\n  return balance(xss, g.graph().align);\r\n}\r\n\r\nfunction sep(nodeSep, edgeSep, reverseSep) {\r\n  return function (g, v, w) {\r\n    var vLabel = g.node(v);\r\n    var wLabel = g.node(w);\r\n    var sum = 0;\r\n    var delta;\r\n\r\n    sum += vLabel.width / 2;\r\n    if (_.has(vLabel, 'labelpos')) {\r\n      switch (vLabel.labelpos.toLowerCase()) {\r\n        case 'l':\r\n          delta = -vLabel.width / 2;\r\n          break;\r\n        case 'r':\r\n          delta = vLabel.width / 2;\r\n          break;\r\n      }\r\n    }\r\n    if (delta) {\r\n      sum += reverseSep ? delta : -delta;\r\n    }\r\n    delta = 0;\r\n\r\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\r\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\r\n\r\n    sum += wLabel.width / 2;\r\n    if (_.has(wLabel, 'labelpos')) {\r\n      switch (wLabel.labelpos.toLowerCase()) {\r\n        case 'l':\r\n          delta = wLabel.width / 2;\r\n          break;\r\n        case 'r':\r\n          delta = -wLabel.width / 2;\r\n          break;\r\n      }\r\n    }\r\n    if (delta) {\r\n      sum += reverseSep ? delta : -delta;\r\n    }\r\n    delta = 0;\r\n\r\n    return sum;\r\n  };\r\n}\r\n\r\nfunction width(g, v) {\r\n  return g.node(v).width;\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport * as util from '../util.js';\r\nimport { positionX } from './bk.js';\r\n\r\nexport { position };\r\n\r\nfunction position(g) {\r\n  g = util.asNonCompoundGraph(g);\r\n\r\n  positionY(g);\r\n  _.forOwn(positionX(g), function (x, v) {\r\n    g.node(v).x = x;\r\n  });\r\n}\r\n\r\nfunction positionY(g) {\r\n  var layering = util.buildLayerMatrix(g);\r\n  var rankSep = g.graph().ranksep;\r\n  var prevY = 0;\r\n  _.forEach(layering, function (layer) {\r\n    var maxHeight = _.max(\r\n      _.map(layer, function (v) {\r\n        return g.node(v).height;\r\n      })\r\n    );\r\n    _.forEach(layer, function (v) {\r\n      g.node(v).y = prevY + maxHeight / 2;\r\n    });\r\n    prevY += maxHeight + rankSep;\r\n  });\r\n}\r\n", "import * as _ from 'lodash-es';\r\nimport { Graph } from '../graphlib/index.js';\r\nimport { addBorderSegments } from './add-border-segments.js';\r\nimport * as coordinateSystem from './coordinate-system.js';\r\nimport * as acyclic from './acyclic.js';\r\nimport * as normalize from './normalize.js';\r\nimport { rank } from './rank/index.js';\r\nimport * as nestingGraph from './nesting-graph.js';\r\nimport { order } from './order/index.js';\r\nimport { parentDummyChains } from './parent-dummy-chains.js';\r\nimport { position } from './position/index.js';\r\nimport * as util from './util.js';\r\n\r\nexport { layout };\r\n\r\nfunction layout(g, opts) {\r\n  var time = opts && opts.debugTiming ? util.time : util.notime;\r\n  time('layout', function () {\r\n    var layoutGraph = time('  buildLayoutGraph', function () {\r\n      return buildLayoutGraph(g);\r\n    });\r\n    time('  runLayout', function () {\r\n      runLayout(layoutGraph, time);\r\n    });\r\n    time('  updateInputGraph', function () {\r\n      updateInputGraph(g, layoutGraph);\r\n    });\r\n  });\r\n}\r\n\r\nfunction runLayout(g, time) {\r\n  time('    makeSpaceForEdgeLabels', function () {\r\n    makeSpaceForEdgeLabels(g);\r\n  });\r\n  time('    removeSelfEdges', function () {\r\n    removeSelfEdges(g);\r\n  });\r\n  time('    acyclic', function () {\r\n    acyclic.run(g);\r\n  });\r\n  time('    nestingGraph.run', function () {\r\n    nestingGraph.run(g);\r\n  });\r\n  time('    rank', function () {\r\n    rank(util.asNonCompoundGraph(g));\r\n  });\r\n  time('    injectEdgeLabelProxies', function () {\r\n    injectEdgeLabelProxies(g);\r\n  });\r\n  time('    removeEmptyRanks', function () {\r\n    util.removeEmptyRanks(g);\r\n  });\r\n  time('    nestingGraph.cleanup', function () {\r\n    nestingGraph.cleanup(g);\r\n  });\r\n  time('    normalizeRanks', function () {\r\n    util.normalizeRanks(g);\r\n  });\r\n  time('    assignRankMinMax', function () {\r\n    assignRankMinMax(g);\r\n  });\r\n  time('    removeEdgeLabelProxies', function () {\r\n    removeEdgeLabelProxies(g);\r\n  });\r\n  time('    normalize.run', function () {\r\n    normalize.run(g);\r\n  });\r\n  time('    parentDummyChains', function () {\r\n    parentDummyChains(g);\r\n  });\r\n  time('    addBorderSegments', function () {\r\n    addBorderSegments(g);\r\n  });\r\n  time('    order', function () {\r\n    order(g);\r\n  });\r\n  time('    insertSelfEdges', function () {\r\n    insertSelfEdges(g);\r\n  });\r\n  time('    adjustCoordinateSystem', function () {\r\n    coordinateSystem.adjust(g);\r\n  });\r\n  time('    position', function () {\r\n    position(g);\r\n  });\r\n  time('    positionSelfEdges', function () {\r\n    positionSelfEdges(g);\r\n  });\r\n  time('    removeBorderNodes', function () {\r\n    removeBorderNodes(g);\r\n  });\r\n  time('    normalize.undo', function () {\r\n    normalize.undo(g);\r\n  });\r\n  time('    fixupEdgeLabelCoords', function () {\r\n    fixupEdgeLabelCoords(g);\r\n  });\r\n  time('    undoCoordinateSystem', function () {\r\n    coordinateSystem.undo(g);\r\n  });\r\n  time('    translateGraph', function () {\r\n    translateGraph(g);\r\n  });\r\n  time('    assignNodeIntersects', function () {\r\n    assignNodeIntersects(g);\r\n  });\r\n  time('    reversePoints', function () {\r\n    reversePointsForReversedEdges(g);\r\n  });\r\n  time('    acyclic.undo', function () {\r\n    acyclic.undo(g);\r\n  });\r\n}\r\n\r\n/*\r\n * Copies final layout information from the layout graph back to the input\r\n * graph. This process only copies whitelisted attributes from the layout graph\r\n * to the input graph, so it serves as a good place to determine what\r\n * attributes can influence layout.\r\n */\r\nfunction updateInputGraph(inputGraph, layoutGraph) {\r\n  _.forEach(inputGraph.nodes(), function (v) {\r\n    var inputLabel = inputGraph.node(v);\r\n    var layoutLabel = layoutGraph.node(v);\r\n\r\n    if (inputLabel) {\r\n      inputLabel.x = layoutLabel.x;\r\n      inputLabel.y = layoutLabel.y;\r\n\r\n      if (layoutGraph.children(v).length) {\r\n        inputLabel.width = layoutLabel.width;\r\n        inputLabel.height = layoutLabel.height;\r\n      }\r\n    }\r\n  });\r\n\r\n  _.forEach(inputGraph.edges(), function (e) {\r\n    var inputLabel = inputGraph.edge(e);\r\n    var layoutLabel = layoutGraph.edge(e);\r\n\r\n    inputLabel.points = layoutLabel.points;\r\n    if (_.has(layoutLabel, 'x')) {\r\n      inputLabel.x = layoutLabel.x;\r\n      inputLabel.y = layoutLabel.y;\r\n    }\r\n  });\r\n\r\n  inputGraph.graph().width = layoutGraph.graph().width;\r\n  inputGraph.graph().height = layoutGraph.graph().height;\r\n}\r\n\r\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\r\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\r\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\r\nvar nodeNumAttrs = ['width', 'height'];\r\nvar nodeDefaults = { width: 0, height: 0 };\r\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\r\nvar edgeDefaults = {\r\n  minlen: 1,\r\n  weight: 1,\r\n  width: 0,\r\n  height: 0,\r\n  labeloffset: 10,\r\n  labelpos: 'r',\r\n};\r\nvar edgeAttrs = ['labelpos'];\r\n\r\n/*\r\n * Constructs a new graph from the input graph, which can be used for layout.\r\n * This process copies only whitelisted attributes from the input graph to the\r\n * layout graph. Thus this function serves as a good place to determine what\r\n * attributes can influence layout.\r\n */\r\nfunction buildLayoutGraph(inputGraph) {\r\n  var g = new Graph({ multigraph: true, compound: true });\r\n  var graph = canonicalize(inputGraph.graph());\r\n\r\n  g.setGraph(\r\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\r\n  );\r\n\r\n  _.forEach(inputGraph.nodes(), function (v) {\r\n    var node = canonicalize(inputGraph.node(v));\r\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\r\n    g.setParent(v, inputGraph.parent(v));\r\n  });\r\n\r\n  _.forEach(inputGraph.edges(), function (e) {\r\n    var edge = canonicalize(inputGraph.edge(e));\r\n    g.setEdge(\r\n      e,\r\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\r\n    );\r\n  });\r\n\r\n  return g;\r\n}\r\n\r\n/*\r\n * This idea comes from the Gansner paper: to account for edge labels in our\r\n * layout we split each rank in half by doubling minlen and halving ranksep.\r\n * Then we can place labels at these mid-points between nodes.\r\n *\r\n * We also add some minimal padding to the width to push the label for the edge\r\n * away from the edge itself a bit.\r\n */\r\nfunction makeSpaceForEdgeLabels(g) {\r\n  var graph = g.graph();\r\n  graph.ranksep /= 2;\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    edge.minlen *= 2;\r\n    if (edge.labelpos.toLowerCase() !== 'c') {\r\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\r\n        edge.width += edge.labeloffset;\r\n      } else {\r\n        edge.height += edge.labeloffset;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/*\r\n * Creates temporary dummy nodes that capture the rank in which each edge's\r\n * label is going to, if it has one of non-zero width and height. We do this\r\n * so that we can safely remove empty ranks while preserving balance for the\r\n * label's position.\r\n */\r\nfunction injectEdgeLabelProxies(g) {\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    if (edge.width && edge.height) {\r\n      var v = g.node(e.v);\r\n      var w = g.node(e.w);\r\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\r\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\r\n    }\r\n  });\r\n}\r\n\r\nfunction assignRankMinMax(g) {\r\n  var maxRank = 0;\r\n  _.forEach(g.nodes(), function (v) {\r\n    var node = g.node(v);\r\n    if (node.borderTop) {\r\n      node.minRank = g.node(node.borderTop).rank;\r\n      node.maxRank = g.node(node.borderBottom).rank;\r\n      // @ts-expect-error\r\n      maxRank = _.max(maxRank, node.maxRank);\r\n    }\r\n  });\r\n  g.graph().maxRank = maxRank;\r\n}\r\n\r\nfunction removeEdgeLabelProxies(g) {\r\n  _.forEach(g.nodes(), function (v) {\r\n    var node = g.node(v);\r\n    if (node.dummy === 'edge-proxy') {\r\n      g.edge(node.e).labelRank = node.rank;\r\n      g.removeNode(v);\r\n    }\r\n  });\r\n}\r\n\r\nfunction translateGraph(g) {\r\n  var minX = Number.POSITIVE_INFINITY;\r\n  var maxX = 0;\r\n  var minY = Number.POSITIVE_INFINITY;\r\n  var maxY = 0;\r\n  var graphLabel = g.graph();\r\n  var marginX = graphLabel.marginx || 0;\r\n  var marginY = graphLabel.marginy || 0;\r\n\r\n  function getExtremes(attrs) {\r\n    var x = attrs.x;\r\n    var y = attrs.y;\r\n    var w = attrs.width;\r\n    var h = attrs.height;\r\n    minX = Math.min(minX, x - w / 2);\r\n    maxX = Math.max(maxX, x + w / 2);\r\n    minY = Math.min(minY, y - h / 2);\r\n    maxY = Math.max(maxY, y + h / 2);\r\n  }\r\n\r\n  _.forEach(g.nodes(), function (v) {\r\n    getExtremes(g.node(v));\r\n  });\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    if (_.has(edge, 'x')) {\r\n      getExtremes(edge);\r\n    }\r\n  });\r\n\r\n  minX -= marginX;\r\n  minY -= marginY;\r\n\r\n  _.forEach(g.nodes(), function (v) {\r\n    var node = g.node(v);\r\n    node.x -= minX;\r\n    node.y -= minY;\r\n  });\r\n\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    _.forEach(edge.points, function (p) {\r\n      p.x -= minX;\r\n      p.y -= minY;\r\n    });\r\n    if (_.has(edge, 'x')) {\r\n      edge.x -= minX;\r\n    }\r\n    if (_.has(edge, 'y')) {\r\n      edge.y -= minY;\r\n    }\r\n  });\r\n\r\n  graphLabel.width = maxX - minX + marginX;\r\n  graphLabel.height = maxY - minY + marginY;\r\n}\r\n\r\nfunction assignNodeIntersects(g) {\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    var nodeV = g.node(e.v);\r\n    var nodeW = g.node(e.w);\r\n    var p1, p2;\r\n    if (!edge.points) {\r\n      edge.points = [];\r\n      p1 = nodeW;\r\n      p2 = nodeV;\r\n    } else {\r\n      p1 = edge.points[0];\r\n      p2 = edge.points[edge.points.length - 1];\r\n    }\r\n    edge.points.unshift(util.intersectRect(nodeV, p1));\r\n    edge.points.push(util.intersectRect(nodeW, p2));\r\n  });\r\n}\r\n\r\nfunction fixupEdgeLabelCoords(g) {\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    if (_.has(edge, 'x')) {\r\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\r\n        edge.width -= edge.labeloffset;\r\n      }\r\n      switch (edge.labelpos) {\r\n        case 'l':\r\n          edge.x -= edge.width / 2 + edge.labeloffset;\r\n          break;\r\n        case 'r':\r\n          edge.x += edge.width / 2 + edge.labeloffset;\r\n          break;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction reversePointsForReversedEdges(g) {\r\n  _.forEach(g.edges(), function (e) {\r\n    var edge = g.edge(e);\r\n    if (edge.reversed) {\r\n      edge.points.reverse();\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeBorderNodes(g) {\r\n  _.forEach(g.nodes(), function (v) {\r\n    if (g.children(v).length) {\r\n      var node = g.node(v);\r\n      var t = g.node(node.borderTop);\r\n      var b = g.node(node.borderBottom);\r\n      var l = g.node(_.last(node.borderLeft));\r\n      var r = g.node(_.last(node.borderRight));\r\n\r\n      node.width = Math.abs(r.x - l.x);\r\n      node.height = Math.abs(b.y - t.y);\r\n      node.x = l.x + node.width / 2;\r\n      node.y = t.y + node.height / 2;\r\n    }\r\n  });\r\n\r\n  _.forEach(g.nodes(), function (v) {\r\n    if (g.node(v).dummy === 'border') {\r\n      g.removeNode(v);\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeSelfEdges(g) {\r\n  _.forEach(g.edges(), function (e) {\r\n    if (e.v === e.w) {\r\n      var node = g.node(e.v);\r\n      if (!node.selfEdges) {\r\n        node.selfEdges = [];\r\n      }\r\n      node.selfEdges.push({ e: e, label: g.edge(e) });\r\n      g.removeEdge(e);\r\n    }\r\n  });\r\n}\r\n\r\nfunction insertSelfEdges(g) {\r\n  var layers = util.buildLayerMatrix(g);\r\n  _.forEach(layers, function (layer) {\r\n    var orderShift = 0;\r\n    _.forEach(layer, function (v, i) {\r\n      var node = g.node(v);\r\n      node.order = i + orderShift;\r\n      _.forEach(node.selfEdges, function (selfEdge) {\r\n        util.addDummyNode(\r\n          g,\r\n          'selfedge',\r\n          {\r\n            width: selfEdge.label.width,\r\n            height: selfEdge.label.height,\r\n            rank: node.rank,\r\n            order: i + ++orderShift,\r\n            e: selfEdge.e,\r\n            label: selfEdge.label,\r\n          },\r\n          '_se'\r\n        );\r\n      });\r\n      delete node.selfEdges;\r\n    });\r\n  });\r\n}\r\n\r\nfunction positionSelfEdges(g) {\r\n  _.forEach(g.nodes(), function (v) {\r\n    var node = g.node(v);\r\n    if (node.dummy === 'selfedge') {\r\n      var selfNode = g.node(node.e.v);\r\n      var x = selfNode.x + selfNode.width / 2;\r\n      var y = selfNode.y;\r\n      var dx = node.x - x;\r\n      var dy = selfNode.height / 2;\r\n      g.setEdge(node.e, node.label);\r\n      g.removeNode(v);\r\n      node.label.points = [\r\n        { x: x + (2 * dx) / 3, y: y - dy },\r\n        { x: x + (5 * dx) / 6, y: y - dy },\r\n        { x: x + dx, y: y },\r\n        { x: x + (5 * dx) / 6, y: y + dy },\r\n        { x: x + (2 * dx) / 3, y: y + dy },\r\n      ];\r\n      node.label.x = node.x;\r\n      node.label.y = node.y;\r\n    }\r\n  });\r\n}\r\n\r\nfunction selectNumberAttrs(obj, attrs) {\r\n  return _.mapValues(_.pick(obj, attrs), Number);\r\n}\r\n\r\nfunction canonicalize(attrs) {\r\n  var newAttrs = {};\r\n  _.forEach(attrs, function (v, k) {\r\n    newAttrs[k.toLowerCase()] = v;\r\n  });\r\n  return newAttrs;\r\n}\r\n"],
  "mappings": "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",
  "names": ["rank", "order", "dfs", "rank", "maxRank", "addBorderNode", "g", "dfs", "undo", "run", "undo", "dfs", "rank", "dfs", "DEFAULT_WEIGHT_FUNC", "order", "postorder", "edge", "run", "dfs", "rank", "maxRank", "dfs", "entry", "maxRank", "rank", "postorder", "dfs", "order", "w", "time", "run", "undo", "maxRank"]
}
