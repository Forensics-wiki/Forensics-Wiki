{
  "version": 3,
  "sources": ["../../../../node_modules/dagre-d3-es/src/graphlib/json.js", "../../../../node_modules/mermaid/dist/index-1e7f2254.js"],
  "sourcesContent": ["import * as _ from 'lodash-es';\r\nimport { Graph } from './graph.js';\r\n\r\nexport { write, read };\r\n\r\nfunction write(g) {\r\n  var json = {\r\n    options: {\r\n      directed: g.isDirected(),\r\n      multigraph: g.isMultigraph(),\r\n      compound: g.isCompound(),\r\n    },\r\n    nodes: writeNodes(g),\r\n    edges: writeEdges(g),\r\n  };\r\n  if (!_.isUndefined(g.graph())) {\r\n    json.value = _.clone(g.graph());\r\n  }\r\n  return json;\r\n}\r\n\r\nfunction writeNodes(g) {\r\n  return _.map(g.nodes(), function (v) {\r\n    var nodeValue = g.node(v);\r\n    var parent = g.parent(v);\r\n    var node = { v: v };\r\n    if (!_.isUndefined(nodeValue)) {\r\n      node.value = nodeValue;\r\n    }\r\n    if (!_.isUndefined(parent)) {\r\n      node.parent = parent;\r\n    }\r\n    return node;\r\n  });\r\n}\r\n\r\nfunction writeEdges(g) {\r\n  return _.map(g.edges(), function (e) {\r\n    var edgeValue = g.edge(e);\r\n    var edge = { v: e.v, w: e.w };\r\n    if (!_.isUndefined(e.name)) {\r\n      edge.name = e.name;\r\n    }\r\n    if (!_.isUndefined(edgeValue)) {\r\n      edge.value = edgeValue;\r\n    }\r\n    return edge;\r\n  });\r\n}\r\n\r\nfunction read(json) {\r\n  var g = new Graph(json.options).setGraph(json.value);\r\n  _.each(json.nodes, function (entry) {\r\n    g.setNode(entry.v, entry.value);\r\n    if (entry.parent) {\r\n      g.setParent(entry.v, entry.parent);\r\n    }\r\n  });\r\n  _.each(json.edges, function (entry) {\r\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\r\n  });\r\n  return g;\r\n}\r\n", "import { layout } from \"dagre-d3-es/src/dagre/index.js\";\r\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\r\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-66ea8538.js\";\r\nimport { l as log, n as evaluate, c as getConfig } from \"./mermaid-aad43469.js\";\r\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\r\nimport { c as createText } from \"./createText-a49d2d2a.js\";\r\nimport { select } from \"d3\";\r\nlet clusterDb = {};\r\nlet descendants = {};\r\nlet parents = {};\r\nconst clear$1 = () => {\r\n  descendants = {};\r\n  parents = {};\r\n  clusterDb = {};\r\n};\r\nconst isDescendant = (id, ancenstorId) => {\r\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\r\n  if (descendants[ancenstorId].includes(id)) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\nconst edgeInCluster = (edge, clusterId) => {\r\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\r\n  log.info(\"Edge is \", edge);\r\n  if (edge.v === clusterId) {\r\n    return false;\r\n  }\r\n  if (edge.w === clusterId) {\r\n    return false;\r\n  }\r\n  if (!descendants[clusterId]) {\r\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\r\n    return false;\r\n  }\r\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\r\n};\r\nconst copy = (clusterId, graph, newGraph, rootId) => {\r\n  log.warn(\r\n    \"Copying children of \",\r\n    clusterId,\r\n    \"root\",\r\n    rootId,\r\n    \"data\",\r\n    graph.node(clusterId),\r\n    rootId\r\n  );\r\n  const nodes = graph.children(clusterId) || [];\r\n  if (clusterId !== rootId) {\r\n    nodes.push(clusterId);\r\n  }\r\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\r\n  nodes.forEach((node) => {\r\n    if (graph.children(node).length > 0) {\r\n      copy(node, graph, newGraph, rootId);\r\n    } else {\r\n      const data = graph.node(node);\r\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\r\n      newGraph.setNode(node, data);\r\n      if (rootId !== graph.parent(node)) {\r\n        log.warn(\"Setting parent\", node, graph.parent(node));\r\n        newGraph.setParent(node, graph.parent(node));\r\n      }\r\n      if (clusterId !== rootId && node !== clusterId) {\r\n        log.debug(\"Setting parent\", node, clusterId);\r\n        newGraph.setParent(node, clusterId);\r\n      } else {\r\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\r\n        log.debug(\r\n          \"Not Setting parent for node=\",\r\n          node,\r\n          \"cluster!==rootId\",\r\n          clusterId !== rootId,\r\n          \"node!==clusterId\",\r\n          node !== clusterId\r\n        );\r\n      }\r\n      const edges = graph.edges(node);\r\n      log.debug(\"Copying Edges\", edges);\r\n      edges.forEach((edge) => {\r\n        log.info(\"Edge\", edge);\r\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\r\n        log.info(\"Edge data\", data2, rootId);\r\n        try {\r\n          if (edgeInCluster(edge, rootId)) {\r\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\r\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\r\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\r\n          } else {\r\n            log.info(\r\n              \"Skipping copy of edge \",\r\n              edge.v,\r\n              \"-->\",\r\n              edge.w,\r\n              \" rootId: \",\r\n              rootId,\r\n              \" clusterId:\",\r\n              clusterId\r\n            );\r\n          }\r\n        } catch (e) {\r\n          log.error(e);\r\n        }\r\n      });\r\n    }\r\n    log.debug(\"Removing node\", node);\r\n    graph.removeNode(node);\r\n  });\r\n};\r\nconst extractDescendants = (id, graph) => {\r\n  const children = graph.children(id);\r\n  let res = [...children];\r\n  for (const child of children) {\r\n    parents[child] = id;\r\n    res = [...res, ...extractDescendants(child, graph)];\r\n  }\r\n  return res;\r\n};\r\nconst findNonClusterChild = (id, graph) => {\r\n  log.trace(\"Searching\", id);\r\n  const children = graph.children(id);\r\n  log.trace(\"Searching children of id \", id, children);\r\n  if (children.length < 1) {\r\n    log.trace(\"This is a valid node\", id);\r\n    return id;\r\n  }\r\n  for (const child of children) {\r\n    const _id = findNonClusterChild(child, graph);\r\n    if (_id) {\r\n      log.trace(\"Found replacement for\", id, \" => \", _id);\r\n      return _id;\r\n    }\r\n  }\r\n};\r\nconst getAnchorId = (id) => {\r\n  if (!clusterDb[id]) {\r\n    return id;\r\n  }\r\n  if (!clusterDb[id].externalConnections) {\r\n    return id;\r\n  }\r\n  if (clusterDb[id]) {\r\n    return clusterDb[id].id;\r\n  }\r\n  return id;\r\n};\r\nconst adjustClustersAndEdges = (graph, depth) => {\r\n  if (!graph || depth > 10) {\r\n    log.debug(\"Opting out, no graph \");\r\n    return;\r\n  } else {\r\n    log.debug(\"Opting in, graph \");\r\n  }\r\n  graph.nodes().forEach(function(id) {\r\n    const children = graph.children(id);\r\n    if (children.length > 0) {\r\n      log.warn(\r\n        \"Cluster identified\",\r\n        id,\r\n        \" Replacement id in edges: \",\r\n        findNonClusterChild(id, graph)\r\n      );\r\n      descendants[id] = extractDescendants(id, graph);\r\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\r\n    }\r\n  });\r\n  graph.nodes().forEach(function(id) {\r\n    const children = graph.children(id);\r\n    const edges = graph.edges();\r\n    if (children.length > 0) {\r\n      log.debug(\"Cluster identified\", id, descendants);\r\n      edges.forEach((edge) => {\r\n        if (edge.v !== id && edge.w !== id) {\r\n          const d1 = isDescendant(edge.v, id);\r\n          const d2 = isDescendant(edge.w, id);\r\n          if (d1 ^ d2) {\r\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\r\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\r\n            clusterDb[id].externalConnections = true;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      log.debug(\"Not a cluster \", id, descendants);\r\n    }\r\n  });\r\n  graph.edges().forEach(function(e) {\r\n    const edge = graph.edge(e);\r\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\r\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\r\n    let v = e.v;\r\n    let w = e.w;\r\n    log.warn(\r\n      \"Fix XXX\",\r\n      clusterDb,\r\n      \"ids:\",\r\n      e.v,\r\n      e.w,\r\n      \"Translating: \",\r\n      clusterDb[e.v],\r\n      \" --- \",\r\n      clusterDb[e.w]\r\n    );\r\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\r\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\r\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\r\n      v = getAnchorId(e.v);\r\n      w = getAnchorId(e.w);\r\n      graph.removeEdge(e.v, e.w, e.name);\r\n      const specialId = e.w + \"---\" + e.v;\r\n      graph.setNode(specialId, {\r\n        domId: specialId,\r\n        id: specialId,\r\n        labelStyle: \"\",\r\n        labelText: edge.label,\r\n        padding: 0,\r\n        shape: \"labelRect\",\r\n        style: \"\"\r\n      });\r\n      const edge1 = JSON.parse(JSON.stringify(edge));\r\n      const edge2 = JSON.parse(JSON.stringify(edge));\r\n      edge1.label = \"\";\r\n      edge1.arrowTypeEnd = \"none\";\r\n      edge2.label = \"\";\r\n      edge1.fromCluster = e.v;\r\n      edge2.toCluster = e.v;\r\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\r\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\r\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\r\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\r\n      v = getAnchorId(e.v);\r\n      w = getAnchorId(e.w);\r\n      graph.removeEdge(e.v, e.w, e.name);\r\n      if (v !== e.v) {\r\n        edge.fromCluster = e.v;\r\n      }\r\n      if (w !== e.w) {\r\n        edge.toCluster = e.w;\r\n      }\r\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\r\n      graph.setEdge(v, w, edge, e.name);\r\n    }\r\n  });\r\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\r\n  extractor(graph, 0);\r\n  log.trace(clusterDb);\r\n};\r\nconst extractor = (graph, depth) => {\r\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\r\n  if (depth > 10) {\r\n    log.error(\"Bailing out\");\r\n    return;\r\n  }\r\n  let nodes = graph.nodes();\r\n  let hasChildren = false;\r\n  for (const node of nodes) {\r\n    const children = graph.children(node);\r\n    hasChildren = hasChildren || children.length > 0;\r\n  }\r\n  if (!hasChildren) {\r\n    log.debug(\"Done, no node has children\", graph.nodes());\r\n    return;\r\n  }\r\n  log.debug(\"Nodes = \", nodes, depth);\r\n  for (const node of nodes) {\r\n    log.debug(\r\n      \"Extracting node\",\r\n      node,\r\n      clusterDb,\r\n      clusterDb[node] && !clusterDb[node].externalConnections,\r\n      !graph.parent(node),\r\n      graph.node(node),\r\n      graph.children(\"D\"),\r\n      \" Depth \",\r\n      depth\r\n    );\r\n    if (!clusterDb[node]) {\r\n      log.debug(\"Not a cluster\", node, depth);\r\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\r\n    graph.children(node) && graph.children(node).length > 0) {\r\n      log.warn(\r\n        \"Cluster without external connections, without a parent and with children\",\r\n        node,\r\n        depth\r\n      );\r\n      const graphSettings = graph.graph();\r\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\r\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\r\n        dir = clusterDb[node].clusterData.dir;\r\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\r\n      }\r\n      const clusterGraph = new graphlib.Graph({\r\n        multigraph: true,\r\n        compound: true\r\n      }).setGraph({\r\n        rankdir: dir,\r\n        // Todo: set proper spacing\r\n        nodesep: 50,\r\n        ranksep: 50,\r\n        marginx: 8,\r\n        marginy: 8\r\n      }).setDefaultEdgeLabel(function() {\r\n        return {};\r\n      });\r\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\r\n      copy(node, graph, clusterGraph, node);\r\n      graph.setNode(node, {\r\n        clusterNode: true,\r\n        id: node,\r\n        clusterData: clusterDb[node].clusterData,\r\n        labelText: clusterDb[node].labelText,\r\n        graph: clusterGraph\r\n      });\r\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\r\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\r\n    } else {\r\n      log.warn(\r\n        \"Cluster ** \",\r\n        node,\r\n        \" **not meeting the criteria !externalConnections:\",\r\n        !clusterDb[node].externalConnections,\r\n        \" no parent: \",\r\n        !graph.parent(node),\r\n        \" children \",\r\n        graph.children(node) && graph.children(node).length > 0,\r\n        graph.children(\"D\"),\r\n        depth\r\n      );\r\n      log.debug(clusterDb);\r\n    }\r\n  }\r\n  nodes = graph.nodes();\r\n  log.warn(\"New list of nodes\", nodes);\r\n  for (const node of nodes) {\r\n    const data = graph.node(node);\r\n    log.warn(\" Now next level\", node, data);\r\n    if (data.clusterNode) {\r\n      extractor(data.graph, depth + 1);\r\n    }\r\n  }\r\n};\r\nconst sorter = (graph, nodes) => {\r\n  if (nodes.length === 0) {\r\n    return [];\r\n  }\r\n  let result = Object.assign(nodes);\r\n  nodes.forEach((node) => {\r\n    const children = graph.children(node);\r\n    const sorted = sorter(graph, children);\r\n    result = [...result, ...sorted];\r\n  });\r\n  return result;\r\n};\r\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\r\nconst rect = (parent, node) => {\r\n  log.info(\"Creating subgraph rect for \", node.id, node);\r\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\r\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\r\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\r\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\r\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\r\n  let bbox = text.getBBox();\r\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\r\n    const div = text.children[0];\r\n    const dv = select(text);\r\n    bbox = div.getBoundingClientRect();\r\n    dv.attr(\"width\", bbox.width);\r\n    dv.attr(\"height\", bbox.height);\r\n  }\r\n  const padding = 0 * node.padding;\r\n  const halfPadding = padding / 2;\r\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\r\n  if (node.width <= bbox.width + padding) {\r\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\r\n  } else {\r\n    node.diff = -node.padding / 2;\r\n  }\r\n  log.trace(\"Data \", node, JSON.stringify(node));\r\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\r\n  if (useHtmlLabels) {\r\n    label.attr(\r\n      \"transform\",\r\n      // This puts the labal on top of the box instead of inside it\r\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\r\n    );\r\n  } else {\r\n    label.attr(\r\n      \"transform\",\r\n      // This puts the labal on top of the box instead of inside it\r\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\r\n    );\r\n  }\r\n  const rectBox = rect2.node().getBBox();\r\n  node.width = rectBox.width;\r\n  node.height = rectBox.height;\r\n  node.intersect = function(point) {\r\n    return intersectRect(node, point);\r\n  };\r\n  return shapeSvg;\r\n};\r\nconst noteGroup = (parent, node) => {\r\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\r\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\r\n  const padding = 0 * node.padding;\r\n  const halfPadding = padding / 2;\r\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\r\n  const rectBox = rect2.node().getBBox();\r\n  node.width = rectBox.width;\r\n  node.height = rectBox.height;\r\n  node.intersect = function(point) {\r\n    return intersectRect(node, point);\r\n  };\r\n  return shapeSvg;\r\n};\r\nconst roundedWithTitle = (parent, node) => {\r\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\r\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\r\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\r\n  const innerRect = shapeSvg.append(\"rect\");\r\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\r\n  let bbox = text.getBBox();\r\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\r\n    const div = text.children[0];\r\n    const dv = select(text);\r\n    bbox = div.getBoundingClientRect();\r\n    dv.attr(\"width\", bbox.width);\r\n    dv.attr(\"height\", bbox.height);\r\n  }\r\n  bbox = text.getBBox();\r\n  const padding = 0 * node.padding;\r\n  const halfPadding = padding / 2;\r\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\r\n  if (node.width <= bbox.width + node.padding) {\r\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\r\n  } else {\r\n    node.diff = -node.padding / 2;\r\n  }\r\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\r\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\r\n  label.attr(\r\n    \"transform\",\r\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\r\n  );\r\n  const rectBox = rect2.node().getBBox();\r\n  node.height = rectBox.height;\r\n  node.intersect = function(point) {\r\n    return intersectRect(node, point);\r\n  };\r\n  return shapeSvg;\r\n};\r\nconst divider = (parent, node) => {\r\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\r\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\r\n  const padding = 0 * node.padding;\r\n  const halfPadding = padding / 2;\r\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\r\n  const rectBox = rect2.node().getBBox();\r\n  node.width = rectBox.width;\r\n  node.height = rectBox.height;\r\n  node.diff = -node.padding / 2;\r\n  node.intersect = function(point) {\r\n    return intersectRect(node, point);\r\n  };\r\n  return shapeSvg;\r\n};\r\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\r\nlet clusterElems = {};\r\nconst insertCluster = (elem, node) => {\r\n  log.trace(\"Inserting cluster\");\r\n  const shape = node.shape || \"rect\";\r\n  clusterElems[node.id] = shapes[shape](elem, node);\r\n};\r\nconst clear = () => {\r\n  clusterElems = {};\r\n};\r\nconst recursiveRender = async (_elem, graph, diagramtype, parentCluster) => {\r\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\r\n  const dir = graph.graph().rankdir;\r\n  log.trace(\"Dir in recursive render - dir:\", dir);\r\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\r\n  if (!graph.nodes()) {\r\n    log.info(\"No nodes found for\", graph);\r\n  } else {\r\n    log.info(\"Recursive render XXX\", graph.nodes());\r\n  }\r\n  if (graph.edges().length > 0) {\r\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\r\n  }\r\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\r\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\r\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\r\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\r\n  await Promise.all(\r\n    graph.nodes().map(async function(v) {\r\n      const node = graph.node(v);\r\n      if (parentCluster !== void 0) {\r\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\r\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\r\n        graph.setNode(parentCluster.id, data);\r\n        if (!graph.parent(v)) {\r\n          log.trace(\"Setting parent\", v, parentCluster.id);\r\n          graph.setParent(v, parentCluster.id, data);\r\n        }\r\n      }\r\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\r\n      if (node && node.clusterNode) {\r\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\r\n        const o = await recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\r\n        const newEl = o.elem;\r\n        updateNodeBounds(node, newEl);\r\n        node.diff = o.diff || 0;\r\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\r\n        setNodeElem(newEl, node);\r\n        log.warn(\"Recursive render complete \", newEl, node);\r\n      } else {\r\n        if (graph.children(v).length > 0) {\r\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\r\n          log.info(findNonClusterChild(node.id, graph));\r\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\r\n        } else {\r\n          log.info(\"Node - the non recursive path\", v, node.id, node);\r\n          await insertNode(nodes, graph.node(v), dir);\r\n        }\r\n      }\r\n    })\r\n  );\r\n  graph.edges().forEach(function(e) {\r\n    const edge = graph.edge(e.v, e.w, e.name);\r\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\r\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\r\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\r\n    insertEdgeLabel(edgeLabels, edge);\r\n  });\r\n  graph.edges().forEach(function(e) {\r\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\r\n  });\r\n  log.info(\"#############################################\");\r\n  log.info(\"###                Layout                 ###\");\r\n  log.info(\"#############################################\");\r\n  log.info(graph);\r\n  layout(graph);\r\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\r\n  let diff = 0;\r\n  sortNodesByHierarchy(graph).forEach(function(v) {\r\n    const node = graph.node(v);\r\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\r\n    log.info(\r\n      \"Position \" + v + \": (\" + node.x,\r\n      \",\" + node.y,\r\n      \") width: \",\r\n      node.width,\r\n      \" height: \",\r\n      node.height\r\n    );\r\n    if (node && node.clusterNode) {\r\n      positionNode(node);\r\n    } else {\r\n      if (graph.children(v).length > 0) {\r\n        insertCluster(clusters, node);\r\n        clusterDb[node.id].node = node;\r\n      } else {\r\n        positionNode(node);\r\n      }\r\n    }\r\n  });\r\n  graph.edges().forEach(function(e) {\r\n    const edge = graph.edge(e);\r\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\r\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\r\n    positionEdgeLabel(edge, paths);\r\n  });\r\n  graph.nodes().forEach(function(v) {\r\n    const n = graph.node(v);\r\n    log.info(v, n.type, n.diff);\r\n    if (n.type === \"group\") {\r\n      diff = n.diff;\r\n    }\r\n  });\r\n  return { elem, diff };\r\n};\r\nconst render = async (elem, graph, markers, diagramtype, id) => {\r\n  insertMarkers(elem, markers, diagramtype, id);\r\n  clear$2();\r\n  clear$3();\r\n  clear();\r\n  clear$1();\r\n  log.warn(\"Graph at first:\", graphlibJson.write(graph));\r\n  adjustClustersAndEdges(graph);\r\n  log.warn(\"Graph after:\", graphlibJson.write(graph));\r\n  await recursiveRender(elem, graph, diagramtype);\r\n};\r\nexport {\r\n  render as r\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,SAAS,MAAM,GAAG;AAChB,MAAI,OAAO;AAAA,IACT,SAAS;AAAA,MACP,UAAU,EAAE,WAAW;AAAA,MACvB,YAAY,EAAE,aAAa;AAAA,MAC3B,UAAU,EAAE,WAAW;AAAA,IACzB;AAAA,IACA,OAAO,WAAW,CAAC;AAAA,IACnB,OAAO,WAAW,CAAC;AAAA,EACrB;AACA,MAAI,CAAG,oBAAY,EAAE,MAAM,CAAC,GAAG;AAC7B,SAAK,QAAU,cAAM,EAAE,MAAM,CAAC;AAAA,EAChC;AACA,SAAO;AACT;AAEA,SAAS,WAAW,GAAG;AACrB,SAAS,YAAI,EAAE,MAAM,GAAG,SAAU,GAAG;AACnC,QAAI,YAAY,EAAE,KAAK,CAAC;AACxB,QAAI,SAAS,EAAE,OAAO,CAAC;AACvB,QAAI,OAAO,EAAE,EAAK;AAClB,QAAI,CAAG,oBAAY,SAAS,GAAG;AAC7B,WAAK,QAAQ;AAAA,IACf;AACA,QAAI,CAAG,oBAAY,MAAM,GAAG;AAC1B,WAAK,SAAS;AAAA,IAChB;AACA,WAAO;AAAA,EACT,CAAC;AACH;AAEA,SAAS,WAAW,GAAG;AACrB,SAAS,YAAI,EAAE,MAAM,GAAG,SAAU,GAAG;AACnC,QAAI,YAAY,EAAE,KAAK,CAAC;AACxB,QAAI,OAAO,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE;AAC5B,QAAI,CAAG,oBAAY,EAAE,IAAI,GAAG;AAC1B,WAAK,OAAO,EAAE;AAAA,IAChB;AACA,QAAI,CAAG,oBAAY,SAAS,GAAG;AAC7B,WAAK,QAAQ;AAAA,IACf;AACA,WAAO;AAAA,EACT,CAAC;AACH;;;ACzCA,IAAI,YAAY,CAAC;AACjB,IAAI,cAAc,CAAC;AACnB,IAAI,UAAU,CAAC;AACf,IAAMA,WAAU,MAAM;AACpB,gBAAc,CAAC;AACf,YAAU,CAAC;AACX,cAAY,CAAC;AACf;AACA,IAAM,eAAe,CAAC,IAAI,gBAAgB;AACxC,QAAI,MAAM,kBAAkB,aAAa,KAAK,IAAI,OAAO,YAAY,WAAW,EAAE,SAAS,EAAE,CAAC;AAC9F,MAAI,YAAY,WAAW,EAAE,SAAS,EAAE,GAAG;AACzC,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,IAAM,gBAAgB,CAAC,MAAM,cAAc;AACzC,QAAI,KAAK,kBAAkB,WAAW,QAAQ,YAAY,SAAS,CAAC;AACpE,QAAI,KAAK,YAAY,IAAI;AACzB,MAAI,KAAK,MAAM,WAAW;AACxB,WAAO;AAAA,EACT;AACA,MAAI,KAAK,MAAM,WAAW;AACxB,WAAO;AAAA,EACT;AACA,MAAI,CAAC,YAAY,SAAS,GAAG;AAC3B,UAAI,MAAM,UAAU,WAAW,oBAAoB;AACnD,WAAO;AAAA,EACT;AACA,SAAO,YAAY,SAAS,EAAE,SAAS,KAAK,CAAC,KAAK,aAAa,KAAK,GAAG,SAAS,KAAK,aAAa,KAAK,GAAG,SAAS,KAAK,YAAY,SAAS,EAAE,SAAS,KAAK,CAAC;AAChK;AACA,IAAM,OAAO,CAAC,WAAW,OAAO,UAAU,WAAW;AACnD,QAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM,KAAK,SAAS;AAAA,IACpB;AAAA,EACF;AACA,QAAM,QAAQ,MAAM,SAAS,SAAS,KAAK,CAAC;AAC5C,MAAI,cAAc,QAAQ;AACxB,UAAM,KAAK,SAAS;AAAA,EACtB;AACA,QAAI,KAAK,6BAA6B,WAAW,SAAS,KAAK;AAC/D,QAAM,QAAQ,CAAC,SAAS;AACtB,QAAI,MAAM,SAAS,IAAI,EAAE,SAAS,GAAG;AACnC,WAAK,MAAM,OAAO,UAAU,MAAM;AAAA,IACpC,OAAO;AACL,YAAM,OAAO,MAAM,KAAK,IAAI;AAC5B,YAAI,KAAK,OAAO,MAAM,QAAQ,QAAQ,iBAAiB,SAAS;AAChE,eAAS,QAAQ,MAAM,IAAI;AAC3B,UAAI,WAAW,MAAM,OAAO,IAAI,GAAG;AACjC,cAAI,KAAK,kBAAkB,MAAM,MAAM,OAAO,IAAI,CAAC;AACnD,iBAAS,UAAU,MAAM,MAAM,OAAO,IAAI,CAAC;AAAA,MAC7C;AACA,UAAI,cAAc,UAAU,SAAS,WAAW;AAC9C,cAAI,MAAM,kBAAkB,MAAM,SAAS;AAC3C,iBAAS,UAAU,MAAM,SAAS;AAAA,MACpC,OAAO;AACL,cAAI,KAAK,YAAY,WAAW,QAAQ,QAAQ,QAAQ,MAAM,KAAK,SAAS,GAAG,MAAM;AACrF,cAAI;AAAA,UACF;AAAA,UACA;AAAA,UACA;AAAA,UACA,cAAc;AAAA,UACd;AAAA,UACA,SAAS;AAAA,QACX;AAAA,MACF;AACA,YAAM,QAAQ,MAAM,MAAM,IAAI;AAC9B,YAAI,MAAM,iBAAiB,KAAK;AAChC,YAAM,QAAQ,CAAC,SAAS;AACtB,cAAI,KAAK,QAAQ,IAAI;AACrB,cAAM,QAAQ,MAAM,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI;AAClD,cAAI,KAAK,aAAa,OAAO,MAAM;AACnC,YAAI;AACF,cAAI,cAAc,MAAM,MAAM,GAAG;AAC/B,kBAAI,KAAK,eAAe,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,IAAI;AACxD,qBAAS,QAAQ,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,IAAI;AACjD,kBAAI,KAAK,mBAAmB,SAAS,MAAM,GAAG,SAAS,KAAK,SAAS,MAAM,EAAE,CAAC,CAAC,CAAC;AAAA,UAClF,OAAO;AACL,kBAAI;AAAA,cACF;AAAA,cACA,KAAK;AAAA,cACL;AAAA,cACA,KAAK;AAAA,cACL;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF,SAAS,GAAG;AACV,gBAAI,MAAM,CAAC;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AACA,UAAI,MAAM,iBAAiB,IAAI;AAC/B,UAAM,WAAW,IAAI;AAAA,EACvB,CAAC;AACH;AACA,IAAM,qBAAqB,CAAC,IAAI,UAAU;AACxC,QAAM,WAAW,MAAM,SAAS,EAAE;AAClC,MAAI,MAAM,CAAC,GAAG,QAAQ;AACtB,aAAW,SAAS,UAAU;AAC5B,YAAQ,KAAK,IAAI;AACjB,UAAM,CAAC,GAAG,KAAK,GAAG,mBAAmB,OAAO,KAAK,CAAC;AAAA,EACpD;AACA,SAAO;AACT;AACA,IAAM,sBAAsB,CAAC,IAAI,UAAU;AACzC,QAAI,MAAM,aAAa,EAAE;AACzB,QAAM,WAAW,MAAM,SAAS,EAAE;AAClC,QAAI,MAAM,6BAA6B,IAAI,QAAQ;AACnD,MAAI,SAAS,SAAS,GAAG;AACvB,UAAI,MAAM,wBAAwB,EAAE;AACpC,WAAO;AAAA,EACT;AACA,aAAW,SAAS,UAAU;AAC5B,UAAM,MAAM,oBAAoB,OAAO,KAAK;AAC5C,QAAI,KAAK;AACP,YAAI,MAAM,yBAAyB,IAAI,QAAQ,GAAG;AAClD,aAAO;AAAA,IACT;AAAA,EACF;AACF;AACA,IAAM,cAAc,CAAC,OAAO;AAC1B,MAAI,CAAC,UAAU,EAAE,GAAG;AAClB,WAAO;AAAA,EACT;AACA,MAAI,CAAC,UAAU,EAAE,EAAE,qBAAqB;AACtC,WAAO;AAAA,EACT;AACA,MAAI,UAAU,EAAE,GAAG;AACjB,WAAO,UAAU,EAAE,EAAE;AAAA,EACvB;AACA,SAAO;AACT;AACA,IAAM,yBAAyB,CAAC,OAAO,UAAU;AAC/C,MAAI,CAAC,SAAS,QAAQ,IAAI;AACxB,UAAI,MAAM,uBAAuB;AACjC;AAAA,EACF,OAAO;AACL,UAAI,MAAM,mBAAmB;AAAA,EAC/B;AACA,QAAM,MAAM,EAAE,QAAQ,SAAS,IAAI;AACjC,UAAM,WAAW,MAAM,SAAS,EAAE;AAClC,QAAI,SAAS,SAAS,GAAG;AACvB,YAAI;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA,oBAAoB,IAAI,KAAK;AAAA,MAC/B;AACA,kBAAY,EAAE,IAAI,mBAAmB,IAAI,KAAK;AAC9C,gBAAU,EAAE,IAAI,EAAE,IAAI,oBAAoB,IAAI,KAAK,GAAG,aAAa,MAAM,KAAK,EAAE,EAAE;AAAA,IACpF;AAAA,EACF,CAAC;AACD,QAAM,MAAM,EAAE,QAAQ,SAAS,IAAI;AACjC,UAAM,WAAW,MAAM,SAAS,EAAE;AAClC,UAAM,QAAQ,MAAM,MAAM;AAC1B,QAAI,SAAS,SAAS,GAAG;AACvB,YAAI,MAAM,sBAAsB,IAAI,WAAW;AAC/C,YAAM,QAAQ,CAAC,SAAS;AACtB,YAAI,KAAK,MAAM,MAAM,KAAK,MAAM,IAAI;AAClC,gBAAM,KAAK,aAAa,KAAK,GAAG,EAAE;AAClC,gBAAM,KAAK,aAAa,KAAK,GAAG,EAAE;AAClC,cAAI,KAAK,IAAI;AACX,kBAAI,KAAK,UAAU,MAAM,oBAAoB,EAAE;AAC/C,kBAAI,KAAK,sBAAsB,IAAI,MAAM,YAAY,EAAE,CAAC;AACxD,sBAAU,EAAE,EAAE,sBAAsB;AAAA,UACtC;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,YAAI,MAAM,kBAAkB,IAAI,WAAW;AAAA,IAC7C;AAAA,EACF,CAAC;AACD,QAAM,MAAM,EAAE,QAAQ,SAAS,GAAG;AAChC,UAAM,OAAO,MAAM,KAAK,CAAC;AACzB,UAAI,KAAK,UAAU,EAAE,IAAI,SAAS,EAAE,IAAI,OAAO,KAAK,UAAU,CAAC,CAAC;AAChE,UAAI,KAAK,UAAU,EAAE,IAAI,SAAS,EAAE,IAAI,OAAO,KAAK,UAAU,MAAM,KAAK,CAAC,CAAC,CAAC;AAC5E,QAAI,IAAI,EAAE;AACV,QAAI,IAAI,EAAE;AACV,UAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA,EAAE;AAAA,MACF,EAAE;AAAA,MACF;AAAA,MACA,UAAU,EAAE,CAAC;AAAA,MACb;AAAA,MACA,UAAU,EAAE,CAAC;AAAA,IACf;AACA,QAAI,UAAU,EAAE,CAAC,KAAK,UAAU,EAAE,CAAC,KAAK,UAAU,EAAE,CAAC,MAAM,UAAU,EAAE,CAAC,GAAG;AACzE,YAAI,KAAK,kDAAkD,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AAC3E,YAAI,KAAK,qCAAqC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AAC9D,UAAI,YAAY,EAAE,CAAC;AACnB,UAAI,YAAY,EAAE,CAAC;AACnB,YAAM,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AACjC,YAAM,YAAY,EAAE,IAAI,QAAQ,EAAE;AAClC,YAAM,QAAQ,WAAW;AAAA,QACvB,OAAO;AAAA,QACP,IAAI;AAAA,QACJ,YAAY;AAAA,QACZ,WAAW,KAAK;AAAA,QAChB,SAAS;AAAA,QACT,OAAO;AAAA,QACP,OAAO;AAAA,MACT,CAAC;AACD,YAAM,QAAQ,KAAK,MAAM,KAAK,UAAU,IAAI,CAAC;AAC7C,YAAM,QAAQ,KAAK,MAAM,KAAK,UAAU,IAAI,CAAC;AAC7C,YAAM,QAAQ;AACd,YAAM,eAAe;AACrB,YAAM,QAAQ;AACd,YAAM,cAAc,EAAE;AACtB,YAAM,YAAY,EAAE;AACpB,YAAM,QAAQ,GAAG,WAAW,OAAO,EAAE,OAAO,iBAAiB;AAC7D,YAAM,QAAQ,WAAW,GAAG,OAAO,EAAE,OAAO,iBAAiB;AAAA,IAC/D,WAAW,UAAU,EAAE,CAAC,KAAK,UAAU,EAAE,CAAC,GAAG;AAC3C,YAAI,KAAK,qCAAqC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AAC9D,UAAI,YAAY,EAAE,CAAC;AACnB,UAAI,YAAY,EAAE,CAAC;AACnB,YAAM,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AACjC,UAAI,MAAM,EAAE,GAAG;AACb,aAAK,cAAc,EAAE;AAAA,MACvB;AACA,UAAI,MAAM,EAAE,GAAG;AACb,aAAK,YAAY,EAAE;AAAA,MACrB;AACA,YAAI,KAAK,0BAA0B,GAAG,GAAG,EAAE,IAAI;AAC/C,YAAM,QAAQ,GAAG,GAAG,MAAM,EAAE,IAAI;AAAA,IAClC;AAAA,EACF,CAAC;AACD,QAAI,KAAK,kBAA+B,MAAM,KAAK,CAAC;AACpD,YAAU,OAAO,CAAC;AAClB,QAAI,MAAM,SAAS;AACrB;AACA,IAAM,YAAY,CAAC,OAAO,UAAU;AAClC,QAAI,KAAK,gBAAgB,OAAoB,MAAM,KAAK,GAAG,MAAM,SAAS,GAAG,CAAC;AAC9E,MAAI,QAAQ,IAAI;AACd,UAAI,MAAM,aAAa;AACvB;AAAA,EACF;AACA,MAAI,QAAQ,MAAM,MAAM;AACxB,MAAI,cAAc;AAClB,aAAW,QAAQ,OAAO;AACxB,UAAM,WAAW,MAAM,SAAS,IAAI;AACpC,kBAAc,eAAe,SAAS,SAAS;AAAA,EACjD;AACA,MAAI,CAAC,aAAa;AAChB,UAAI,MAAM,8BAA8B,MAAM,MAAM,CAAC;AACrD;AAAA,EACF;AACA,QAAI,MAAM,YAAY,OAAO,KAAK;AAClC,aAAW,QAAQ,OAAO;AACxB,UAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA,UAAU,IAAI,KAAK,CAAC,UAAU,IAAI,EAAE;AAAA,MACpC,CAAC,MAAM,OAAO,IAAI;AAAA,MAClB,MAAM,KAAK,IAAI;AAAA,MACf,MAAM,SAAS,GAAG;AAAA,MAClB;AAAA,MACA;AAAA,IACF;AACA,QAAI,CAAC,UAAU,IAAI,GAAG;AACpB,YAAI,MAAM,iBAAiB,MAAM,KAAK;AAAA,IACxC,WAAW,CAAC,UAAU,IAAI,EAAE;AAAA,IAC5B,MAAM,SAAS,IAAI,KAAK,MAAM,SAAS,IAAI,EAAE,SAAS,GAAG;AACvD,YAAI;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,YAAM,gBAAgB,MAAM,MAAM;AAClC,UAAI,MAAM,cAAc,YAAY,OAAO,OAAO;AAClD,UAAI,UAAU,IAAI,KAAK,UAAU,IAAI,EAAE,eAAe,UAAU,IAAI,EAAE,YAAY,KAAK;AACrF,cAAM,UAAU,IAAI,EAAE,YAAY;AAClC,cAAI,KAAK,cAAc,UAAU,IAAI,EAAE,YAAY,KAAK,GAAG;AAAA,MAC7D;AACA,YAAM,eAAe,IAAa,MAAM;AAAA,QACtC,YAAY;AAAA,QACZ,UAAU;AAAA,MACZ,CAAC,EAAE,SAAS;AAAA,QACV,SAAS;AAAA;AAAA,QAET,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,MACX,CAAC,EAAE,oBAAoB,WAAW;AAChC,eAAO,CAAC;AAAA,MACV,CAAC;AACD,YAAI,KAAK,yBAAsC,MAAM,KAAK,CAAC;AAC3D,WAAK,MAAM,OAAO,cAAc,IAAI;AACpC,YAAM,QAAQ,MAAM;AAAA,QAClB,aAAa;AAAA,QACb,IAAI;AAAA,QACJ,aAAa,UAAU,IAAI,EAAE;AAAA,QAC7B,WAAW,UAAU,IAAI,EAAE;AAAA,QAC3B,OAAO;AAAA,MACT,CAAC;AACD,YAAI,KAAK,gCAAgC,MAAM,KAAkB,MAAM,YAAY,CAAC;AACpF,YAAI,MAAM,wBAAqC,MAAM,KAAK,CAAC;AAAA,IAC7D,OAAO;AACL,YAAI;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA,CAAC,UAAU,IAAI,EAAE;AAAA,QACjB;AAAA,QACA,CAAC,MAAM,OAAO,IAAI;AAAA,QAClB;AAAA,QACA,MAAM,SAAS,IAAI,KAAK,MAAM,SAAS,IAAI,EAAE,SAAS;AAAA,QACtD,MAAM,SAAS,GAAG;AAAA,QAClB;AAAA,MACF;AACA,YAAI,MAAM,SAAS;AAAA,IACrB;AAAA,EACF;AACA,UAAQ,MAAM,MAAM;AACpB,QAAI,KAAK,qBAAqB,KAAK;AACnC,aAAW,QAAQ,OAAO;AACxB,UAAM,OAAO,MAAM,KAAK,IAAI;AAC5B,UAAI,KAAK,mBAAmB,MAAM,IAAI;AACtC,QAAI,KAAK,aAAa;AACpB,gBAAU,KAAK,OAAO,QAAQ,CAAC;AAAA,IACjC;AAAA,EACF;AACF;AACA,IAAM,SAAS,CAAC,OAAO,UAAU;AAC/B,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,CAAC;AAAA,EACV;AACA,MAAI,SAAS,OAAO,OAAO,KAAK;AAChC,QAAM,QAAQ,CAAC,SAAS;AACtB,UAAM,WAAW,MAAM,SAAS,IAAI;AACpC,UAAM,SAAS,OAAO,OAAO,QAAQ;AACrC,aAAS,CAAC,GAAG,QAAQ,GAAG,MAAM;AAAA,EAChC,CAAC;AACD,SAAO;AACT;AACA,IAAM,uBAAuB,CAAC,UAAU,OAAO,OAAO,MAAM,SAAS,CAAC;AACtE,IAAM,OAAO,CAAC,QAAQ,SAAS;AAC7B,QAAI,KAAK,+BAA+B,KAAK,IAAI,IAAI;AACrD,QAAM,WAAW,OAAO,OAAO,GAAG,EAAE,KAAK,SAAS,aAAa,KAAK,QAAQ,MAAM,KAAK,QAAQ,GAAG,EAAE,KAAK,MAAM,KAAK,EAAE;AACtH,QAAM,QAAQ,SAAS,OAAO,QAAQ,cAAc;AACpD,QAAM,gBAAgB,SAAS,YAAU,EAAE,UAAU,UAAU;AAC/D,QAAM,QAAQ,SAAS,OAAO,GAAG,EAAE,KAAK,SAAS,eAAe;AAChE,QAAM,OAAO,KAAK,cAAc,aAAa,WAAW,OAAO,KAAK,WAAW,EAAE,OAAO,KAAK,YAAY,cAAc,CAAC,IAAI,MAAM,KAAK,EAAE,YAAY,cAAY,KAAK,WAAW,KAAK,YAAY,QAAQ,IAAI,CAAC;AAC/M,MAAI,OAAO,KAAK,QAAQ;AACxB,MAAI,SAAS,YAAU,EAAE,UAAU,UAAU,GAAG;AAC9C,UAAM,MAAM,KAAK,SAAS,CAAC;AAC3B,UAAM,KAAK,eAAO,IAAI;AACtB,WAAO,IAAI,sBAAsB;AACjC,OAAG,KAAK,SAAS,KAAK,KAAK;AAC3B,OAAG,KAAK,UAAU,KAAK,MAAM;AAAA,EAC/B;AACA,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,cAAc,UAAU;AAC9B,QAAM,QAAQ,KAAK,SAAS,KAAK,QAAQ,UAAU,KAAK,QAAQ,UAAU,KAAK;AAC/E,MAAI,KAAK,SAAS,KAAK,QAAQ,SAAS;AACtC,SAAK,QAAQ,KAAK,QAAQ,KAAK,SAAS,IAAI,KAAK,UAAU;AAAA,EAC7D,OAAO;AACL,SAAK,OAAO,CAAC,KAAK,UAAU;AAAA,EAC9B;AACA,QAAI,MAAM,SAAS,MAAM,KAAK,UAAU,IAAI,CAAC;AAC7C,QAAM,KAAK,SAAS,KAAK,KAAK,EAAE,KAAK,MAAM,KAAK,EAAE,EAAE,KAAK,MAAM,KAAK,EAAE,EAAE,KAAK,KAAK,KAAK,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,IAAI,WAAW,EAAE,KAAK,SAAS,KAAK,EAAE,KAAK,UAAU,KAAK,SAAS,OAAO;AACjN,MAAI,eAAe;AACjB,UAAM;AAAA,MACJ;AAAA;AAAA,MAEA,gBAAgB,KAAK,IAAI,KAAK,QAAQ,KAAK,QAAQ,KAAK,IAAI,KAAK,SAAS,KAAK;AAAA,IACjF;AAAA,EACF,OAAO;AACL,UAAM;AAAA,MACJ;AAAA;AAAA,MAEA,eAAe,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAK,SAAS,KAAK;AAAA,IAC9D;AAAA,EACF;AACA,QAAM,UAAU,MAAM,KAAK,EAAE,QAAQ;AACrC,OAAK,QAAQ,QAAQ;AACrB,OAAK,SAAS,QAAQ;AACtB,OAAK,YAAY,SAAS,OAAO;AAC/B,WAAO,gBAAc,MAAM,KAAK;AAAA,EAClC;AACA,SAAO;AACT;AACA,IAAM,YAAY,CAAC,QAAQ,SAAS;AAClC,QAAM,WAAW,OAAO,OAAO,GAAG,EAAE,KAAK,SAAS,cAAc,EAAE,KAAK,MAAM,KAAK,EAAE;AACpF,QAAM,QAAQ,SAAS,OAAO,QAAQ,cAAc;AACpD,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,cAAc,UAAU;AAC9B,QAAM,KAAK,MAAM,KAAK,EAAE,EAAE,KAAK,MAAM,KAAK,EAAE,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,QAAQ,IAAI,WAAW,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,IAAI,WAAW,EAAE,KAAK,SAAS,KAAK,QAAQ,OAAO,EAAE,KAAK,UAAU,KAAK,SAAS,OAAO,EAAE,KAAK,QAAQ,MAAM;AAC9O,QAAM,UAAU,MAAM,KAAK,EAAE,QAAQ;AACrC,OAAK,QAAQ,QAAQ;AACrB,OAAK,SAAS,QAAQ;AACtB,OAAK,YAAY,SAAS,OAAO;AAC/B,WAAO,gBAAc,MAAM,KAAK;AAAA,EAClC;AACA,SAAO;AACT;AACA,IAAM,mBAAmB,CAAC,QAAQ,SAAS;AACzC,QAAM,WAAW,OAAO,OAAO,GAAG,EAAE,KAAK,SAAS,KAAK,OAAO,EAAE,KAAK,MAAM,KAAK,EAAE;AAClF,QAAM,QAAQ,SAAS,OAAO,QAAQ,cAAc;AACpD,QAAM,QAAQ,SAAS,OAAO,GAAG,EAAE,KAAK,SAAS,eAAe;AAChE,QAAM,YAAY,SAAS,OAAO,MAAM;AACxC,QAAM,OAAO,MAAM,KAAK,EAAE,YAAY,cAAY,KAAK,WAAW,KAAK,YAAY,QAAQ,IAAI,CAAC;AAChG,MAAI,OAAO,KAAK,QAAQ;AACxB,MAAI,SAAS,YAAU,EAAE,UAAU,UAAU,GAAG;AAC9C,UAAM,MAAM,KAAK,SAAS,CAAC;AAC3B,UAAM,KAAK,eAAO,IAAI;AACtB,WAAO,IAAI,sBAAsB;AACjC,OAAG,KAAK,SAAS,KAAK,KAAK;AAC3B,OAAG,KAAK,UAAU,KAAK,MAAM;AAAA,EAC/B;AACA,SAAO,KAAK,QAAQ;AACpB,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,cAAc,UAAU;AAC9B,QAAM,QAAQ,KAAK,SAAS,KAAK,QAAQ,KAAK,UAAU,KAAK,QAAQ,KAAK,UAAU,KAAK;AACzF,MAAI,KAAK,SAAS,KAAK,QAAQ,KAAK,SAAS;AAC3C,SAAK,QAAQ,KAAK,QAAQ,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,EAC7D,OAAO;AACL,SAAK,OAAO,CAAC,KAAK,UAAU;AAAA,EAC9B;AACA,QAAM,KAAK,SAAS,OAAO,EAAE,KAAK,KAAK,KAAK,IAAI,QAAQ,IAAI,WAAW,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,IAAI,WAAW,EAAE,KAAK,SAAS,QAAQ,OAAO,EAAE,KAAK,UAAU,KAAK,SAAS,OAAO;AAC9L,YAAU,KAAK,SAAS,OAAO,EAAE,KAAK,KAAK,KAAK,IAAI,QAAQ,IAAI,WAAW,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,IAAI,cAAc,KAAK,SAAS,CAAC,EAAE,KAAK,SAAS,QAAQ,OAAO,EAAE,KAAK,UAAU,KAAK,SAAS,UAAU,KAAK,SAAS,CAAC;AACtO,QAAM;AAAA,IACJ;AAAA,IACA,gBAAgB,KAAK,IAAI,KAAK,QAAQ,KAAK,QAAQ,KAAK,IAAI,KAAK,SAAS,IAAI,KAAK,UAAU,KAAK,SAAS,YAAU,EAAE,UAAU,UAAU,IAAI,IAAI,MAAM;AAAA,EAC3J;AACA,QAAM,UAAU,MAAM,KAAK,EAAE,QAAQ;AACrC,OAAK,SAAS,QAAQ;AACtB,OAAK,YAAY,SAAS,OAAO;AAC/B,WAAO,gBAAc,MAAM,KAAK;AAAA,EAClC;AACA,SAAO;AACT;AACA,IAAM,UAAU,CAAC,QAAQ,SAAS;AAChC,QAAM,WAAW,OAAO,OAAO,GAAG,EAAE,KAAK,SAAS,KAAK,OAAO,EAAE,KAAK,MAAM,KAAK,EAAE;AAClF,QAAM,QAAQ,SAAS,OAAO,QAAQ,cAAc;AACpD,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,cAAc,UAAU;AAC9B,QAAM,KAAK,SAAS,SAAS,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,QAAQ,IAAI,WAAW,EAAE,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,CAAC,EAAE,KAAK,SAAS,KAAK,QAAQ,OAAO,EAAE,KAAK,UAAU,KAAK,SAAS,OAAO;AAC5L,QAAM,UAAU,MAAM,KAAK,EAAE,QAAQ;AACrC,OAAK,QAAQ,QAAQ;AACrB,OAAK,SAAS,QAAQ;AACtB,OAAK,OAAO,CAAC,KAAK,UAAU;AAC5B,OAAK,YAAY,SAAS,OAAO;AAC/B,WAAO,gBAAc,MAAM,KAAK;AAAA,EAClC;AACA,SAAO;AACT;AACA,IAAM,SAAS,EAAE,MAAM,kBAAkB,WAAW,QAAQ;AAC5D,IAAI,eAAe,CAAC;AACpB,IAAM,gBAAgB,CAAC,MAAM,SAAS;AACpC,QAAI,MAAM,mBAAmB;AAC7B,QAAM,QAAQ,KAAK,SAAS;AAC5B,eAAa,KAAK,EAAE,IAAI,OAAO,KAAK,EAAE,MAAM,IAAI;AAClD;AACA,IAAMC,SAAQ,MAAM;AAClB,iBAAe,CAAC;AAClB;AACA,IAAM,kBAAkB,OAAO,OAAO,OAAO,aAAa,kBAAkB;AAC1E,QAAI,KAAK,kCAA+C,MAAM,KAAK,GAAG,aAAa;AACnF,QAAM,MAAM,MAAM,MAAM,EAAE;AAC1B,QAAI,MAAM,kCAAkC,GAAG;AAC/C,QAAM,OAAO,MAAM,OAAO,GAAG,EAAE,KAAK,SAAS,MAAM;AACnD,MAAI,CAAC,MAAM,MAAM,GAAG;AAClB,UAAI,KAAK,sBAAsB,KAAK;AAAA,EACtC,OAAO;AACL,UAAI,KAAK,wBAAwB,MAAM,MAAM,CAAC;AAAA,EAChD;AACA,MAAI,MAAM,MAAM,EAAE,SAAS,GAAG;AAC5B,UAAI,MAAM,mBAAmB,MAAM,KAAK,MAAM,MAAM,EAAE,CAAC,CAAC,CAAC;AAAA,EAC3D;AACA,QAAM,WAAW,KAAK,OAAO,GAAG,EAAE,KAAK,SAAS,UAAU;AAC1D,QAAM,YAAY,KAAK,OAAO,GAAG,EAAE,KAAK,SAAS,WAAW;AAC5D,QAAM,aAAa,KAAK,OAAO,GAAG,EAAE,KAAK,SAAS,YAAY;AAC9D,QAAM,QAAQ,KAAK,OAAO,GAAG,EAAE,KAAK,SAAS,OAAO;AACpD,QAAM,QAAQ;AAAA,IACZ,MAAM,MAAM,EAAE,IAAI,eAAe,GAAG;AAClC,YAAM,OAAO,MAAM,KAAK,CAAC;AACzB,UAAI,kBAAkB,QAAQ;AAC5B,cAAM,OAAO,KAAK,MAAM,KAAK,UAAU,cAAc,WAAW,CAAC;AACjE,cAAI,KAAK,kCAAkC,GAAG,MAAM,MAAM,aAAa;AACvE,cAAM,QAAQ,cAAc,IAAI,IAAI;AACpC,YAAI,CAAC,MAAM,OAAO,CAAC,GAAG;AACpB,gBAAI,MAAM,kBAAkB,GAAG,cAAc,EAAE;AAC/C,gBAAM,UAAU,GAAG,cAAc,IAAI,IAAI;AAAA,QAC3C;AAAA,MACF;AACA,YAAI,KAAK,sBAAsB,IAAI,OAAO,KAAK,UAAU,MAAM,KAAK,CAAC,CAAC,CAAC;AACvE,UAAI,QAAQ,KAAK,aAAa;AAC5B,cAAI,KAAK,sBAAsB,GAAG,KAAK,OAAO,MAAM,KAAK,CAAC,CAAC;AAC3D,cAAM,IAAI,MAAM,gBAAgB,OAAO,KAAK,OAAO,aAAa,MAAM,KAAK,CAAC,CAAC;AAC7E,cAAM,QAAQ,EAAE;AAChB,yBAAiB,MAAM,KAAK;AAC5B,aAAK,OAAO,EAAE,QAAQ;AACtB,cAAI,KAAK,wBAAwB,GAAG,MAAM,KAAK,OAAO,KAAK,GAAG,KAAK,CAAC;AACpE,oBAAY,OAAO,IAAI;AACvB,cAAI,KAAK,8BAA8B,OAAO,IAAI;AAAA,MACpD,OAAO;AACL,YAAI,MAAM,SAAS,CAAC,EAAE,SAAS,GAAG;AAChC,gBAAI,KAAK,wCAAwC,GAAG,KAAK,IAAI,MAAM,KAAK;AACxE,gBAAI,KAAK,oBAAoB,KAAK,IAAI,KAAK,CAAC;AAC5C,oBAAU,KAAK,EAAE,IAAI,EAAE,IAAI,oBAAoB,KAAK,IAAI,KAAK,GAAG,KAAK;AAAA,QACvE,OAAO;AACL,gBAAI,KAAK,iCAAiC,GAAG,KAAK,IAAI,IAAI;AAC1D,gBAAM,WAAW,OAAO,MAAM,KAAK,CAAC,GAAG,GAAG;AAAA,QAC5C;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACA,QAAM,MAAM,EAAE,QAAQ,SAAS,GAAG;AAChC,UAAM,OAAO,MAAM,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AACxC,UAAI,KAAK,UAAU,EAAE,IAAI,SAAS,EAAE,IAAI,OAAO,KAAK,UAAU,CAAC,CAAC;AAChE,UAAI,KAAK,UAAU,EAAE,IAAI,SAAS,EAAE,IAAI,MAAM,GAAG,KAAK,KAAK,UAAU,MAAM,KAAK,CAAC,CAAC,CAAC;AACnF,UAAI,KAAK,OAAO,WAAW,QAAQ,EAAE,GAAG,EAAE,GAAG,kBAAkB,UAAU,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,CAAC;AAC7F,oBAAgB,YAAY,IAAI;AAAA,EAClC,CAAC;AACD,QAAM,MAAM,EAAE,QAAQ,SAAS,GAAG;AAChC,UAAI,KAAK,UAAU,EAAE,IAAI,SAAS,EAAE,IAAI,OAAO,KAAK,UAAU,CAAC,CAAC;AAAA,EAClE,CAAC;AACD,QAAI,KAAK,+CAA+C;AACxD,QAAI,KAAK,+CAA+C;AACxD,QAAI,KAAK,+CAA+C;AACxD,QAAI,KAAK,KAAK;AACd,SAAO,KAAK;AACZ,QAAI,KAAK,uBAAoC,MAAM,KAAK,CAAC;AACzD,MAAI,OAAO;AACX,uBAAqB,KAAK,EAAE,QAAQ,SAAS,GAAG;AAC9C,UAAM,OAAO,MAAM,KAAK,CAAC;AACzB,UAAI,KAAK,cAAc,IAAI,OAAO,KAAK,UAAU,MAAM,KAAK,CAAC,CAAC,CAAC;AAC/D,UAAI;AAAA,MACF,cAAc,IAAI,QAAQ,KAAK;AAAA,MAC/B,MAAM,KAAK;AAAA,MACX;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA,KAAK;AAAA,IACP;AACA,QAAI,QAAQ,KAAK,aAAa;AAC5B,mBAAa,IAAI;AAAA,IACnB,OAAO;AACL,UAAI,MAAM,SAAS,CAAC,EAAE,SAAS,GAAG;AAChC,sBAAc,UAAU,IAAI;AAC5B,kBAAU,KAAK,EAAE,EAAE,OAAO;AAAA,MAC5B,OAAO;AACL,qBAAa,IAAI;AAAA,MACnB;AAAA,IACF;AAAA,EACF,CAAC;AACD,QAAM,MAAM,EAAE,QAAQ,SAAS,GAAG;AAChC,UAAM,OAAO,MAAM,KAAK,CAAC;AACzB,UAAI,KAAK,UAAU,EAAE,IAAI,SAAS,EAAE,IAAI,OAAO,KAAK,UAAU,IAAI,GAAG,IAAI;AACzE,UAAM,QAAQ,WAAW,WAAW,GAAG,MAAM,WAAW,aAAa,KAAK;AAC1E,sBAAkB,MAAM,KAAK;AAAA,EAC/B,CAAC;AACD,QAAM,MAAM,EAAE,QAAQ,SAAS,GAAG;AAChC,UAAM,IAAI,MAAM,KAAK,CAAC;AACtB,UAAI,KAAK,GAAG,EAAE,MAAM,EAAE,IAAI;AAC1B,QAAI,EAAE,SAAS,SAAS;AACtB,aAAO,EAAE;AAAA,IACX;AAAA,EACF,CAAC;AACD,SAAO,EAAE,MAAM,KAAK;AACtB;AACA,IAAM,SAAS,OAAO,MAAM,OAAO,SAAS,aAAa,OAAO;AAC9D,kBAAc,MAAM,SAAS,aAAa,EAAE;AAC5C,UAAQ;AACR,QAAQ;AACR,EAAAA,OAAM;AACN,EAAAD,SAAQ;AACR,QAAI,KAAK,mBAAgC,MAAM,KAAK,CAAC;AACrD,yBAAuB,KAAK;AAC5B,QAAI,KAAK,gBAA6B,MAAM,KAAK,CAAC;AAClD,QAAM,gBAAgB,MAAM,OAAO,WAAW;AAChD;",
  "names": ["clear$1", "clear"]
}
